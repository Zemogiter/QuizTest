<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KGySoft.Drawing.Core</name>
    </assembly>
    <members>
        <member name="T:KGySoft.Drawing.DrawingCoreModule">
            <summary>
            Represents the <c>KGySoft.Drawing.Core</c> module.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.DrawingCoreModule.Initialize">Initialize</see> method for details.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.DrawingCoreModule.Initialize">
             <summary>
             Initializes the <c>KGySoft.Drawing.Core</c> module. It initializes the resource manager for string resources and registers its central management
             in the <a href="http://docs.kgysoft.net/corelibraries/html/T_KGySoft_LanguageSettings.htm">LanguageSettings</a> class.
             </summary>
             <remarks>
             <note>The module initializer is executed automatically when any member is accessed in the module for the first time. This method is public to able
             to trigger module initialization without performing any other operation. Normally you don't need to call it explicitly but it can be useful if you use
             the KGy SOFT Drawing Core Libraries in an application and you want to configure resource management on starting the application via
             the <a href="http://docs.kgysoft.net/corelibraries/html/T_KGySoft_LanguageSettings.htm">LanguageSettings</a> class.
             In such case you can call this method before configuring language settings to make sure that the resources of
             the <c>KGySoft.Drawing.Core.dll</c> are also affected by the settings.</note>
             </remarks>
             <example>
             The following example demonstrates how to initialize the <c>KGySoft.Drawing.Core</c> module in an application (you don't really need to do this
             if you use KGy SOFT Drawing Core Libraries from a class library):
             <code lang="C#"><![CDATA[
             using KGySoft;
             using KGySoft.Drawing;
             using KGySoft.Resources;
             
             public class Example
             {
                 public static void Main()
                 {
                     // To make sure that configuring LanguageSettings affects also the resources in KGySoft.Drawing.Core
                     DrawingCoreModule.Initialize();
            
                     // Opting in to use compiled and .resx resources for the application
                     LanguageSettings.DynamicResourceManagersSource = ResourceManagerSources.CompiledAndResX;
                     LanguageSettings.DisplayLanguage = MyConfigs.GetLastlyUsedLanguage(); // Get some CultureInfo
             
                     // Optional: To add possibly new resource entries to the localization of the current language
                     LanguageSettings.EnsureInvariantResourcesMerged();
            
                     // Now you can launch the actual application
                     LaunchMyApplication(); // whatever your app actually does
                 }
             }]]></code>
             </example>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ColorSpaceHelper">
            <summary>
            A helper class containing low-level conversion methods for <see cref="T:System.Byte">byte</see>, <see cref="T:System.UInt16">ushort</see> and <see cref="T:System.Single">float</see>
            types to convert color components using the sRGB and linear color spaces.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.ToFloat(System.Byte)">
            <summary>
            Converts a <see cref="T:System.Byte">byte</see> to a floating-point value between 0 and 1 without changing the color space.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A floating-point value between 0 and 1.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.ToFloat(System.UInt16)">
            <summary>
            Converts a <see cref="T:System.UInt16"/> value to a floating-point value between 0 and 1 without changing the color space.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A floating-point value between 0 and 1.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.ToByte(System.Single)">
            <summary>
            Converts a floating-point value ranging from 0 to 1 to a <see cref="T:System.Byte">byte</see> without changing the color space.
            Out-of-range values are allowed in which case the result will be clipped
            to <see cref="F:System.Byte.MinValue">Byte.MinValue</see> or <see cref="F:System.Byte.MaxValue">Byte.MaxValue</see>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.ToByte(System.UInt16)">
            <summary>
            Converts a 16-bit color channel value to an 8-bit value representing the same intensity without changing the color space.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.ToUInt16(System.Single)">
            <summary>
            Converts a floating-point value ranging from 0 to 1 to a <see cref="T:System.UInt16"/> without changing the color space.
            Out-of-range values are allowed in which case the result will be clipped
            to <see cref="F:System.UInt16.MinValue">UInt16.MinValue</see> or <see cref="F:System.UInt16.MaxValue">UInt16.MaxValue</see>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.ToUInt16(System.Byte)">
            <summary>
            Converts an 8-bit color channel value to a 16-bit value representing the same intensity without changing the color space.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.SrgbToLinear(System.Byte)">
            <summary>
            Converts a <see cref="T:System.Byte">byte</see> value representing an sRGB color component to a floating-point value between 0 and 1
            representing an RGB color component in the linear color space.
            </summary>
            <param name="value">The <see cref="T:System.Byte">byte</see> value to convert.</param>
            <returns>A floating-point value between 0 and 1 representing an RGB color component in the linear color space.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.SrgbToLinear(System.UInt16)">
            <summary>
            Converts a <see cref="T:System.UInt16"/> value representing an sRGB color component to a floating-point value between 0 and 1
            representing an RGB color component in the linear color space.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to convert.</param>
            <returns>A floating-point value between 0 and 1 representing an RGB color component in the linear color space.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.SrgbToLinear(System.Single)">
            <summary>
            Converts a floating-point value representing an sRGB color component to a value representing an RGB color component in the linear color space.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A floating-point value between 0 and 1 representing an RGB color component in the linear color space.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.LinearToSrgb(System.Single)">
            <summary>
            Converts a floating-point value representing a color component in the linear color space
            to a value representing an sRGB color component.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A floating-point value between 0 and 1 representing an sRGB color component.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.LinearToSrgb8Bit(System.Single)">
            <summary>
            Converts a floating-point value representing a color component in the linear color space
            to a <see cref="T:System.Byte">byte</see> value representing an sRGB color component.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Byte">byte</see> value representing an sRGB color component.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.LinearToSrgb16Bit(System.Single)">
            <summary>
            Converts a floating-point value representing a color component in the linear color space
            to a <see cref="T:System.UInt16"/> value representing an sRGB color component.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.UInt16"/> value representing an sRGB color component.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.Palette">
            <summary>
            Represents an indexed set of colors and provides efficient color lookup with caching.
            To create an instance use the static methods or the constructors.
            </summary>
            <remarks>
            <para>The <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class represents an indexed set of colors that can be accessed by the <see cref="P:KGySoft.Drawing.Imaging.Palette.Item(System.Int32)">indexer</see> or
            the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetEntries">GetEntries</see> method.</para>
            <para>The <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class supports performing quick lookup operations (see <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods) to find the closest matching palette entry to any color.</para>
            <note>The palette entries represent colors in the sRGB color space and nearest color lookup is also performed in the sRGB color space by default
            but you can create a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that performs looking up for nearest colors in the linear color space
            by the <see cref="M:KGySoft.Drawing.Imaging.Palette.#ctor(KGySoft.Drawing.Imaging.Palette,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> constructor or the factory methods that have <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> parameter.
            See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/>
            enumeration for details and image examples about using the different color spaces in various operations.</note>
            <para>By default the lookup is performed by a slightly modified euclidean-like search but if the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> contains grayscale entries only,
            then it is optimized for finding the best matching gray shade based on human perception. To override this logic a custom lookup routine can be passed to the constructors.</para>
            <para>If the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance is created without a custom lookup logic, then the search results for non-palette-entry colors are cached.
            The cache is optimized for parallel processing. The theoretical maximum of cache size (apart from the actual palette entries) is 2 x 2<sup>18</sup> but
            as soon as that limit is reached the amount of stored elements are halved so the cache is somewhat optimized to store the most recently processed colors.</para>
            <para>In order to prevent caching you can pass a custom lookup logic to the constructors. It is expected to be fast (applying some direct mapping to a palette index,
            for example), or that it uses some custom caching (which should perform well also when queried concurrently).</para>
            <para>The palette can have any number of colors but as the typical usage is quantizing colors for indexed bitmaps the typical maximum palette size
            is 256. Generally, the more colors the palette has the slower are the lookups for non-palette colors that are not cached yet.</para>
            </remarks>
            <threadsafety instance="false">If there is no custom lookup logic passed to the constructors, then members of this type are guaranteed to be safe for multi-threaded operations.
            If this type is initialized with a custom lookup logic, then thread-safety depends on the custom lookup implementation.</threadsafety>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.Palette.Count">
            <summary>
            Gets the number of color entries in the current <see cref="T:KGySoft.Drawing.Imaging.Palette"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.Palette.BackColor">
            <summary>
            Gets the background color. If a lookup operation (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>)
            is performed with a color whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <see cref="P:KGySoft.Drawing.Imaging.Palette.AlphaThreshold"/>, and there is no exact match among the entries of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/>,
            then the color will be blended with this color before performing the lookup.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.Palette.AlphaThreshold">
            <summary>
            If this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> has a transparent entry, then gets a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field,
            under which lookup operations will return the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>)
            or the index of the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>) in the palette.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.Palette.IsGrayscale">
            <summary>
            Gets whether the palette consists of grayscale entries only.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.Palette.HasAlpha">
            <summary>
            Gets whether the palette contains at least one entry that is not fully opaque.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.Palette.WorkingColorSpace">
            <summary>
            Gets the preferred color space of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance for performing blending and measuring distance when looking for a nearest color.
            You can use the <see cref="M:KGySoft.Drawing.Imaging.Palette.#ctor(KGySoft.Drawing.Imaging.Palette,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> constructor to create a clone of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> using
            a different working color space.
            </summary>
            <remarks>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for details and
            image examples about using the different color spaces in various operations.</note>
            <para>If the value of this property is <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the sRGB color space is used
            because palette <see cref="M:KGySoft.Drawing.Imaging.Palette.GetEntries">entries</see> represent sRGB colors anyway.</para>
            <para>If this palette uses a custom nearest color lookup, then it depends on the custom function whether it considers the value of this property.</para>
            <note>Please note that palette entries themselves always represent sRGB color values, regardless the value of this property.</note>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.Palette.Item(System.Int32)">
            <summary>
            Gets the color entry of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index of the color entry to be retrieved.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance representing the color entry of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> at the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> must be equal to or greater than zero and less <see cref="P:KGySoft.Drawing.Imaging.Palette.Count"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.#ctor(KGySoft.Drawing.Imaging.Color32[],KGySoft.Drawing.Imaging.Color32,System.Byte,System.Func{KGySoft.Drawing.Imaging.Color32,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class for details.
            </summary>
            <param name="entries">The color entries to be stored by this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color, whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <paramref name="alphaThreshold"/>, and there is no exact match among the <paramref name="entries"/>,
            then the color to be found will be blended with this color before performing the lookup. The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored.</param>
            <param name="alphaThreshold">If there is at least one completely transparent color among <paramref name="entries"/>,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which lookup operations will return the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>)
            or the index of the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).</param>
            <param name="customGetNearestColorIndex">A delegate specifying an optional custom lookup logic to obtain an index from <paramref name="entries"/> by a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            If specified, it must be thread-safe and it is expected to be fast. The results returned by the specified delegate are not cached. If <see langword="null"/>,
            then <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see> and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods will perform a sequential lookup by using a default logic and results will be cached.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entries"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="entries"/> is empty.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.#ctor(System.Collections.Generic.IEnumerable{KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IPalette,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class for details.
            </summary>
            <param name="entries">The color entries to be stored by this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color, whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <paramref name="alphaThreshold"/>, and there is no exact match among the <paramref name="entries"/>,
            then the color to be found will be blended with this color before performing the lookup. The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If there is at least one completely transparent color among <paramref name="entries"/>,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which lookup operations will return the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>)
            or the index of the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>). This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="customGetNearestColorIndex">A delegate specifying an optional custom lookup logic to obtain an index from <paramref name="entries"/>
            by a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> and an <see cref="T:KGySoft.Drawing.Imaging.IPalette"/> instance. If specified, it must be thread-safe and it is expected to be fast.
            The results returned by the specified delegate are not cached. Make sure you always obtain the palette properties such as <see cref="P:KGySoft.Drawing.Imaging.IPalette.BackColor"/>,
            <see cref="P:KGySoft.Drawing.Imaging.IPalette.AlphaThreshold"/> and <see cref="P:KGySoft.Drawing.Imaging.IPalette.WorkingColorSpace"/> from the <see cref="T:KGySoft.Drawing.Imaging.IPalette"/> argument
            as this delegate can be re-used in another <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance when calling the <see cref="M:KGySoft.Drawing.Imaging.Palette.#ctor(KGySoft.Drawing.Imaging.Palette,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> constructor.
            If <see langword="null"/>, then <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see> and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods will
            perform a sequential lookup by using a default logic and results will be cached. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entries"/> must not be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="entries"/> must not be empty.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.#ctor(System.Collections.Generic.IEnumerable{KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IPalette,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class for details.
            </summary>
            <param name="entries">The color entries to be stored by this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance.</param>
            <param name="workingColorSpace">Specifies the desired color space to be used by the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods for blending and measuring color distance.
            If <paramref name="customGetNearestColorIndex"/> is set, then it depends on the custom lookup function whether it respects the value of this parameter.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color, whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <paramref name="alphaThreshold"/>, and there is no exact match among the <paramref name="entries"/>,
            then the color to be found will be blended with this color before performing the lookup. The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If there is at least one completely transparent color among <paramref name="entries"/>,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which lookup operations will return the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>)
            or the index of the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>). This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="customGetNearestColorIndex">A delegate specifying an optional custom lookup logic to obtain an index from <paramref name="entries"/>
            by a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> and an <see cref="T:KGySoft.Drawing.Imaging.IPalette"/> instance. If specified, it must be thread-safe and it is expected to be fast.
            The results returned by the specified delegate are not cached. Make sure you always obtain the palette properties such as <see cref="P:KGySoft.Drawing.Imaging.IPalette.BackColor"/>,
            <see cref="P:KGySoft.Drawing.Imaging.IPalette.AlphaThreshold"/> and <see cref="P:KGySoft.Drawing.Imaging.IPalette.WorkingColorSpace"/> from the <see cref="T:KGySoft.Drawing.Imaging.IPalette"/> argument
            as this delegate can be re-used in another <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance when calling the <see cref="M:KGySoft.Drawing.Imaging.Palette.#ctor(KGySoft.Drawing.Imaging.Palette,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> constructor.
            If <see langword="null"/>, then <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see> and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods will
            perform a sequential lookup by using a default logic and results will be cached. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entries"/> must not be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="entries"/> must not be empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.#ctor(System.Drawing.Color[],System.Drawing.Color,System.Byte,System.Func{KGySoft.Drawing.Imaging.Color32,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class for details.
            </summary>
            <param name="entries">The color entries to be stored by this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance. They will be converted to <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instances internally.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color, whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <paramref name="alphaThreshold"/>, and there is no exact match among the <paramref name="entries"/>,
            then the color to be found will be blended with this color before performing the lookup. The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored.</param>
            <param name="alphaThreshold">If there is at least one completely transparent color among <paramref name="entries"/>,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which lookup operations will return the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>)
            or the index of the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).</param>
            <param name="customGetNearestColorIndex">A delegate specifying an optional custom lookup logic to obtain an index from <paramref name="entries"/> by a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            If specified, it must be thread-safe and it is expected to be fast. The results returned by the specified delegate are not cached. If <see langword="null"/>,
            then <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see> and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods will perform a sequential lookup by using a default logic and results will be cached.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entries"/> must not be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="entries"/> must not be empty.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.Color},System.Drawing.Color,System.Byte,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IPalette,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class for details.
            </summary>
            <param name="entries">The color entries to be stored by this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance. They will be converted to <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instances internally.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color, whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <paramref name="alphaThreshold"/>, and there is no exact match among the <paramref name="entries"/>,
            then the color to be found will be blended with this color before performing the lookup. The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If there is at least one completely transparent color among <paramref name="entries"/>,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which lookup operations will return the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>)
            or the index of the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>). This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="customGetNearestColorIndex">A delegate specifying an optional custom lookup logic to obtain an index from <paramref name="entries"/> by a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            If specified, it must be thread-safe and it is expected to be fast. The results returned by the specified delegate are not cached. If <see langword="null"/>,
            then <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see> and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods will perform a sequential lookup by using a default logic and results will be cached.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entries"/> must not be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="entries"/> must not be empty.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.Color},KGySoft.Drawing.Imaging.WorkingColorSpace,System.Drawing.Color,System.Byte,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IPalette,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class for details.
            </summary>
            <param name="entries">The color entries to be stored by this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance. They will be converted to <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instances internally.</param>
            <param name="workingColorSpace">Specifies the desired color space to be used by the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods for blending and measuring color distance.
            If <paramref name="customGetNearestColorIndex"/> is set, then it depends on the custom lookup function whether it respects the value of this parameter.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color, whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <paramref name="alphaThreshold"/>, and there is no exact match among the <paramref name="entries"/>,
            then the color to be found will be blended with this color before performing the lookup. The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If there is at least one completely transparent color among <paramref name="entries"/>,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which lookup operations will return the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>)
            or the index of the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>). This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="customGetNearestColorIndex">A delegate specifying an optional custom lookup logic to obtain an index from <paramref name="entries"/> by a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            If specified, it must be thread-safe and it is expected to be fast. The results returned by the specified delegate are not cached. If <see langword="null"/>,
            then <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see> and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods will perform a sequential lookup by using a default logic and results will be cached.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entries"/> must not be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="entries"/> must not be empty.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.#ctor(KGySoft.Drawing.Imaging.Palette,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class from another <paramref name="palette"/> using
            new <paramref name="backColor"/> and <paramref name="alphaThreshold"/> values.
            </summary>
            <param name="palette">The original <see cref="T:KGySoft.Drawing.Imaging.Palette"/> to get the colors from.</param>
            <param name="backColor">The desired <see cref="P:KGySoft.Drawing.Imaging.Palette.BackColor"/> of the new <see cref="T:KGySoft.Drawing.Imaging.Palette"/>. The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored.</param>
            <param name="alphaThreshold">The desired <see cref="P:KGySoft.Drawing.Imaging.Palette.AlphaThreshold"/> of the new <see cref="T:KGySoft.Drawing.Imaging.Palette"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="palette"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.#ctor(KGySoft.Drawing.Imaging.Palette,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class from another <paramref name="palette"/> using
            new <paramref name="backColor"/> and <paramref name="alphaThreshold"/> values and color space preference.
            </summary>
            <param name="palette">The original <see cref="T:KGySoft.Drawing.Imaging.Palette"/> to get the colors from.</param>
            <param name="workingColorSpace">Specifies the desired color space to be used by the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods for blending and measuring color distance.
            If the original <paramref name="palette"/> uses a custom lookup function, then the value of this parameter might be ignored.</param>
            <param name="backColor">The desired <see cref="P:KGySoft.Drawing.Imaging.Palette.BackColor"/> of the new <see cref="T:KGySoft.Drawing.Imaging.Palette"/>. The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored.</param>
            <param name="alphaThreshold">The desired <see cref="P:KGySoft.Drawing.Imaging.Palette.AlphaThreshold"/> of the new <see cref="T:KGySoft.Drawing.Imaging.Palette"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="palette"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <remarks>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for details and
            image examples about using the different color spaces in various operations.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.SystemDefault8BppPalette(KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 8-bit palette.
            This palette contains the 16 standard <a href="https://www.w3.org/TR/REC-html40/types.html#h-6.5" target="_blank">basic sRGB colors</a>,
            the "web-safe" palette of 216 colors as well as 24 transparent entries.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">PredefinedColorsQuantizer.SystemDefault8BppPalette</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color, whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <paramref name="alphaThreshold"/>, and there is no exact match among the palette entries,
            then the color to be found will be blended with this color before performing the lookup. The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">Specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which lookup operations will return the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>)
            or the index of the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>). This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 8-bit palette.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.SystemDefault8BppPalette(KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 8-bit palette.
            This palette contains the 16 standard <a href="https://www.w3.org/TR/REC-html40/types.html#h-6.5" target="_blank">basic sRGB colors</a>,
            the "web-safe" palette of 216 colors as well as 24 transparent entries.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">PredefinedColorsQuantizer.SystemDefault8BppPalette</see> method for details and some examples.
            </summary>
            <param name="workingColorSpace">Specifies the desired color space to be used by the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods for blending and measuring color distance.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color, whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <paramref name="alphaThreshold"/>, and there is no exact match among the palette entries,
            then the color to be found will be blended with this color before performing the lookup. The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">Specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which lookup operations will return the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>)
            or the index of the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>). This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 8-bit palette.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.SystemDefault4BppPalette(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 4-bit palette.
            This palette consists of the 16 standard <a href="https://www.w3.org/TR/REC-html40/types.html#h-6.5" target="_blank">basic sRGB colors</a>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">PredefinedColorsQuantizer.SystemDefault4BppPalette</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 4-bit palette.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.SystemDefault4BppPalette(KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 4-bit palette.
            This palette consists of the 16 standard <a href="https://www.w3.org/TR/REC-html40/types.html#h-6.5" target="_blank">basic sRGB colors</a>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">PredefinedColorsQuantizer.SystemDefault4BppPalette</see> method for details and some examples.
            </summary>
            <param name="workingColorSpace">Specifies the desired color space to be used by the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods for blending and measuring color distance.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 4-bit palette.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.SystemDefault1BppPalette(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 1-bit palette.
            This palette consists of the black and white colors.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault1BppPalette(System.Drawing.Color)">PredefinedColorsQuantizer.SystemDefault1BppPalette</see> method for details.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 1-bit palette.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault1BppPalette(System.Drawing.Color)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.SystemDefault1BppPalette(KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 1-bit palette.
            This palette consists of the black and white colors.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault1BppPalette(System.Drawing.Color)">PredefinedColorsQuantizer.SystemDefault1BppPalette</see> method for details.
            </summary>
            <param name="workingColorSpace">Specifies the desired color space to be used by the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods for blending and measuring color distance.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 1-bit palette.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault1BppPalette(System.Drawing.Color)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.Rgb332(KGySoft.Drawing.Imaging.Color32,System.Boolean)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 8-bit palette where red, green and blue components are encoded in 3, 3 and 2 bits, respectively.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb332(System.Drawing.Color,System.Boolean)">PredefinedColorsQuantizer.Rgb332</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="directMapping"><see langword="true"/> to map any color directly to an index instead of searching for a nearest color,
            which is very fast but without dithering may end up in a noticeably poorer result and higher contrast;
            <see langword="false"/> to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 8-bit palette where red, green and blue components are encoded in 3, 3 and 2 bits, respectively.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb332(System.Drawing.Color,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.Rgb332(KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Boolean)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 8-bit palette where red, green and blue components are encoded in 3, 3 and 2 bits, respectively.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb332(System.Drawing.Color,System.Boolean)">PredefinedColorsQuantizer.Rgb332</see> method for details and some examples.
            </summary>
            <param name="workingColorSpace">Specifies the desired color space to be used by the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods for blending and measuring color distance.
            If <paramref name="directMapping"/> is <see langword="true"/>, then only affects blending with possibly partially transparent source colors.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="directMapping"><see langword="true"/> to map any color directly to an index instead of searching for a nearest color,
            which is very fast but without dithering may end up in a noticeably poorer result and higher contrast;
            <see langword="false"/> to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 8-bit palette where red, green and blue components are encoded in 3, 3 and 2 bits, respectively.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb332(System.Drawing.Color,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.Grayscale256(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 8-bit grayscale palette of 256 shades.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">PredefinedColorsQuantizer.Grayscale</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 8-bit grayscale palette of 256 shades.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.Grayscale256(KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 8-bit grayscale palette of 256 shades.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">PredefinedColorsQuantizer.Grayscale</see> method for details and some examples.
            </summary>
            <param name="workingColorSpace">Specifies the desired color space to be used by the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods for blending and measuring color distance.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 8-bit grayscale palette of 256 shades.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.Grayscale16(KGySoft.Drawing.Imaging.Color32,System.Boolean)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 4-bit grayscale palette of 16 shades.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale16(System.Drawing.Color,System.Boolean)">PredefinedColorsQuantizer.Grayscale16</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="directMapping"><see langword="true"/> to map any color directly to an index instead of searching for a nearest color,
            which is very fast but may end up in a result of a bit higher contrast than the original image;
            <see langword="false"/> to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 4-bit grayscale palette of 16 shades.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale16(System.Drawing.Color,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.Grayscale16(KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Boolean)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 4-bit grayscale palette of 16 shades.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale16(System.Drawing.Color,System.Boolean)">PredefinedColorsQuantizer.Grayscale16</see> method for details and some examples.
            </summary>
            <param name="workingColorSpace">Specifies the desired color space to be used by the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods for blending and measuring color distance.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="directMapping"><see langword="true"/> to map any color directly to an index instead of searching for a nearest color,
            which is very fast but may end up in a result of a bit higher contrast than the original image;
            <see langword="false"/> to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 4-bit grayscale palette of 16 shades.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale16(System.Drawing.Color,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.Grayscale4(KGySoft.Drawing.Imaging.Color32,System.Boolean)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a grayscale palette of 4 shades.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale4(System.Drawing.Color,System.Boolean)">PredefinedColorsQuantizer.Grayscale4</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="directMapping"><see langword="true"/> to map any color directly to an index instead of searching for a nearest color,
            which is very fast but may end up in a result of a bit higher contrast than the original image;
            <see langword="false"/> to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a grayscale palette of 4 shades.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale4(System.Drawing.Color,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.Grayscale4(KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Boolean)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a grayscale palette of 4 shades.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale4(System.Drawing.Color,System.Boolean)">PredefinedColorsQuantizer.Grayscale4</see> method for details and some examples.
            </summary>
            <param name="workingColorSpace">Specifies the desired color space to be used by the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods for blending and measuring color distance.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="directMapping"><see langword="true"/> to map any color directly to an index instead of searching for a nearest color,
            which is very fast but may end up in a result of a bit higher contrast than the original image;
            <see langword="false"/> to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a grayscale palette of 4 shades.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale4(System.Drawing.Color,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.BlackAndWhite(KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the black and white colors.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">PredefinedColorsQuantizer.BlackAndWhite</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="whiteThreshold">Specifies a threshold value for the brightness of the colors, under which the result of a color lookup is considered black.
            If 0, then all colors are mapped to white. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the black and white colors.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.BlackAndWhite(KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the black and white colors.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">PredefinedColorsQuantizer.BlackAndWhite</see> method for details and some examples.
            </summary>
            <param name="workingColorSpace">Specifies the desired color space to be used by the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods for blending and measuring color distance.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="whiteThreshold">Specifies a threshold value for the brightness of the colors, under which the result of a color lookup is considered black.
            If 0, then all colors are mapped to white. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the black and white colors.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.GetColor(System.Int32)">
            <summary>
            Gets the color entry of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index of the color entry to be retrieved.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance representing the color entry of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> at the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> must be equal to or greater than zero and less <see cref="P:KGySoft.Drawing.Imaging.Palette.Count"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets the index of a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> entry that is the nearest color to the specified <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <param name="c">The color for which the nearest palette entry index should be returned.</param>
            <returns>The index of a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> entry that is the nearest color to the specified <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</returns>
            <remarks>
            <para>If the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> does not contain the specified color, then the result may depend on the arguments passed to the constructor.</para>
            <para>If <paramref name="c"/> has transparency, then the result may depend on <see cref="P:KGySoft.Drawing.Imaging.Palette.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.Palette.AlphaThreshold"/> values.</para>
            <para>The result can be customized by passing a non-<see langword="null"/> delegate to one of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> constructors.</para>
            <note>For more details see the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> entry of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> that is the nearest color to the specified <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <param name="c">The color for which the nearest palette entry should be returned.</param>
            <returns>The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> entry of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> that is the nearest color to the specified <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</returns>
            <remarks>
            <para>If the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> does not contain the specified color, then the result may depend on the arguments passed to the constructor.</para>
            <para>If <paramref name="c"/> has transparency, then the result may depend on <see cref="P:KGySoft.Drawing.Imaging.Palette.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.Palette.AlphaThreshold"/> values.</para>
            <para>The result can be customized by passing a non-<see langword="null"/> delegate to one of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> constructors.</para>
            <note>For more details see the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class.</note>
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">The <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class was initialized by a custom lookup delegate, which returned an invalid index.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.GetEntries">
            <summary>
            Gets a read-only wrapper of the entries of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance.
            </summary>
            <returns>The entries of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/>.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.BitmapDataFactory">
            <summary>
            Provides factory methods to create <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instances.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with the specified <paramref name="size"/> and <paramref name="pixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            </summary>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="pixelFormat">The desired pixel format of the bitmap data to create. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/>.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section for details. The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with the specified <paramref name="size"/> and <paramref name="pixelFormat"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with the specified <paramref name="size"/> and <paramref name="pixelFormat"/>.
            </summary>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="pixelFormat">The desired pixel format of the bitmap data to create.</param>
            <param name="workingColorSpace">Specifies the preferred color space that should be used when working with the result bitmap data.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for more details.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section for details. The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with the specified <paramref name="size"/> and <paramref name="pixelFormat"/>.</returns>
            <remarks>
            <para>This method supports predefined pixel formats. To create a bitmap data with some custom pixel format use the overloads that have <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> parameters.</para>
            <para>The <paramref name="backColor"/> parameter has no effect if <paramref name="pixelFormat"/> has alpha gradient support and it does not affect the actual content of the returned instance.
            To set all pixels to a color use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">Clear</see> extension method.</para>
            <para>If <paramref name="alphaThreshold"/> is zero, then setting a fully transparent pixel in a bitmap data with indexed or single-bit-alpha pixel format
            will blend the pixel to set with <paramref name="backColor"/> even if the bitmap data can handle transparent pixels.</para>
            <para>If <paramref name="alphaThreshold"/> is <c>1</c>, then the result color of setting a pixel of a bitmap data with indexed or single-bit-alpha pixel format
            will be transparent only if the color to set is completely transparent (has zero alpha).</para>
            <para>If <paramref name="alphaThreshold"/> is <c>255</c>, then the result color of setting a pixel of a bitmap data with indexed or single-bit-alpha pixel format
            will be opaque only if the color to set is completely opaque (its alpha value is <c>255</c>).</para>
            <para>For <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s without any alpha support the specified <paramref name="alphaThreshold"/> is used only to determine the source pixels to skip
            when another bitmap data is drawn into the returned instance.</para>
            <para>If a pixel of a bitmap data without alpha gradient support is set by the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">IWritableBitmapData.SetPixel</see>/<see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)">IWritableBitmapDataRow.SetColor</see>
            methods or by the <see cref="P:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow.Item(System.Int32)">IReadWriteBitmapDataRow indexer</see>, and the pixel has an alpha value that is greater than <paramref name="alphaThreshold"/>,
            then the pixel to set will be blended with <paramref name="backColor"/>.</para>
            <para>The <paramref name="workingColorSpace"/> parameter indicates the preferred color space when working with the result bitmap data.
            Blending operations performed by this library (eg. by <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">IWritableBitmapData.SetPixel</see> when blending is necessary as described above,
            or by the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto">DrawInto</see> extension methods) respect the value of this parameter.
            Blending in the linear color space produces natural results but the operation is a bit slower if the actual
            pixel format is not in the linear color space, and the result is different from the results of most applications including popular image processors and web browsers.
            See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for more details.</para>
            <note type="tip">
            <list type="bullet">
            <item>If <paramref name="pixelFormat"/> represents an indexed format you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette)"/> overload to specify the desired palette of the result.</item>
            <item>To create an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance from a platform specific bitmap type such as <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Bitmap" target="_blank">Bitmap</a>
            or <a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.imaging.writeablebitmap" target="_blank">WriteableBitmap</a>, use the <c>GetReadWriteBitmapData</c> extension methods for various platform dependent
            bitmap implementations. See the <strong>Remarks</strong> section of the <see cref="N:KGySoft.Drawing"/> namespace for a list about the technologies with dedicated support,
            and the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">BitmapExtensions.GetReadWriteBitmapData</a>
            method for details and code samples. That method is for the GDI+ <a href="https://docs.microsoft.com/en-us/dotnet/api/system.drawing.bitmap" target="_blank">Bitmap</a> type but the main principles apply for all sources.</item>
            </list></note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats
            <br/>-or-
            <br/><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with the specified <paramref name="size"/>, <paramref name="pixelFormat"/> and <paramref name="palette"/>.
            </summary>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="pixelFormat">The desired pixel format of the bitmap data to create.</param>
            <param name="palette">If <paramref name="pixelFormat"/> represents an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with the specified <paramref name="size"/>, <paramref name="pixelFormat"/> and <paramref name="palette"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="palette"/> is too large for the specified <paramref name="pixelFormat"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance for a preallocated one dimensional array with the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">A preallocated array to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            It can be larger than it is required for the specified parameters.
            If the actual image data starts at some offset use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.ArraySection{``0},System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)"/> overload instead.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/>.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats
            <br/>-or-
            <br/><paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormat"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is too small for the specified <paramref name="size"/>, <paramref name="pixelFormat"/> and <paramref name="stride"/>
            <br/>-or-
            <br/><paramref name="stride"/> is not a multiple of the size of <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance for a preallocated one dimensional array with the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">A preallocated array to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            It can be larger than it is required for the specified parameters.
            If the actual image data starts at some offset use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.ArraySection{``0},System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)"/> overload instead.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create.</param>
            <param name="workingColorSpace">Specifies the preferred color space that should be used when working with the result bitmap data.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for more details.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats
            <br/>-or-
            <br/><paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormat"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is too small for the specified <paramref name="size"/>, <paramref name="pixelFormat"/> and <paramref name="stride"/>
            <br/>-or-
            <br/><paramref name="stride"/> is not a multiple of the size of <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance for a preallocated one dimensional array with the specified parameters.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">A preallocated array to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            It can be larger than it is required for the specified parameters.
            If the actual image data starts at some offset use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.ArraySection{``0},System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)"/> overload instead.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create.</param>
            <param name="palette">If <paramref name="pixelFormat"/> represents an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.</param>
            <param name="trySetPaletteCallback">A delegate to be called when the palette is attempted to be replaced by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">TrySetPalette</see> method.
            If <paramref name="buffer"/> belongs to some custom bitmap implementation, it can be used to update its original palette. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats
            <br/>-or-
            <br/><paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormat"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is too small for the specified <paramref name="size"/>, <paramref name="pixelFormat"/> and <paramref name="stride"/>
            <br/>-or-
            <br/><paramref name="stride"/> is not a multiple of the size of <typeparamref name="T"/>
            <br/>-or-
            <br/><paramref name="palette"/> is too large for the specified <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom non-indexed pixel format for a preallocated one dimensional array with the specified parameters.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">A preallocated array to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            It can be larger than it is required for the specified parameters.
            If the actual image data starts at some offset use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.ArraySection{``0},System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)"/> overload instead.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColor">A delegate that can get the color of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColor">A delegate that can set the color of a pixel in a row of the bitmap data.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <remarks>
            <para>This method allows creating an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with custom pixel format. You need to specify a <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/>
            and a pair of delegates that are called whenever a pixel is get or set.</para>
            <para>A custom pixel format can have any <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> value between 1 and 128. A typical bits-per-pixel value is a power of two; however,
            any other value can be used if you handle them in the provided delegates.</para>
            <para>The <paramref name="rowGetColor"/> and <paramref name="rowSetColor"/> delegates are called whenever a pixel is needed to be get or set.
            The delegates are always called with an <c>x</c> coordinate meaning the pixel offset in the corresponding row.
            <note type="implement">The delegates must not use the <paramref name="buffer"/> directly.
            They must access the actual data using their <see cref="T:KGySoft.Drawing.Imaging.ICustomBitmapDataRow"/> argument, which allows reading and writing raw data within the corresponding row.</note></para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/>, <paramref name="rowGetColor"/> or <paramref name="rowSetColor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormatInfo"/>.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is too small for the specified <paramref name="size"/>, <paramref name="pixelFormatInfo"/> and <paramref name="stride"/>
            <br/>-or-
            <br/><paramref name="stride"/> is not a multiple of the size of <typeparamref name="T"/>
            <br/>-or-
            <br/><paramref name="pixelFormatInfo"/> is indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is 0.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom non-indexed pixel format for a preallocated one dimensional array with the specified parameters.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">A preallocated array to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            It can be larger than it is required for the specified parameters.
            If the actual image data starts at some offset use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.ArraySection{``0},System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)"/> overload instead.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColor">A delegate that can get the color of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColor">A delegate that can set the color of a pixel in a row of the bitmap data.</param>
            <param name="workingColorSpace">Specifies the preferred color space that should be used when working with the result bitmap data.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for more details.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <remarks>
            <para>This method allows creating an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with custom pixel format. You need to specify a <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/>
            and a pair of delegates that are called whenever a pixel is get or set.</para>
            <para>A custom pixel format can have any <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> value between 1 and 128. A typical bits-per-pixel value is a power of two; however,
            any other value can be used if you handle them in the provided delegates.</para>
            <para>The <paramref name="rowGetColor"/> and <paramref name="rowSetColor"/> delegates are called whenever a pixel is needed to be get or set.
            The delegates are always called with an <c>x</c> coordinate meaning the pixel offset in the corresponding row.
            <note type="implement">The delegates must not use the <paramref name="buffer"/> directly.
            They must access the actual data using their <see cref="T:KGySoft.Drawing.Imaging.ICustomBitmapDataRow"/> argument, which allows reading and writing raw data within the corresponding row.</note></para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/>, <paramref name="rowGetColor"/> or <paramref name="rowSetColor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormatInfo"/>.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is too small for the specified <paramref name="size"/>, <paramref name="pixelFormatInfo"/> and <paramref name="stride"/>
            <br/>-or-
            <br/><paramref name="stride"/> is not a multiple of the size of <typeparamref name="T"/>
            <br/>-or-
            <br/><paramref name="pixelFormatInfo"/> is indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is 0.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom indexed pixel format for a preallocated one dimensional array with the specified parameters.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">A preallocated array to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            It can be larger than it is required for the specified parameters.
            If the actual image data starts at some offset use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.ArraySection{``0},System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)"/> overload instead.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColorIndex">A delegate that can get the color index of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColorIndex">A delegate that can set the color index of a pixel in a row of the bitmap data.</param>
            <param name="palette">Specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="trySetPaletteCallback">A delegate to be called when the palette is attempted to be replaced by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">TrySetPalette</see> method.
            If <paramref name="buffer"/> belongs to some custom bitmap implementation, it can be used to update its original palette. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <remarks>
            <para>This method allows creating an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom indexed pixel format. You need to specify a <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/>
            and a pair of delegates that are called whenever a pixel is get or set.</para>
            <para>An indexed custom pixel format can have any <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> value between 1 and 16. A typical bits-per-pixel value is a power of two and is not greater than 8;
            however, any other value can be used if you handle them in the provided delegates.</para>
            <para>The <paramref name="rowGetColorIndex"/> and <paramref name="rowSetColorIndex"/> delegates are called whenever a pixel is needed to be get or set.
            The delegates are always called with an <c>x</c> coordinate meaning the pixel offset in the corresponding row.
            <note type="implement">The delegates must not use the <paramref name="buffer"/> directly.
            They must access the actual data using their <see cref="T:KGySoft.Drawing.Imaging.ICustomBitmapDataRow"/> argument, which allows reading and writing raw data within the corresponding row.</note></para>
            <para>If <paramref name="palette"/> is <see langword="null"/>, then the closest not larger system palette will be used, possibly completed with transparent entries.
            For example, if <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel">PixelFormatInfo.BitsPerPixel</see> is 9 and <paramref name="palette"/> is <see langword="null"/>, then
            a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> with 512 colors will be created where the first 256 colors will be the same as in <see cref="M:KGySoft.Drawing.Imaging.Palette.SystemDefault8BppPalette(KGySoft.Drawing.Imaging.Color32,System.Byte)">SystemDefault8BppPalette</see>.
            <note>For that reason it is always recommended to set the <paramref name="palette"/> parameter, especially if it has fewer entries than the possible allowed maximum
            because replacing the palette afterwards by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">TrySetPalette</see> extension method allows only to set a palette that has no
            fewer entries. It's because the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">TrySetPalette</see> method assumes that the underlying buffer might already have pixels whose
            indices may turn invalid with a smaller palette.</note></para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/>, <paramref name="rowGetColorIndex"/> or <paramref name="rowSetColorIndex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormatInfo"/>
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is too small for the specified <paramref name="size"/>, <paramref name="pixelFormatInfo"/> and <paramref name="stride"/>
            <br/>-or-
            <br/><paramref name="stride"/> is not a multiple of the size of <typeparamref name="T"/>
            <br/>-or-
            <br/><paramref name="palette"/> is too large for the specified <paramref name="pixelFormatInfo"/>
            <br/>-or-
            <br/><paramref name="pixelFormatInfo"/> is not indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is not between 1 and 16.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.ArraySection{``0},System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Collections_ArraySection_1.htm">ArraySection&lt;T></a> to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            It can be larger than it is required for the specified parameters.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/>.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <a href="https://docs.kgysoft.net/corelibraries/html/F_KGySoft_Collections_ArraySection_1_Null.htm">Null</a>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats
            <br/>-or-
            <br/><paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormat"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is too small for the specified <paramref name="size"/>, <paramref name="pixelFormat"/> and <paramref name="stride"/>
            <br/>-or-
            <br/><paramref name="stride"/> is not a multiple of the size of <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.ArraySection{``0},System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Collections_ArraySection_1.htm">ArraySection&lt;T></a> to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            It can be larger than it is required for the specified parameters.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create.</param>
            <param name="workingColorSpace">Specifies the preferred color space that should be used when working with the result bitmap data.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for more details.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <a href="https://docs.kgysoft.net/corelibraries/html/F_KGySoft_Collections_ArraySection_1_Null.htm">Null</a>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats
            <br/>-or-
            <br/><paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormat"/>
            <br/>-or-
            <br/><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is too small for the specified <paramref name="size"/>, <paramref name="pixelFormat"/> and <paramref name="stride"/>
            <br/>-or-
            <br/><paramref name="stride"/> is not a multiple of the size of <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.ArraySection{``0},System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the specified parameters.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Collections_ArraySection_1.htm">ArraySection&lt;T></a> to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            It can be larger than it is required for the specified parameters.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create.</param>
            <param name="palette">If <paramref name="pixelFormat"/> represents an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.</param>
            <param name="trySetPaletteCallback">A delegate to be called when the palette is attempted to be replaced by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">TrySetPalette</see> method.
            If <paramref name="buffer"/> belongs to some custom bitmap implementation, it can be used to update its original palette. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <a href="https://docs.kgysoft.net/corelibraries/html/F_KGySoft_Collections_ArraySection_1_Null.htm">Null</a>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats
            <br/>-or-
            <br/><paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormat"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is too small for the specified <paramref name="size"/>, <paramref name="pixelFormat"/> and <paramref name="stride"/>
            <br/>-or-
            <br/><paramref name="stride"/> is not a multiple of the size of <typeparamref name="T"/>
            <br/>-or-
            <br/><paramref name="palette"/> is too large for the specified <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.ArraySection{``0},System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom non-indexed pixel format wrapping the specified <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Collections_ArraySection_1.htm">ArraySection&lt;T></a> to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            It can be larger than it is required for the specified parameters.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColor">A delegate that can get the color of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColor">A delegate that can set the color of a pixel in a row of the bitmap data.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <a href="https://docs.kgysoft.net/corelibraries/html/F_KGySoft_Collections_ArraySection_1_Null.htm">Null</a>
            <br/>-or-
            <br/><paramref name="rowGetColor"/> or <paramref name="rowSetColor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormatInfo"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is too small for the specified <paramref name="size"/>, <paramref name="pixelFormatInfo"/> and <paramref name="stride"/>
            <br/>-or-
            <br/><paramref name="stride"/> is not a multiple of the size of <typeparamref name="T"/>
            <br/>-or-
            <br/><paramref name="pixelFormatInfo"/> is indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is 0.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.ArraySection{``0},System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom non-indexed pixel format wrapping the specified <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Collections_ArraySection_1.htm">ArraySection&lt;T></a> to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            It can be larger than it is required for the specified parameters.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColor">A delegate that can get the color of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColor">A delegate that can set the color of a pixel in a row of the bitmap data.</param>
            <param name="workingColorSpace">Specifies the preferred color space that should be used when working with the result bitmap data.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for more details.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <a href="https://docs.kgysoft.net/corelibraries/html/F_KGySoft_Collections_ArraySection_1_Null.htm">Null</a>
            <br/>-or-
            <br/><paramref name="rowGetColor"/> or <paramref name="rowSetColor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormatInfo"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is too small for the specified <paramref name="size"/>, <paramref name="pixelFormatInfo"/> and <paramref name="stride"/>
            <br/>-or-
            <br/><paramref name="stride"/> is not a multiple of the size of <typeparamref name="T"/>
            <br/>-or-
            <br/><paramref name="pixelFormatInfo"/> is indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is 0
            <br/>-or-
            <br/><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.ArraySection{``0},System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom indexed pixel format wrapping the specified <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Collections_ArraySection_1.htm">ArraySection&lt;T></a> to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            It can be larger than it is required for the specified parameters.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColorIndex">A delegate that can get the color index of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColorIndex">A delegate that can set the color index of a pixel in a row of the bitmap data.</param>
            <param name="palette">Specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="trySetPaletteCallback">A delegate to be called when the palette is attempted to be replaced by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">TrySetPalette</see> method.
            If <paramref name="buffer"/> belongs to some custom bitmap implementation, it can be used to update its original palette. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <a href="https://docs.kgysoft.net/corelibraries/html/F_KGySoft_Collections_ArraySection_1_Null.htm">Null</a>
            <br/>-or-
            <br/><paramref name="rowGetColorIndex"/> or <paramref name="rowSetColorIndex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormatInfo"/>
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is too small for the specified <paramref name="size"/>, <paramref name="pixelFormatInfo"/> and <paramref name="stride"/>
            <br/>-or-
            <br/><paramref name="stride"/> is not a multiple of the size of <typeparamref name="T"/>
            <br/>-or-
            <br/><paramref name="palette"/> is too large for the specified <paramref name="pixelFormatInfo"/>
            <br/>-or-
            <br/><paramref name="pixelFormatInfo"/> is not indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is not between 1 and 16.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[0:,0:],System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance for a preallocated two dimensional array with the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">A preallocated array to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</param>
            <param name="pixelWidth">The width of the bitmap data to create in pixels.</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/>.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelWidth"/> is too large for the specified <paramref name="buffer"/> and <paramref name="pixelFormat"/>
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is empty.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[0:,0:],System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance for a preallocated two dimensional array with the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">A preallocated array to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</param>
            <param name="pixelWidth">The width of the bitmap data to create in pixels.</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create.</param>
            <param name="workingColorSpace">Specifies the preferred color space that should be used when working with the result bitmap data.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for more details.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelWidth"/> is too large for the specified <paramref name="buffer"/> and <paramref name="pixelFormat"/>
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats
            <br/>-or-
            <br/><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is empty.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[0:,0:],System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance for a preallocated two dimensional array with the specified parameters.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">A preallocated array to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</param>
            <param name="pixelWidth">The width of the bitmap data to create in pixels.</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create.</param>
            <param name="palette">If <paramref name="pixelFormat"/> represents an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.</param>
            <param name="trySetPaletteCallback">A delegate to be called when the palette is attempted to be replaced by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">TrySetPalette</see> method.
            If <paramref name="buffer"/> belongs to some custom bitmap implementation, it can be used to update its original palette. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns> 
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelWidth"/> is too large for the specified <paramref name="buffer"/> and <paramref name="pixelFormat"/>
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is empty
            <br/>-or-
            <br/><paramref name="palette"/> is too large for the specified <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[0:,0:],System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom non-indexed pixel format for a preallocated two dimensional array with the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">A preallocated array to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</param>
            <param name="pixelWidth">The width of the bitmap data to create in pixels.</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColor">A delegate that can get the color of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColor">A delegate that can set the color of a pixel in a row of the bitmap data.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/>, <paramref name="rowGetColor"/> or <paramref name="rowSetColor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelWidth"/> is too large for the specified <paramref name="buffer"/> and <paramref name="pixelFormatInfo"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is empty
            <br/>-or-
            <br/><paramref name="pixelFormatInfo"/> is indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is 0.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[0:,0:],System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom non-indexed pixel format for a preallocated two dimensional array with the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">A preallocated array to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</param>
            <param name="pixelWidth">The width of the bitmap data to create in pixels.</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColor">A delegate that can get the color of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColor">A delegate that can set the color of a pixel in a row of the bitmap data.</param>
            <param name="workingColorSpace">Specifies the preferred color space that should be used when working with the result bitmap data.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for more details.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/>, <paramref name="rowGetColor"/> or <paramref name="rowSetColor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelWidth"/> is too large for the specified <paramref name="buffer"/> and <paramref name="pixelFormatInfo"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is empty
            <br/>-or-
            <br/><paramref name="pixelFormatInfo"/> is indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is 0
            <br/>-or-
            <br/><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[0:,0:],System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom indexed pixel format for a preallocated two dimensional array with the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">A preallocated array to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</param>
            <param name="pixelWidth">The width of the bitmap data to create in pixels.</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColorIndex">A delegate that can get the color index of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColorIndex">A delegate that can set the color index of a pixel in a row of the bitmap data.</param>
            <param name="palette">Specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="trySetPaletteCallback">A delegate to be called when the palette is attempted to be replaced by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">TrySetPalette</see> method.
            If <paramref name="buffer"/> belongs to some custom bitmap implementation, it can be used to update its original palette. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/>, <paramref name="rowGetColorIndex"/> or <paramref name="rowSetColorIndex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelWidth"/> is too large for the specified <paramref name="buffer"/> and <paramref name="pixelFormatInfo"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is empty
            <br/>-or-
            <br/><paramref name="palette"/> is too large for the specified <paramref name="pixelFormatInfo"/>
            <br/>-or-
            <br/><paramref name="pixelFormatInfo"/> is not indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is not between 1 and 16.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.Array2D{``0},System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Collections_Array2D_1.htm">Array2D&lt;T></a> to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</param>
            <param name="pixelWidth">The width of the bitmap data to create in pixels.</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/>.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException">The <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Collections_Array2D_1_IsNull.htm">IsNull</a> property of <paramref name="buffer"/> is <see langword="true"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelWidth"/> is too large for the specified <paramref name="buffer"/> and <paramref name="pixelFormat"/>
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is empty.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.Array2D{``0},System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Collections_Array2D_1.htm">Array2D&lt;T></a> to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</param>
            <param name="pixelWidth">The width of the bitmap data to create in pixels.</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create.</param>
            <param name="workingColorSpace">Specifies the preferred color space that should be used when working with the result bitmap data.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for more details.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException">The <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Collections_Array2D_1_IsNull.htm">IsNull</a> property of <paramref name="buffer"/> is <see langword="true"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelWidth"/> is too large for the specified <paramref name="buffer"/> and <paramref name="pixelFormat"/>
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats
            <br/>-or-
            <br/><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is empty.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.Array2D{``0},System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the specified parameters.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Collections_Array2D_1.htm">Array2D&lt;T></a> to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</param>
            <param name="pixelWidth">The width of the bitmap data to create in pixels.</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create.</param>
            <param name="palette">If <paramref name="pixelFormat"/> represents an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.</param>
            <param name="trySetPaletteCallback">A delegate to be called when the palette is attempted to be replaced by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">TrySetPalette</see> method.
            If <paramref name="buffer"/> belongs to some custom bitmap implementation, it can be used to update its original palette. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns> 
            <exception cref="T:System.ArgumentNullException">The <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Collections_Array2D_1_IsNull.htm">IsNull</a> property of <paramref name="buffer"/> is <see langword="true"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelWidth"/> is too large for the specified <paramref name="buffer"/> and <paramref name="pixelFormat"/>
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is empty
            <br/>-or-
            <br/><paramref name="palette"/> is too large for the specified <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.Array2D{``0},System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom non-indexed pixel format wrapping the specified <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Collections_Array2D_1.htm">Array2D&lt;T></a> to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</param>
            <param name="pixelWidth">The width of the bitmap data to create in pixels.</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColor">A delegate that can get the color of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColor">A delegate that can set the color of a pixel in a row of the bitmap data.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException">The <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Collections_Array2D_1_IsNull.htm">IsNull</a> property of <paramref name="buffer"/> is <see langword="true"/>.
            <br/>-or-
            <br/><paramref name="rowGetColor"/> or <paramref name="rowSetColor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelWidth"/> is too large for the specified <paramref name="buffer"/> and <paramref name="pixelFormatInfo"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is empty
            <br/>-or-
            <br/><paramref name="pixelFormatInfo"/> is indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is 0.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.Array2D{``0},System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom non-indexed pixel format wrapping the specified <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Collections_Array2D_1.htm">Array2D&lt;T></a> to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</param>
            <param name="pixelWidth">The width of the bitmap data to create in pixels.</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColor">A delegate that can get the color of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColor">A delegate that can set the color of a pixel in a row of the bitmap data.</param>
            <param name="workingColorSpace">Specifies the preferred color space that should be used when working with the result bitmap data.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for more details.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException">The <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Collections_Array2D_1_IsNull.htm">IsNull</a> property of <paramref name="buffer"/> is <see langword="true"/>.
            <br/>-or-
            <br/><paramref name="rowGetColor"/> or <paramref name="rowSetColor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelWidth"/> is too large for the specified <paramref name="buffer"/> and <paramref name="pixelFormatInfo"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is empty
            <br/>-or-
            <br/><paramref name="pixelFormatInfo"/> is indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is 0
            <br/>-or-
            <br/><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(KGySoft.Collections.Array2D{``0},System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom indexed pixel format wrapping the specified <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)"/> overload for details.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="buffer"/>.</typeparam>
            <param name="buffer">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Collections_Array2D_1.htm">Array2D&lt;T></a> to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</param>
            <param name="pixelWidth">The width of the bitmap data to create in pixels.</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColorIndex">A delegate that can get the color index of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColorIndex">A delegate that can set the color index of a pixel in a row of the bitmap data.</param>
            <param name="palette">Specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="trySetPaletteCallback">A delegate to be called when the palette is attempted to be replaced by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">TrySetPalette</see> method.
            If <paramref name="buffer"/> belongs to some custom bitmap implementation, it can be used to update its original palette. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException">The <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Collections_Array2D_1_IsNull.htm">IsNull</a> property of <paramref name="buffer"/> is <see langword="true"/>.
            <br/>-or-
            <br/><paramref name="rowGetColorIndex"/> or <paramref name="rowSetColorIndex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelWidth"/> is too large for the specified <paramref name="buffer"/> and <paramref name="pixelFormatInfo"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is empty
            <br/>-or-
            <br/><paramref name="palette"/> is too large for the specified <paramref name="pixelFormatInfo"/>
            <br/>-or-
            <br/><paramref name="pixelFormatInfo"/> is not indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is not between 1 and 16.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.IntPtr,System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping an unmanaged <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            </summary>
            <param name="buffer">The memory address to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            Make sure there is enough allocated memory for the specified <paramref name="size"/>, <paramref name="stride"/> and <paramref name="pixelFormat"/>;
            otherwise, accessing pixels may corrupt memory or throw an <see cref="T:System.AccessViolationException"/>.
            If it points to managed memory make sure it is pinned until the returned bitmap data is disposed.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.
            It can be negative for bottom-up layout (ie. when <paramref name="buffer"/> points to the first pixel of the bottom row).</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see cref="F:System.IntPtr.Zero">IntPtr.Zero</see>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats
            <br/>-or-
            <br/>The absolute value of <paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.IntPtr,System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping an unmanaged <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            </summary>
            <param name="buffer">The memory address to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            Make sure there is enough allocated memory for the specified <paramref name="size"/>, <paramref name="stride"/> and <paramref name="pixelFormat"/>;
            otherwise, accessing pixels may corrupt memory or throw an <see cref="T:System.AccessViolationException"/>.
            If it points to managed memory make sure it is pinned until the returned bitmap data is disposed.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.
            It can be negative for bottom-up layout (ie. when <paramref name="buffer"/> points to the first pixel of the bottom row).</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create.</param>
            <param name="workingColorSpace">Specifies the preferred color space that should be used when working with the result bitmap data.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for more details.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see cref="F:System.IntPtr.Zero">IntPtr.Zero</see>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats
            <br/>-or-
            <br/>The absolute value of <paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormat"/>
            <br/>-or-
            <br/><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.IntPtr,System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping an unmanaged <paramref name="buffer"/> and using the specified parameters.
            </summary>
            <param name="buffer">The memory address to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            Make sure there is enough allocated memory for the specified <paramref name="size"/>, <paramref name="stride"/> and <paramref name="pixelFormat"/>;
            otherwise, accessing pixels may corrupt memory or throw an <see cref="T:System.AccessViolationException"/>.
            If it points to managed memory make sure it is pinned until the returned bitmap data is disposed.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.
            It can be negative for bottom-up layout (ie. when <paramref name="buffer"/> points to the first pixel of the bottom row).</param>
            <param name="pixelFormat">The pixel format in <paramref name="buffer"/> and the bitmap data to create.</param>
            <param name="palette">If <paramref name="pixelFormat"/> represents an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.</param>
            <param name="trySetPaletteCallback">A delegate to be called when the palette is attempted to be replaced by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">TrySetPalette</see> method.
            If <paramref name="buffer"/> belongs to some custom bitmap implementation, it can be used to update its original palette. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see cref="F:System.IntPtr.Zero">IntPtr.Zero</see>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/><paramref name="pixelFormat"/> is not one of the valid formats
            <br/>-or-
            <br/>The absolute value of <paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormat"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is too small for the specified <paramref name="size"/>, <paramref name="pixelFormat"/> and <paramref name="stride"/>
            <br/>-or-
            <br/>The absolute value of <paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormat"/>
            <br/>-or-
            <br/><paramref name="palette"/> is too large for the specified <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.IntPtr,System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow,System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow,System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom non-indexed pixel format wrapping an unmanaged <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)"/> overload for details.
            </summary>
            <param name="buffer">The memory address to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            Make sure there is enough allocated memory for the specified <paramref name="size"/>, <paramref name="stride"/> and <paramref name="pixelFormatInfo"/>;
            otherwise, accessing pixels may corrupt memory or throw an <see cref="T:System.AccessViolationException"/>.
            If it points to managed memory make sure it is pinned until the returned bitmap data is disposed.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.
            It can be negative for bottom-up layout (ie. when <paramref name="buffer"/> points to the first pixel of the bottom row).</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColor">A delegate that can get the color of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColor">A delegate that can set the color of a pixel in a row of the bitmap data.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see cref="F:System.IntPtr.Zero">IntPtr.Zero</see>
            <br/>-or-
            <br/><paramref name="rowGetColor"/> or <paramref name="rowSetColor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/>The absolute value of <paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormatInfo"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pixelFormatInfo"/> is indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is 0.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.IntPtr,System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow,System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow,System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom non-indexed pixel format wrapping an unmanaged <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.Color32,System.Byte,System.Action)"/> overload for details.
            </summary>
            <param name="buffer">The memory address to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            Make sure there is enough allocated memory for the specified <paramref name="size"/>, <paramref name="stride"/> and <paramref name="pixelFormatInfo"/>;
            otherwise, accessing pixels may corrupt memory or throw an <see cref="T:System.AccessViolationException"/>.
            If it points to managed memory make sure it is pinned until the returned bitmap data is disposed.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.
            It can be negative for bottom-up layout (ie. when <paramref name="buffer"/> points to the first pixel of the bottom row).</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColor">A delegate that can get the color of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColor">A delegate that can set the color of a pixel in a row of the bitmap data.</param>
            <param name="workingColorSpace">Specifies the preferred color space that should be used when working with the result bitmap data.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for more details.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see cref="F:System.IntPtr.Zero">IntPtr.Zero</see>
            <br/>-or-
            <br/><paramref name="rowGetColor"/> or <paramref name="rowSetColor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/>The absolute value of <paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormatInfo"/>
            <br/>-or-
            <br/><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pixelFormatInfo"/> is indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is 0.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.IntPtr,System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow,System.Int32,System.Int32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow,System.Int32,System.Int32},KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance with a custom non-indexed pixel format wrapping an unmanaged <paramref name="buffer"/> and using the specified parameters.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData``1(``0[],System.Drawing.Size,System.Int32,KGySoft.Drawing.Imaging.PixelFormatInfo,System.Func{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},System.Action{KGySoft.Drawing.Imaging.ICustomBitmapDataRow{``0},System.Int32,System.Int32},KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)"/> overload for details.
            </summary>
            <param name="buffer">The memory address to be used as the underlying buffer for the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            Make sure there is enough allocated memory for the specified <paramref name="size"/>, <paramref name="stride"/> and <paramref name="pixelFormatInfo"/>;
            otherwise, accessing pixels may corrupt memory or throw an <see cref="T:System.AccessViolationException"/>.
            If it points to managed memory make sure it is pinned until the returned bitmap data is disposed.</param>
            <param name="size">The size of the bitmap data to create in pixels.</param>
            <param name="stride">The size of a row in bytes. It allows to have some padding at the end of each row.
            It can be negative for bottom-up layout (ie. when <paramref name="buffer"/> points to the first pixel of the bottom row).</param>
            <param name="pixelFormatInfo">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that describes the pixel format.</param>
            <param name="rowGetColorIndex">A delegate that can get the color index of a pixel in a row of the bitmap data.</param>
            <param name="rowSetColorIndex">A delegate that can set the color index of a pixel in a row of the bitmap data.</param>
            <param name="palette">Specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="trySetPaletteCallback">A delegate to be called when the palette is attempted to be replaced by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">TrySetPalette</see> method.
            If <paramref name="buffer"/> belongs to some custom bitmap implementation, it can be used to update its original palette. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="disposeCallback">A delegate to be called when the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> is disposed or finalized. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance wrapping the specified <paramref name="buffer"/> and using the provided parameters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see cref="F:System.IntPtr.Zero">IntPtr.Zero</see>
            <br/>-or-
            <br/><paramref name="rowGetColorIndex"/> or <paramref name="rowSetColorIndex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> has a zero or negative width or height
            <br/>-or-
            <br/>The absolute value of <paramref name="stride"/> is too small for the specified width and <paramref name="pixelFormatInfo"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pixelFormatInfo"/> is not indexed or its <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> is not between 1 and 16.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.Load(System.IO.Stream)">
            <summary>
            Loads a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance from the specified <paramref name="stream"/> that was saved by
            the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Save(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream)">BitmapDataExtensions.Save</see> method.
            </summary>
            <param name="stream">The stream to load the bitmap data from.</param>
            <returns>A managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance loaded from the specified <paramref name="stream"/>.</returns>
            <remarks>
            <note>This method blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.BeginLoad(System.IO.Stream,KGySoft.Threading.AsyncConfig)">BeginLoad</see>
            or <see cref="!:LoadAsync">LoadAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.BeginLoad(System.IO.Stream,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to load a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance from the specified <paramref name="stream"/> asynchronously that was saved by
            the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Save(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream)">BitmapDataExtensions.Save</see> method.
            </summary>
            <param name="stream">The stream to load the bitmap data from.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:LoadAsync">LoadAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.EndLoad(System.IAsyncResult)">EndLoad</see> method.</para>
            <para>This method is not a blocking call, though the operation is not parallelized and the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is ignored.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.EndLoad(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.BeginLoad(System.IO.Stream,KGySoft.Threading.AsyncConfig)">BeginLoad</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:LoadAsync">LoadAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that is the result of the operation,
            or <see langword="null"/>, if the operation was canceled and the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_ThrowIfCanceled.htm">ThrowIfCanceled</a> property of the <c>asyncConfig</c> parameter was <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateManagedBitmapData``1(KGySoft.Collections.Array2D{``0},System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates a managed <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataInternal"/> for a preallocated 1D array (wrapped into an <see cref="T:KGySoft.Collections.Array2D`1"/> struct).
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateManagedBitmapData``1(``0[0:,0:],System.Int32,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates a managed <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataInternal"/> for a preallocated 2D array.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.BitmapDataWrapper">
            <summary>
            Provides a wrapper for custom <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> implementations that do not implement <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataInternal"/>.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.SolidBitmapData">
            <summary>
            Represents a read-only bitmap data of a single color.
            As a public instance should be exposed as an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.ManagedBitmapData1DArrayBase`1.Buffer">
            <summary>
            The pixel buffer where the underlying array is a single dimensional one.
            It is a field rather than a property so Dispose allows mutating it.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ManagedCustomBitmapData`1">
            <summary>
            Represents a managed bitmap data wrapper with custom pixel format for a 1D array (wrapped into an <see cref="T:KGySoft.Collections.Array2D`1"/>).
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ManagedCustomBitmapDataIndexed`1">
            <summary>
            Represents a managed bitmap data wrapper with custom indexed pixel format for a 1D array (wrapped into an <see cref="T:KGySoft.Collections.Array2D`1"/>).
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ManagedCustomBitmapData2D`1">
            <summary>
            Represents a managed bitmap data wrapper with custom pixel format for an actual 2D array.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer">
            <summary>
            Provides an <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation for error diffusion dithering.
            Use the static properties of this class to use predefined error diffusion filters or the <see cref="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.#ctor(System.Byte[0:,0:],System.Int32,System.Int32,System.Boolean,System.Nullable{System.Boolean})">constructor</see> to create a custom one.
            </summary>
            <remarks>
            <para>The <see cref="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.#ctor(System.Byte[0:,0:],System.Int32,System.Int32,System.Boolean,System.Nullable{System.Boolean})">constructor</see> can be used to create an error diffusion ditherer using a custom matrix.</para>
            <para>Use the static properties to obtain an instance with predefined parameters.</para>
            <para>The <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class uses an adaptive dithering technique, which disperses the quantization error of each pixels to the neighboring ones.
            Thereby the strength of the dithering is automatically adjusted by the algorithm itself, which provides good results also for palettes with uneven color distribution
            (which is not the case for <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer">ordered dithering</see>, for example).</para>
            <para>As the dithered result of a pixel depends on the already processed pixels, the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> does not support parallel processing, which makes
            it slower than most of the other dithering methods.</para>
            <para>The following table demonstrates the effect of the dithering:
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
            <tbody><tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilver.gif" alt="Color hues with system default 8 BPP palette and silver background"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see>, no dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFS.gif" alt="Color hues with system default 8 BPP palette, silver background and Floyd-Steinberg dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredS3.gif" alt="Color hues with system default 8 BPP palette, using silver background and Sierra 3 dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Sierra3">Sierra 3</see> dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredSA.gif" alt="Color hues with system default 8 BPP palette, using silver background and Stevenson-Arce dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.StevensonArce">Stevenson-Arce</see> dithering</para></div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
            <br/>Grayscale color shades</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/GrayShadesBW.gif" alt="Grayscale color shades with black and white palette"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see>, no dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredFS.gif" alt="Grayscale color shades with black and white palette, using Floyd-Steinberg dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredS3.gif" alt="Grayscale color shades with black and white palette using Sierra 3 dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Sierra3">Sierra 3</see> dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredSA.gif" alt="Grayscale color shades with black and white palette using Stevenson-Arce dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.StevensonArce">Stevenson-Arce</see> dithering</para></div></td>
            </tr>
            </tbody></table></para>
            <para>Calculation of the quantization error may happen in two ways. The publicly available algorithms usually calculate the error for each color channels,
            which usually provides good results with color palettes. However, when quantizing color images with a black and white or grayscale palette,
            this approach may fail. For example, if the quantizer returns black for a fully saturated blue pixel, the quantization error is zero on the red and green channels and
            100% on the blue channel. The problem is that this error cannot be propagated to the neighboring pixels if they have the same color because adding any more blue
            to already fully saturated blue pixels will not change anything. Therefore, the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> can propagate quantization error
            by brightness based on human perception, which is more appropriate for palettes with grayscale colors.
            The <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> tries to auto detect the strategy for each dithering session but this can be overridden by
            the <see cref="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.ConfigureErrorDiffusionMode(System.Nullable{System.Boolean})">ConfigureErrorDiffusionMode</see> method.</para>
            <para>The following table demonstrates the effect of different strategies:
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
            <tbody><tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFS.gif" alt="Color hues with system default 8 BPP palette, silver background and Floyd-Steinberg dithering, using error diffusion by RGB channels"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using error diffusion by RGB channels (the default strategy for non-grayscale palettes)</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFSByBr.gif" alt="Color hues with system default 8 BPP palette, silver background and Floyd-Steinberg dithering, using error diffusion by brightness"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using error diffusion by brightness</para></div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/ColorWheel.png" alt="Color wheel"/>
            <br/>Color wheel</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/ColorWheelBWBlueDitheredFSByBr.gif" alt="Color wheel with black and white palette, blue background and Floyd-Steinberg dithering, using error diffusion by brightness (the default strategy for grayscale palettes)"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using blue background and error diffusion by brightness (the default strategy for grayscale palettes). All colors appear in the result with different patterns.</para>
            <para><img src="../Help/Images/ColorWheelBWBlueDitheredFSByRgb.gif" alt="Color wheel with black and white palette, blue background and Floyd-Steinberg dithering, using error diffusion by RGB channels"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using blue background and error diffusion by RGB channels. The fully saturated colors turned completely black or white.</para></div></td>
            </tr>
            </tbody></table></para>
            <para>A typical artifact of error diffusion dithering is a ripple effect, which often appears in homogeneous areas of the dithered image. This is due to the fact that most filters propagate quantization errors mostly to right and down,
            whereas pixels are processed left-to-right in each line while lines are scanned top-down (raster processing). The ripple effect can be reduced if every second line is processed in the opposite direction (serpentine processing).
            You can use the <see cref="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.ConfigureProcessingDirection(System.Boolean)">ConfigureProcessingDirection</see> method to obtain an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> with serpentine processing mode,
            which processes even lines left-to-right and odd lines right-to-left.</para>
            <para>The following table demonstrates the effect of different processing directions:
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
            <tbody><tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/Cameraman.png" alt="Test image &quot;Cameraman&quot;"/>
            <br/>Original test image "Cameraman"</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/CameramanBWDitheredFS.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, using Floyd-Steinberg dithering with raster processing"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using raster processing. The ripple effect is clearly visible on the coat.</para>
            <para><img src="../Help/Images/CameramanBWDitheredFSSerpentine.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, using Floyd-Steinberg dithering with serpentine processing"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using serpentine processing. The ripple effect is gone.</para></div></td>
            </tr>
            </tbody></table></para>
            <note type="tip">See the <strong>Examples</strong> section of the static properties for more examples.</note>
            </remarks>
            <seealso cref="T:KGySoft.Drawing.Imaging.IDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Dither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the original filter proposed by Floyd and Steinberg in 1975 when they came out with the idea of error diffusion dithering.
             Uses a small, 3x2 matrix so the processing is somewhat faster than by the other alternatives.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredFloydSteinberg(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.FloydSteinberg;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody><tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFS.gif" alt="Color hues with system default 8 BPP palette, using silver background and Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredFS.gif" alt="Grayscale color shades with black and white palette using Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldDefault8bppSilverA1DitheredFS.gif" alt="Shield icon with system default 8 BPP palette using silver background, alpha threshold = 1 and Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para>
             <para><img src="../Help/Images/ShieldBWSilverDitheredFS.gif" alt="Shield icon with black and white palette, silver background, using Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Cameraman.png" alt="Test image &quot;Cameraman&quot;"/>
             <br/>Original test image "Cameraman"</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/Cameraman2bppDirectDitheredFS.gif" alt="Test image &quot;Cameraman&quot; with 2 BPP grayscale palette using Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale4(System.Drawing.Color,System.Boolean)">grayscale 4 color palette</see></para>
             <para><img src="../Help/Images/CameramanBWDitheredFS.gif" alt="Test image &quot;Cameraman&quot; with black and white palette using Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Lena.png" alt="Test image &quot;Lena&quot;"/>
             <br/>Original test image "Lena"</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/LenaRgb332DMFloydSteinberg.gif" alt="Test image &quot;Lena&quot; with RGB332 palette using direct color mapping and Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb332(System.Drawing.Color,System.Boolean)">RGB 332 palette</see></para>
             <para><img src="../Help/Images/LenaRgb111DitheredFS.gif" alt="Test image &quot;Lena&quot; with RGB111 palette and Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)">custom 8-color palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.JarvisJudiceNinke">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the filter proposed by Jarvis, Judice and Ninke in 1976.
             Uses a 5x3 matrix so the processing is slower than by the original <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> filter but distributes errors in a wider range.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredJarvisJudiceNinke(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.JarvisJudiceNinke;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredJJN.gif" alt="Color hues with system default 8 BPP palette, using silver background and Jarvis-Judice-Ninke dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredJJN.gif" alt="Grayscale color shades with black and white palette using Jarvis-Judice-Ninke dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Stucki">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the filter proposed by P. Stucki in 1981.
             Uses a 5x3 matrix so the processing is slower than by the original <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> filter but distributes errors in a wider range.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredStucki(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.Stucki;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredSt.gif" alt="Color hues with system default 8 BPP palette, using silver background and Stucki dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredSt.gif" alt="Grayscale color shades with black and white palette using Stucki dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Burkes">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the filter proposed by D. Burkes in 1988.
             Uses a 5x2 matrix, which is actually the same as the first two lines of the matrix used by the <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Stucki"/> filter.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredBurkes(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.Burkes;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredBrk.gif" alt="Color hues with system default 8 BPP palette, using silver background and Burkes dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredBrk.gif" alt="Grayscale color shades with black and white palette using Burkes dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Sierra3">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the three-line filter proposed by Frankie Sierra in 1989.
             Uses a 5x3 matrix so this is the slowest Sierra filter but this disperses errors to the furthest among them.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredSierra3(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.Sierra3;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredS3.gif" alt="Color hues with system default 8 BPP palette, using silver background and Sierra 3 dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredS3.gif" alt="Grayscale color shades with black and white palette using Sierra 3 dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Sierra2">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the two-line filter proposed by Frankie Sierra in 1990.
             Uses a 5x2 matrix so this somewhat faster than the <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Sierra3">three-line version</see> and still provides a similar quality.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredSierra2(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.Sierra2;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredS2.gif" alt="Color hues with system default 8 BPP palette, using silver background and Sierra 2 dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredS2.gif" alt="Grayscale color shades with black and white palette using Sierra 2 dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.SierraLite">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using a small two-line filter proposed by Frankie Sierra.
             Uses a 3x2 matrix so it has the same performance as the <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> algorithm and also produces a quite similar result.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredSierraLite(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.SierraLite;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredSL.gif" alt="Color hues with system default 8 BPP palette, using silver background and Sierra Lite dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredSL.gif" alt="Grayscale color shades with black and white palette using Sierra Lite dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.StevensonArce">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the hexagonal filter proposed by Stevenson and Arce in 1985.
             Uses a fairly large, 7x4 matrix, but due to the hexagonal arrangement of the coefficients the processing performance is comparable to a rectangular 5x3 matrix.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredStevensonArce(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.StevensonArce;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredSA.gif" alt="Color hues with system default 8 BPP palette, using silver background and Stevenson-Arce dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredSA.gif" alt="Grayscale color shades with black and white palette using Stevenson-Arce dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Atkinson">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the filter used by the Apple programmer Bill Atkinson.
             Uses a 4x3 matrix of only 6 effective values, and propagates only the 75% of the quantization error, which may cause
             total loss of details of light and dark areas (result may seem under- or overexposed) whereas midtones have higher contrast
             and preserve details better.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredAtkinson(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.Atkinson;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredAtk.gif" alt="Color hues with system default 8 BPP palette, using silver background and Atkinson dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredAtk.gif" alt="Grayscale color shades with black and white palette using Atkinson dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.#ctor(System.Byte[0:,0:],System.Int32,System.Int32,System.Boolean,System.Nullable{System.Boolean})">
             <summary>
             Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer" /> class using the specified <paramref name="matrix"/>, <paramref name="divisor"/> and <paramref name="matrixFirstPixelIndex"/>.
             </summary>
             <param name="matrix">A matrix to be used as the coefficients for the quantization errors to be propagated to the neighboring pixels.</param>
             <param name="divisor">Each elements in the <paramref name="matrix"/> will be divided by this value. If less than the sum of the elements
             in the <paramref name="matrix"/>, then only a fraction of the error will be propagated.</param>
             <param name="matrixFirstPixelIndex">Specifies the first effective index in the first row of the matrix. If larger than zero, then the error will be propagated also to the bottom-left direction.
             Must be between 0 and <paramref name="matrix"/> width, excluding upper bound.</param>
             <param name="serpentineProcessing"><see langword="true"/> to process odd lines right-to-left and even lines left-to-right;
             <see langword="false"/> to process all lines left-to-right.
             <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.ConfigureProcessingDirection(System.Boolean)">ConfigureProcessingDirection</see> method for details. This parameter is optional.
             <br/>Default value: <see langword="false"/>.</param>
             <param name="byBrightness"><see langword="true"/> to apply the same quantization error on every color channel determined by brightness difference;
             <see langword="false"/> to handle quantization errors on each color channels independently; <see langword="null"/> to auto select strategy.
             Deciding by brightness can produce a better result when fully saturated colors are mapped to a grayscale palette.
             <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.ConfigureErrorDiffusionMode(System.Nullable{System.Boolean})">ConfigureErrorDiffusionMode</see> method for details. This parameter is optional.
             <br/>Default value: <see langword="null"/>.</param>
             <example>
             The following example demonstrates how to use a custom ditherer using the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> constructor:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToCustomDithered(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 // This is actually the Fan dithering (by Zhihang Fan), and uses the same coefficients
                 // as the Floyd-Steinberg dithering in a slightly different arrangement:
                 byte[,] matrix =
                 {
                     { 0, 0, 0, 7 },
                     { 1, 3, 5, 0 },
                 };
            
                 // The matrix values will be divided by this value to determine the portion
                 // of the quantization error to propagate to neighboring pixels:
                 int divisor = 16;
            
                 // The current pixel to be processed is always one pixel left from this index.
                 // This also means that if larger than 1, then some error is propagated also towards the
                 // (bottom-)left direction. For the matrix above value "3" means that whenever a pixel is
                 // processed, 7/16 of the error is propagated to the right, 1/16 and 3/16 to the
                 // bottom-left direction and 5/16 one pixel down from the current pixel.
                 int firstPixelIndex = 3;
            
                 IDitherer ditherer = new ErrorDiffusionDitherer(matrix, divisor, firstPixelIndex);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFan.gif" alt="Color hues with system default 8 BPP palette, using silver background and Fan dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredFan.gif" alt="Grayscale color shades with black and white palette using Fan dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip"><list type="bullet">
             <item>Use the static properties to perform dithering with predefined filters.</item>
             <item>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and image examples.</item>
             </list></note>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.ConfigureErrorDiffusionMode(System.Nullable{System.Boolean})">
            <summary>
            Gets a new <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance that has the specified error diffusion mode.
            </summary>
            <param name="byBrightness"><see langword="true"/> to apply the same quantization error on every color channel determined by brightness difference;
            <see langword="false"/> to handle quantization errors on each color channels independently; <see langword="null"/> to auto select strategy.
            Deciding by brightness can produce a better result when fully saturated colors are mapped to a grayscale palette.</param>
            <returns>A new <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance that has the specified error diffusion mode.</returns>
            <remarks>
            <note>This method always returns a new <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance instead of changing the error diffusion mode of the original one.
            This is required for the static properties so they can return a cached instance.</note>
            <para>Calculation of the quantization error may happen in two ways. The publicly available algorithms usually calculate the error for each color channels,
            which usually provides good results with color palettes. However, when quantizing color images with a black and white or grayscale palette,
            this approach may fail. For example, if the quantizer returns black for a fully saturated blue pixel, the quantization error is zero on the red and green channels and
            100% on the blue channel. The problem is that this error cannot be propagated to the neighboring pixels if they have the same color because adding any more blue
            to already fully saturated blue pixels will not change anything. Therefore, the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> can propagate quantization error
            by brightness based on human perception, which is more appropriate for palettes with grayscale colors.</para>
            <para>The following table demonstrates the effect of different strategies:
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
            <tbody>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFS.gif" alt="Color hues with system default 8 BPP palette, silver background and Floyd-Steinberg dithering, using error diffusion by RGB channels"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using error diffusion by RGB channels (the default strategy for non-grayscale palettes)</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFSByBr.gif" alt="Color hues with system default 8 BPP palette, silver background and Floyd-Steinberg dithering, using error diffusion by brightness"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using error diffusion by brightness</para></div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/ColorWheel.png" alt="Color wheel"/>
            <br/>Color wheel</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/ColorWheelBWBlueDitheredFSByBr.gif" alt="Color wheel with black and white palette, blue background and Floyd-Steinberg dithering, using error diffusion by brightness (the default strategy for grayscale palettes)"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using blue background and error diffusion by brightness (the default strategy for grayscale palettes). All colors appear in the result with different patterns.</para>
            <para><img src="../Help/Images/ColorWheelBWBlueDitheredFSByRgb.gif" alt="Color wheel with black and white palette, blue background and Floyd-Steinberg dithering, using error diffusion by RGB channels"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using blue background and error diffusion by RGB channels. The fully saturated colors turned completely black or white.</para></div></td>
            </tr>
            </tbody></table></para>
            </remarks>
            <example>
            The following example demonstrates how to specify the error diffusion mode for a predefined filter:
            <code lang="C#"><![CDATA[
            // getting a predefined ditherer that disperses quantization error by brightness:
            IDitherer ditherer = ErrorDiffusionDitherer.FloydSteinberg.ConfigureErrorDiffusionMode(byBrightness: true);
            ]]></code>
            </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.ConfigureProcessingDirection(System.Boolean)">
            <summary>
            Gets a new <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance that has the specified processing direction.
            </summary>
            <param name="serpentine"><see langword="true"/> to process odd lines right-to-left and even lines left-to-right;
            <see langword="false"/> to process all lines left-to-right.</param>
            <returns>A new <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance that has the specified processing direction.</returns>
            <remarks>
            <note>This method always returns a new <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance instead of changing the processing direction of the original one.
            This is required for the static properties so they can return a cached instance.</note>
            <para>A typical artifact of error diffusion dithering is a ripple effect, which often appears in homogeneous areas of the dithered image. This is due to the fact that most filters propagate quantization errors mostly to right and down,
            whereas pixels are processed left-to-right in each line while lines are scanned top-down (raster processing). The ripple effect can be reduced if every second line is processed in the opposite direction (serpentine processing).</para>
            <para>The following table demonstrates the effect of different processing directions:
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
            <tbody>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/Cameraman.png" alt="Test image &quot;Cameraman&quot;"/>
            <br/>Original test image "Cameraman"</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/CameramanBWDitheredFS.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, using Floyd-Steinberg dithering with raster processing"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using raster processing. The ripple effect is clearly visible on the coat.</para>
            <para><img src="../Help/Images/CameramanBWDitheredFSSerpentine.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, using Floyd-Steinberg dithering with serpentine processing"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using serpentine processing. The ripple effect is gone.</para></div></td>
            </tr>
            </tbody></table></para>
            </remarks>
            <example>
            The following example demonstrates how to specify the processing direction for a predefined filter:
            <code lang="C#"><![CDATA[
            // getting a predefined ditherer with serpentine processing:
            IDitherer ditherer = ErrorDiffusionDitherer.FloydSteinberg.ConfigureProcessingDirection(serpentine: true);
            ]]></code>
            </example>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer">
            <summary>
            Provides an <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation for applying an interleaved gradient noise pattern to the dithered result. For other noise-like
            ditherers see the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">OrderedDitherer.BlueNoise</see> property and the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> class.
            </summary>
            <remarks>
            <note>The noise generated by the <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> is not random but based on a formula so using the
            same source image, quantizer and strength produces always the same result (similarly to the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise"/> ditherer,
            which is based on <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer">ordered dithering</see>).
            To dither images with real random noise use the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/>, which applies white noise to the quantized source.</note>
            <para>The following table demonstrates the effect of the dithering:
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
            <tbody>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilver.gif" alt="Color hues with system default 8 BPP palette and silver background"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see>, no dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredIGN.gif" alt="Color hues with system default 8 BPP palette, using silver background and interleaved gradient noise dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and interleaved gradient noise dithering</para></div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
            <br/>Grayscale color shades</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/GrayShadesBW.gif" alt="Grayscale color shades with black and white palette"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see>, no dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredIGN.gif" alt="Grayscale color shades with black and white palette using interleaved gradient noise dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and interleaved gradient noise dithering</para></div></td>
            </tr>
            </tbody></table></para>
            </remarks>
            <seealso cref="T:KGySoft.Drawing.Imaging.IDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.OrderedDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer" />
        </member>
        <member name="M:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer.#ctor(System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> class.
             </summary>
             <param name="strength">The strength of the dithering effect between 0 and 1 (inclusive bounds).
             Specify 0 to use an auto value for each dithering session based on the used quantizer.
             <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">OrderedDitherer.ConfigureStrength</see> method
             for more details and some examples regarding dithering strength.
             The same applies also for the <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> class. This parameter is optional.
             <br/>Default value: <c>0</c>.</param>
             <example>
             The following example demonstrates how to use the <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> class.
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredInterleavedGradientNoise(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = new InterleavedGradientNoiseDitherer();
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredIGN.gif" alt="Color hues with system default 8 BPP palette, using silver background and interleaved gradient noise dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredIGN.gif" alt="Grayscale color shades with black and white palette using interleaved gradient noise dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             </example>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="strength"/> must be between 0 and 1, inclusive bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer.#ctor(KGySoft.Drawing.Imaging.AutoStrengthMode)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> class with a specific auto strength strategy.
            </summary>
            <param name="autoStrengthMode">An <see cref="T:KGySoft.Drawing.Imaging.AutoStrengthMode"/> value specifying the desired behavior for calibrating auto strength.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">OrderedDitherer.ConfigureStrength</see> method
            for more details and some examples regarding dithering strength. The same applies also for the <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> class.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="autoStrengthMode"/> is not one of the defined values.</exception>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.OrderedDitherer">
            <summary>
            Provides an <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation for dithering patterns that are based on an ordered matrix.
            Use the static properties of this class to use predefined patterns or the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.#ctor(System.Byte[0:,0:],System.Single)">constructor</see> to create a custom ordered ditherer.
            </summary>
            <remarks>
            <para>The <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.#ctor(System.Byte[0:,0:],System.Single)">constructor</see> can be used to create an ordered ditherer using a custom matrix.</para>
            <para>Use the static properties to obtain an instance with a predefined pattern. For the best results use the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer8x8</see>
            or <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">BlueNoise</see> properties. Or you can use the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.DottedHalftone">DottedHalftone</see> property for artistic results.</para>
            <para>The <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class offers a very fast dithering technique based on an ordered pattern specified in a matrix of bytes.
            The more different values the matrix has the more number of different patterns can be mapped to the shades of the original pixels.
            While quantizing lighter and lighter colors, the different patterns appear in the order of the values in the specified matrix.</para>
            <para>The following table demonstrates the effect of the dithering:
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
            <tbody>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilver.gif" alt="Color hues with system default 8 BPP palette and silver background"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see>, no dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredB8.gif" alt="Color hues with system default 8 BPP palette, silver background and Bayer 8x8 ordered dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredBN.gif" alt="Color hues with system default 8 BPP palette, using silver background and blue noise dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">blue noise</see> dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredDH.gif" alt="Color hues with system default 8 BPP palette, using silver background and rectangular 7x7 dotted halftone pattern dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.DottedHalftone">dotted halftone pattern</see> dithering</para></div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
            <br/>Grayscale color shades</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/GrayShadesBW.gif" alt="Grayscale color shades with black and white palette"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see>, no dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredB8.gif" alt="Grayscale color shades with black and white palette, using Bayer 8x8 ordered dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredBN.gif" alt="Grayscale color shades with black and white palette using blue noise dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">blue noise</see> dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredDH.gif" alt="Grayscale color shades with black and white palette using rectangular 7x7 dotted halftone pattern dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.DottedHalftone">dotted halftone pattern</see> dithering</para></div></td>
            </tr>
            </tbody></table></para>
            <para>Unlike in case of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>, ordered dithering does not adjust strength to the quantization error of a pixel
            but simply uses the specified matrix values based on pixel coordinates to determine the quantized result.
            Therefore, a strength can be specified (see the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.#ctor(System.Byte[0:,0:],System.Single)">constructor</see> and the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">ConfigureStrength</see> method),
            whose ideal value depends on the colors that a quantizer can return. If the strength is too low, then banding may appear in the result in place of gradients in the original image;
            whereas if the strength is too high, then dithering patterns may appear even in colors without quantization error (overdithering).</para>
            <para>Every static property in the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> returns an instance with auto strength, meaning that
            strength will be calibrated for each dithering session so that neither the black, nor the white colors will suffer from overdithering in the result.</para>
            <para>Auto strength can use different calibration strategies. The default strategy is usually correct if the quantizer returns evenly distributed colors.
            Otherwise, you can apply the <see cref="F:KGySoft.Drawing.Imaging.AutoStrengthMode.Interpolated"/> auto strength mode by the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureAutoStrengthMode(KGySoft.Drawing.Imaging.AutoStrengthMode)">ConfigureAutoStrengthMode</see>
            method that calibrates the strength both for the black and white colors and uses a dynamic strength to each pixel based on its brightness.
            If none of the auto strength modes provide the desired result you can obtain an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> instance with custom strength
            by the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">ConfigureStrength</see> method.</para>
            <para>The following table demonstrates the effect of different strengths:
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
            <tbody>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
            <br/>Grayscale color shades</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/GrayShadesDefault4bpp.gif" alt="Grayscale color shades with system default 4 BPP palette"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see>, no dithering. The asymmetry is due to the uneven distribution of gray shades of this palette.</para>
            <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8.gif" alt="Grayscale color shades with system default 4 BPP palette using Bayer 8x8 ordered dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using auto strength. Darker shades have banding.</para>
            <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8Str-5.gif" alt="Grayscale color shades with system default 4 BPP palette using a stronger Bayer 8x8 ordered dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using strength = 0.5. Now there is no banding but white suffers from overdithering.</para>
            <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8Interpolated.gif" alt="Grayscale color shades with system default 4 BPP palette using 8x8 ordered dithering with interpolated ato strength"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using <see cref="F:KGySoft.Drawing.Imaging.AutoStrengthMode.Interpolated"/> auto strength strategy.
            Now there is neither banding nor overdithering for black or white colors.</para></div></td>
            </tr></tbody></table></para>
            <note type="tip">See the <strong>Examples</strong> section of the static properties for more examples.</note>
            </remarks>
            <seealso cref="T:KGySoft.Drawing.Imaging.IDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Dither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer2x2">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> using the standard Bayer 2x2 matrix.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredBayer2x2(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = OrderedDitherer.Bayer2x2;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredB2.gif" alt="Color hues with system default 8 BPP palette, using silver background and Bayer 2x2 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredB2.gif" alt="Grayscale color shades with black and white palette using Bayer 2x2 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer3x3">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> using the standard Bayer 3x3 matrix.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredBayer3x3(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = OrderedDitherer.Bayer3x3;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredB3.gif" alt="Color hues with system default 8 BPP palette, using silver background and Bayer 3x3 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredB3.gif" alt="Grayscale color shades with black and white palette using Bayer 3x3 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer4x4">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> using the standard Bayer 4x4 matrix.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredBayer4x4(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = OrderedDitherer.Bayer4x4;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredB4.gif" alt="Color hues with system default 8 BPP palette, using silver background and Bayer 4x4 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredB4.gif" alt="Grayscale color shades with black and white palette using Bayer 4x4 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> using the standard Bayer 8x8 matrix.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredBayer8x8(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = OrderedDitherer.Bayer8x8;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredB8.gif" alt="Color hues with system default 8 BPP palette, using silver background and Bayer 8x8 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para>
             <para><img src="../Help/Images/AlphaGradientRgb111SilverDitheredB8.gif" alt="Color hues with RGB111 palette and silver background, using Bayer 8x8 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)">custom 8-color palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredB8.gif" alt="Grayscale color shades with black and white palette using Bayer 8x8 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para>
             <para><img src="../Help/Images/GrayShades2bppDitheredB8.gif" alt="Grayscale color shades with 2 BPP grayscale palette, using nearest color lookup and Bayer 8x8 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale4(System.Drawing.Color,System.Boolean)">4-color grayscale palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldDefault8bppBlackDitheredB8.gif" alt="Shield icon with system default 8 BPP palette using Bayer 8x8 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GirlWithAPearlEarring.png" alt="Test image &quot;Girl with a Pearl Earring&quot;"/>
             <br/>Original test image "Girl with a Pearl Earring"</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GirlWithAPearlEarringDefault8bppDitheredB8Srgb.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with system default 8 BPP palette, quantized in the sRGB color space using Bayer 8x8 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OrderedDitherer.DottedHalftone">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> using a 8x8 matrix of a dotted halftone pattern.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredDottedHalftone(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = OrderedDitherer.DottedHalftone;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredDH.gif" alt="Color hues with system default 8 BPP palette, using silver background and dotted halftone dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredDH.gif" alt="Grayscale color shades with black and white palette using dotted halftone dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> using a fixed 64x64 blue noise pattern of 256 different values.
             </summary>
             <remarks>
             <note>Generating random blue noise patterns is a very resource intensive operation but this method uses a pregenerated fix pattern, which is very fast.
             To dither images with real random noise use the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/>, which applies white noise to the quantized source.</note>
             </remarks>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredBlueNoise(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = OrderedDitherer.BlueNoise;
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredBN.gif" alt="Color hues with system default 8 BPP palette, using silver background and blue noise dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredBN.gif" alt="Grayscale color shades with black and white palette using blue noise dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OrderedDitherer.#ctor(System.Byte[0:,0:],System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class using the specified <paramref name="matrix"/> and <paramref name="strength"/>.
             </summary>
             <param name="matrix">A matrix to be used as the coefficients of the dithering. Ideally contains every value between zero
             and the maximum value in the matrix. Repeated values will appear always together for the same input colors.</param>
             <param name="strength">The strength of the dithering effect between 0 and 1 (inclusive bounds).
             Specify 0 to use an auto value for each dithering session based on the used quantizer.
             <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">ConfigureStrength</see> method for details about dithering strength. This parameter is optional.
             <br/>Default value: <c>0</c>.</param>
             <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is <see langword="null"/>.</exception>
             <exception cref="T:System.ArgumentException"><paramref name="matrix"/> is empty.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="strength"/> must be between 0 and 1, inclusive bounds.</exception>
             <example>
             The following example demonstrates how to use a custom ditherer using the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> constructor.
             It produces a similar dotted halftone pattern to the result of the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.DottedHalftone"/> property but in a rectangular
             arrangement and with less different patterns:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToCustomDithered(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 // Using a dotted halftone pattern. As it uses only 11 values in a 7x7 matrix it is much less optimal
                 // than the DottedHalftone property but demonstrates the behavior of the ordered dithering quite well.
                 byte[,] matrix =
                 {
                    {  0,  2,  4,  5,  4,  2,  1 },
                    {  2,  3,  6,  7,  6,  3,  2 },
                    {  4,  6,  8,  9,  8,  6,  4 },
                    {  5,  7,  9, 10,  9,  7,  5 },
                    {  4,  6,  8,  9,  8,  6,  4 },
                    {  2,  3,  6,  7,  6,  3,  2 },
                    {  1,  2,  4,  5,  4,  2,  1 },
                 };
            
                 IDitherer ditherer = new OrderedDitherer(matrix);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredOC.gif" alt="Color hues with system default 8 BPP palette, using silver background and a custom dotted halftone dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredOC.gif" alt="Grayscale color shades with black and white palette using a custom dotted halftone dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             <note type="tip"><list type="bullet">
             <item>Use the static properties to perform dithering with predefined patterns.</item>
             <item>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and image examples.</item>
             </list></note>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">
            <summary>
            Gets a new <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> instance that has the specified dithering <paramref name="strength"/>.
            </summary>
            <param name="strength">The strength of the dithering effect between 0 and 1 (inclusive bounds).
            Specify 0 to use an auto value for each dithering session based on the used quantizer.
            The auto strength strategy can be specified by the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureAutoStrengthMode(KGySoft.Drawing.Imaging.AutoStrengthMode)">ConfigureAutoStrengthMode</see> method.</param>
            <returns>A new <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> instance that has the specified dithering <paramref name="strength"/>.</returns>
            <remarks>
            <note>This method always returns a new <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> instance instead of changing the strength of the original one.
            This is required for the static properties so they can return a cached instance.</note>
            <para>If <paramref name="strength"/> is too low, then banding may appear in the result in place of gradients in the original image;
            whereas if <paramref name="strength"/> is too high, then dithering patterns may appear even in colors without quantization error (overdithering).</para>
            <para>If <paramref name="strength"/> is 0, then strength will be calibrated for each dithering session so that neither the black, nor the white colors will suffer from overdithering in the result.
            This is the default for <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> instances returned by the static properties.</para>
            <para>The auto strength strategy itself can be specified by the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureAutoStrengthMode(KGySoft.Drawing.Imaging.AutoStrengthMode)">ConfigureAutoStrengthMode</see> method.</para>
            <para>The following table demonstrates the effect of different strengths:
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
            <tbody>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
            <br/>Grayscale color shades</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/GrayShadesDefault4bpp.gif" alt="Grayscale color shades with system default 4 BPP palette"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see>, no dithering. The asymmetry is due to the uneven distribution of gray shades of this palette.</para>
            <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8.gif" alt="Grayscale color shades with system default 4 BPP palette using Bayer 8x8 ordered dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using auto strength. Darker shades have banding.</para>
            <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8Str-5.gif" alt="Grayscale color shades with system default 4 BPP palette using a stronger Bayer 8x8 ordered dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using strength = 0.5. Now there is no banding but white suffers from overdithering.</para>
            <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8Interpolated.gif" alt="Grayscale color shades with system default 4 BPP palette using 8x8 ordered dithering with interpolated ato strength"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using <see cref="F:KGySoft.Drawing.Imaging.AutoStrengthMode.Interpolated"/> auto strength strategy.
            Now there is neither banding nor overdithering for black or white colors.</para></div></td>
            </tr>
            </tbody></table></para>
            </remarks>
            <example>
            The following example demonstrates how to specify the strength for a predefined ordered ditherer:
            <code lang="C#"><![CDATA[
            // getting a predefined ditherer with custom strength:
            IDitherer ditherer = OrderedDitherer.Bayer8x8.ConfigureStrength(0.5f);
            
            // getting a predefined ditherer with custom auto strength strategy:
            ditherer = OrderedDitherer.Bayer8x8.ConfigureAutoStrengthMode(AutoStrengthMode.Interpolated);
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="strength"/> must be between 0 and 1, inclusive bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureAutoStrengthMode(KGySoft.Drawing.Imaging.AutoStrengthMode)">
            <summary>
            Gets a new <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> instance that uses auto strength using the specified <paramref name="autoStrengthMode"/>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">ConfigureStrength</see> method for details and image examples.
            </summary>
            <param name="autoStrengthMode">An <see cref="T:KGySoft.Drawing.Imaging.AutoStrengthMode"/> value specifying the desired behavior for calibrating auto strength.</param>
            <returns>A new <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> instance that has the specified <paramref name="autoStrengthMode"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="autoStrengthMode"/> is not one of the defined values.</exception>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer">
            <summary>
            Provides an <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation for random noise dithering. This class applies a random white noise to the result. For other noise-like
            ditherers see the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">OrderedDitherer.BlueNoise</see> property and the <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> class.
            </summary>
            <remarks>
            <para>The <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> generates some random white noise to the quantized source.</para>
            <note type="tip">There are also a couple of ditherers with non-random noise-like patterns in this library. See also
            the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">OrderedDitherer.BlueNoise</see> property and the <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> class.</note>
            <para>To get always the same result for the same source image and quantizer you can specify a <em>seed</em> when initializing a <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> instance.
            Please note though that specifying a seed prevents parallel processing, which makes performance worse on multi-core systems.</para>
            <para>The following table demonstrates the effect of the dithering:
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
            <tbody>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilver.gif" alt="Color hues with system default 8 BPP palette and silver background"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see>, no dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredRN.gif" alt="Color hues with system default 8 BPP palette, using silver background and random noise dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and random noise dithering</para></div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
            <br/>Grayscale color shades</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/GrayShadesBW.gif" alt="Grayscale color shades with black and white palette"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see>, no dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredRN.gif" alt="Grayscale color shades with black and white palette using random noise dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and random noise dithering</para></div></td>
            </tr>
            </tbody></table></para>
            </remarks>
            <seealso cref="T:KGySoft.Drawing.Imaging.IDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.OrderedDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer" />
        </member>
        <member name="M:KGySoft.Drawing.Imaging.RandomNoiseDitherer.#ctor(System.Single,System.Nullable{System.Int32})">
             <summary>
             Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> class.
             </summary>
             <param name="strength">The strength of the dithering effect between 0 and 1 (inclusive bounds).
             Specify 0 to use an auto value for each dithering session based on the used quantizer.
             <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">OrderedDitherer.ConfigureStrength</see> method
             for more details and some examples regarding dithering strength.
             The same applies also for the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> class. This parameter is optional.
             <br/>Default value: <c>0</c>.</param>
             <param name="seed">If <see langword="null"/>, then a <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_CoreLibraries_ThreadSafeRandom.htm">ThreadSafeRandom</a>
             instance will be used internally with a time-dependent seed value, and the dithering session will allow parallel processing.
             If not <see langword="null"/>, then a <see cref="T:System.Random"/> instance will be created for each dithering session with the specified <paramref name="seed"/>, and the dithering session will not allow parallel processing.</param>
             <example>
             The following example demonstrates how to use the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> class.
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDitheredRandomNoise(IReadWriteBitmapData source, IQuantizer quantizer)
             {
                 IDitherer ditherer = new RandomNoiseDitherer();
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap data:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized and dithered image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredRN.gif" alt="Color hues with system default 8 BPP palette, using silver background and random noise dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBWDitheredRN.gif" alt="Grayscale color shades with black and white palette using random noise dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></td>
             </tr>
             </tbody></table></para>
             </example>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="strength"/> must be between 0 and 1, inclusive bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.RandomNoiseDitherer.#ctor(KGySoft.Drawing.Imaging.AutoStrengthMode,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> class with a specific auto strength strategy.
            </summary>
            <param name="autoStrengthMode">An <see cref="T:KGySoft.Drawing.Imaging.AutoStrengthMode"/> value specifying the desired behavior for calibrating auto strength.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">OrderedDitherer.ConfigureStrength</see> method
            for more details and some examples regarding dithering strength. The same applies also for the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> class.</param>
            <param name="seed">If <see langword="null"/>, then a <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_CoreLibraries_ThreadSafeRandom.htm">ThreadSafeRandom</a>
            instance will be used internally with a time-dependent seed value, and the dithering session will allow parallel processing.
            If not <see langword="null"/>, then a <see cref="T:System.Random"/> instance will be created for each dithering session with the specified <paramref name="seed"/>, and the dithering session will not allow parallel processing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="autoStrengthMode"/> is not one of the defined values.</exception>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration">
            <summary>
            Represents the configuration for encoding a GIF animation by the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">GifEncoder.EncodeAnimation</see> method.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.Size">
            <summary>
            Gets or sets the desired size of the result animation. If <see langword="null"/>, then size is determined by the first frame.
            If set explicitly or the input frames can have different sizes, then <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.SizeHandling"/> should also be set accordingly.
            <br/>Default value: <see langword="null"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.SizeHandling">
            <summary>
            Gets or sets how possibly different input frame sizes are handled.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.AnimationFramesSizeHandling.ErrorIfDiffers"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.ReplaceZeroDelays">
            <summary>
            Gets or sets whether zero delay values are allowed in the result stream,
            which is usually interpreted as 100 ms by most GIF decoders.
            <br/>Default value: <see langword="true"/>.
            </summary>
            <value>
            If <see langword="true"/>, then zero delay values will be replaced to 100 milliseconds.
            <br/>If <see langword="false"/>, then zero delays will be preserved and the decoders decide how to interpret them.
            </value>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.Quantizer">
            <summary>
            Gets or sets an optional quantizer to be used for the frames. 
            Using a non-<see langword="null"/> value forces the quantization also of already indexed images.
            Should use up to 256 colors; otherwise, the result might be quantized further with using the default system 8-bit palette.
            <br/>Default value: <see langword="null"/>.
            </summary>
            <value>
            If <see langword="null"/>, then the possibly existing palette of already indexed input frames are preserved.
            For frames with a non-indexed pixel format a quantizer returned by the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">OptimizedPaletteQuantizer.Wu</see> method will be used.
            <br/>If not <see langword="null"/>, then all frames will be quantized, even the already indexed ones. If does not support transparency,
            then <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AllowDeltaFrames"/> will be ignored.
            </value>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.Ditherer">
            <summary>
            Gets or sets an optional ditherer to be used when quantizing the frames.
            <br/>Default value: <see langword="null"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AnimationMode">
            <summary>
            Gets or sets the looping mode of the animation.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.AnimationMode.Repeat"/>.
            </summary>
            <value>
            If <see cref="F:KGySoft.Drawing.Imaging.AnimationMode.Repeat"/>, then the animation will be repeated indefinitely.
            <br/>If <see cref="F:KGySoft.Drawing.Imaging.AnimationMode.PingPong"/>, then the specified frames will be added in both ways so the final animation will be played back and forth.
            <br/>If <see cref="F:KGySoft.Drawing.Imaging.AnimationMode.PlayOnce"/>, then the animation will be played only once.
            <br/>The <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> actually supports any positive value less than or equal to <see cref="F:System.UInt16.MaxValue">UInt16.MaxValue</see> even though
            they don't have named values in the <see cref="T:KGySoft.Drawing.Imaging.AnimationMode"/> enumeration.
            </value>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.EncodeTransparentBorders">
            <summary>
            Gets or sets whether the transparent borders of the frames should be encoded as part of the frame.
            <br/>Default value: <see langword="false"/>.
            </summary>
            <value>
            If <see langword="true"/>, then transparent borders of the frames will be considered as image content (and possibly smaller frames will be virtually
            enlarged, too). This produces a bit larger encoded size but provides better compatibility.
            <br/>If <see langword="false"/>, then always only the smallest possible non-transparent area will be encoded. Some decoders may not tolerate this option.
            </value>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AllowClippedFrames">
            <summary>
            Gets or sets whether the encoder is allowed to add smaller actual frames than the <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.Size"/> of the animation.
            <br/>Default value: <see langword="true"/>.
            <br/>See also the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AllowDeltaFrames"/> property for more details.
            </summary>
            <value>
            If <see langword="false"/>, then always full-sized frames are added to the animation. This might end up in a larger encoded size but provides better compatibility.
            <br/>If <see langword="true"/>, then actual frames might be clipped. If <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AllowDeltaFrames"/> is <see langword="false"/>, then it affects only the clipping of possible
            transparent borders. Some decoders may not tolerate this option.
            </value>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AllowDeltaFrames">
            <summary>
            Gets or sets whether it is allowed to encode only the changed region of a frame. In some circumstances the value of this property might be ignored.
            <br/>Default value: <see langword="true"/>.
            </summary>
            <value>
            If <see langword="true"/>, then the required memory during encoding may be larger but it allows creating more compact files and even high color frames (see also the <strong>Remarks</strong> section).
            <br/>If <see langword="false"/>, then all frames will be encoded individually. This provides lower memory consumption but may produce larger files.
            </value>
            <remarks>
            <para>If <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.Quantizer"/> is set to an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> that allows creating a specific palette for each frame,
            then setting this property to <see langword="true"/> might also allow producing high color frames.</para>
            <para>If <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AllowClippedFrames"/> is <see langword="false"/>, then this property is ignored for quantizers with no transparency support.
            Therefore make sure that you set also the <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AllowClippedFrames"/> to <see langword="true"/> if you use a quantizer without transparency support.</para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.DeltaTolerance">
            <summary>
            Gets or sets the allowed maximum tolerance for detecting changes of consecutive frames when <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AllowDeltaFrames"/> is <see langword="true"/>.
            <br/>Default value: 0.
            </summary>
            <value>
            If 0, then even a minimal color difference will be considered as a change to be encoded.
            <br/>If 255, then nothing will be treated as a change. The animation will have no new frames unless a frame contains new transparent pixels compared to the previous one.
            <br/>The reasonable range is between 0 and 16 with an optimized quantizer. Predefined quantizers may tolerate larger values (eg. up to 32) with some dithering.
            </value>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.ReportOverallProgress">
            <summary>
            Gets or sets whether to report overall and/or sub-task progress when encoding by <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Threading.AsyncConfig)">GifEncoder.BeginEncodeAnimation</see>
            and <see cref="!:GifEncoder.EncodeAnimationAsync">GifEncoder.EncodeAnimationAsync</see> methods and the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">AsyncConfigBase.Progress</a> property is set.
            When <see langword="null"/>, then both are reported.
            <br/>Default value: <see langword="null"/>.
            </summary>
            <value>
            If <see langword="null"/>, then both overall and sub-task progress are reported. You can filter overall progress steps by considering <see cref="F:KGySoft.Drawing.DrawingOperation.Saving"/> operations only.
            <br/>If <see langword="true"/>, then only overall progress steps are reported. Please note that if the count of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            instance passed to the constructor cannot be determined in a trivial way, then the maximum value of the steps will be adjusted dynamically.
            <br/>If <see langword="false"/>, then only sub-task progress steps are reported such as optimizing palette, quantizing and other processing operations.
            </value>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.#ctor(System.Collections.Generic.IEnumerable{KGySoft.Drawing.Imaging.IReadableBitmapData},System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration"/> class.
            </summary>
            <param name="frames">The collection of the frames to be added to the result animation. Disposing of the frames must be performed by the caller.
            <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">GifEncoder.EncodeAnimation</see> enumerates the collection lazily so you can pass an iterator that disposes
            the previous frame once the next one is queried, or you can even re-use the same bitmap data for each frames if you generate them dynamically.</param>
            <param name="delay">An optional <see cref="T:System.TimeSpan"/> to specify the delay for all frames. If <see langword="null"/>,
            then a default 100 ms delay will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="frames"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.#ctor(System.Collections.Generic.IEnumerable{KGySoft.Drawing.Imaging.IReadableBitmapData},System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration"/> class.
            </summary>
            <param name="frames">The collection of the frames to be added to the result animation. Disposing of the frames must be performed by the caller.
            <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">GifEncoder.EncodeAnimation</see> enumerates the collection lazily so you can pass an iterator that disposes
            the previous frame once the next one is queried, or you can even re-use the same bitmap data for each frames if you generate them dynamically.</param>
            <param name="delays">The collection of the delays to be used for the animation. If <see langword="null"/> or empty,
            then a default 100 ms delay will be used for all frames.
            If contains less elements than <paramref name="frames"/>, then the last value will be re-used for the remaining frames.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="frames"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.#ctor(System.Func{KGySoft.Drawing.Imaging.IReadableBitmapData},System.Func{System.Nullable{System.TimeSpan}})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration"/> class.
            </summary>
            <param name="getNextFrame">A delegate that returns the next frame of the animation. It should return <see langword="null"/> after the last frame.
            Frames are not disposed by the encoder so the caller can dispose them once the subsequent frame is requested.</param>
            <param name="getNextDelay">A delegate that returns the delay for the next frame. If it returns <see langword="null"/> sooner than <paramref name="getNextFrame"/>, then
            the last non-<see langword="null"/> value will be re-used for the remaining frames. If it returns <see langword="null"/> for the first time, then
            each frame will use a default 100 ms delay.</param>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.GifEncoder">
            <summary>
            Provides an encoder for GIF image format that supports animation. Use the static members for high-level access or create an instance to
            control everything manually.
            </summary>
            <remarks>
            <para>The simplest way to create a single-frame GIF image is calling the static <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">EncodeImage</see> method. It can
            quantize and dither any input <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> source.</para>
            <para>The simplest way to create a GIF animation is calling the static <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">EncodeAnimation</see> method. It expects
            an <see cref="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration"/> that describes the frames and delays to be used along with numerous optional configuration such as
            a specific quantizer and ditherer, looping mode, handling of possible different input image sizes, encoding strategies like allowing
            delta images or explicitly encoding transparent borders.
            <note type="tip">If you use an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> and the <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AllowDeltaFrames"/> property
            is <see langword="true"/>, then you can create really high quality animations allowing more than 256 colors per frame.</note></para>
            <para>Alternatively, you can instantiate the <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> class, which allows you even more control at lower levels.
            The <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.RepeatCount"/>, <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.GlobalPalette"/> and <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.BackColorIndex"/> properties should be set before adding the first frame,
            whereas <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.CompressionMode"/> can be changed before each frame. The <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.AddImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Point,System.Int32,KGySoft.Drawing.Imaging.GifGraphicDisposalMethod)">AddImage</see> method allows specifying a location
            for each frame as well as an action to be performed after the delay interval of the corresponding frame is over.
            You can even write comments to the serialization stream by the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.AddComments(System.String[])">AddComments</see> method.
            <note>When using the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.AddImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Point,System.Int32,KGySoft.Drawing.Imaging.GifGraphicDisposalMethod)">AddImage</see> method to add frames you should use already quantized images with indexed pixel format.
            Non-indexed images will be quantized using the default 8-bit "web-safe" palette without dithering.</note></para>
            </remarks>
            <example>
            <para>The following example demonstrates how to use the encoder in a <see langword="using"/> block:
            <code lang="C#"><![CDATA[
            using (var encoder = new GifEncoder(stream, new Size(48, 48)) { GlobalPalette = palette })
            {
                encoder.AddComments("My GIF animation");
                encoder.AddImage(frame1, location1, delay1);
                encoder.AddImage(frame2, location2, delay2);
            }]]></code></para>
            <para>Or, by using fluent syntax the example above can be re-written like this:
            <code lang="C#"><![CDATA[
            // Note the last FinalizeEncoding step. In the above example it is called implicitly at the end of the using block.
            new GifEncoder(stream, new Size(48, 48)) { GlobalPalette = palette }
                .AddComments("My GIF animation")
                .AddImage(frame1, location1, delay1)
                .AddImage(frame2, location2, delay2)
                .FinalizeEncoding();]]></code></para>
            </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.GifEncoder.RepeatCount">
            <summary>
            Gets or sets the number of repetitions if creating an animation.
            Set a non-<see langword="null"/> value to add the <c>NETSCAPE2.0</c> extension to the stream and to indicate that added images
            should be interpreted as animation frames. Use <c>0</c> to loop the animation indefinitely.
            If <see langword="null"/>, and images are added with 0 delay, then GDI+ handles image as a multi-layer single frame image,
            though some application (including browsers) still may play them as individual frames.
            <br/>Default value: <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than 0.</exception>
            <exception cref="T:System.InvalidOperationException">This property cannot be set after adding the first image.</exception>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.GifEncoder.GlobalPalette">
            <summary>
            Gets or sets the global palette. If not set, then each added image will be stored along with their own palette.
            If not <see langword="null"/>, then the palette of the added images are stored only when they are different from the global palette.
            <br/>Default value: <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> has more than 256 colors.</exception>
            <exception cref="T:System.InvalidOperationException">This property cannot be set after adding the first image.</exception>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.GifEncoder.BackColorIndex">
            <summary>
            Gets or sets the background color index if <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.GlobalPalette"/> is set.
            It is relevant only if the palette of the first added image has no transparent entry, in which case
            determines the initial background color if the first added image does not completely cover the virtual screen,
            and also the color of the cleared virtual screen.
            </summary>
            <exception cref="T:System.InvalidOperationException">This property cannot be set after adding the first image.</exception>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.GifEncoder.AddMetaInfo">
            <summary>
            Gets or sets whether textual meta info should be added to the result stream.
            <br/>Default value: <see langword="false"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.GifEncoder.CompressionMode">
            <summary>
            Gets or sets the compression mode to be used when adding images by the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.AddImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Point,System.Int32,KGySoft.Drawing.Imaging.GifGraphicDisposalMethod)">AddImage</see> method.
            This property can be changed at any time.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.GifCompressionMode.Auto"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.#ctor(System.IO.Stream,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> class.
            </summary>
            <param name="stream">The writable stream to save the image content.</param>
            <param name="size">Specifies the logical screen size. It also determines the maximum size of the added images.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.AddImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Point,System.Int32,KGySoft.Drawing.Imaging.GifGraphicDisposalMethod)">
            <summary>
            Writes an image to the output stream.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> class for details and examples.
            </summary>
            <param name="imageData">The image data to write. Non-indexed images will be quantized by using the <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.GlobalPalette"/>, or, if that is not set,
            by the system default 8-bpp "web-safe" palette (see also <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">PredefinedColorsQuantizer.SystemDefault8BppPalette</see>)
            using no dithering.</param>
            <param name="location">Specifies the location of the current image within the logical screen.</param>
            <param name="delay">Specifies the delay before rendering the next image in hundredths of a second. <c>0</c> is usually interpreted as 100ms by browsers (as if 10 was specified),
            while GDI+ treats it zero delay only if <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.RepeatCount"/> is <see langword="null"/>.</param>
            <param name="disposalMethod">Specifies how the decoder should treat the image after being displayed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.GifGraphicDisposalMethod.NotSpecified"/>.</param>
            <returns>The self <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> instance allowing adding multiple images by fluent syntax.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.AddComments(System.String[])">
            <summary>
            Writes textual comments to the output stream.
            </summary>
            <param name="comments">The comments to write. They must not be longer than 255 characters and must consist of ASCII characters.</param>
            <returns>The self <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> instance allowing fluent syntax.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="comments"/> contain a comment longer than 255 characters or that is not of ASCII characters only.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.FinalizeEncoding(System.Boolean)">
            <summary>
            Finalizes the encoding. It should be called after adding the last image.
            It is implicitly called when this <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> instance is disposed.
            </summary>
            <param name="leaveStreamOpen"><see langword="true"/> to leave the underlying stream open; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WriteHeaderAndLogicalScreenDescriptor(System.Int32)">
            <summary>
            See the details in chapter 17-18 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WritePalette(KGySoft.Drawing.Imaging.Palette)">
            <summary>
            See the details in chapters 19 and 21 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WriteCommentExtension(System.Byte[])">
            <summary>
            Writing the comment extension from direct data as per chapters 24 and 15 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WriteCommentExtension(System.String[])">
            <summary>
            Writing the comment extension from strings as per chapters 24 and 15 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WriteNetscapeLoopBlockApplicationExtension(System.Int32)">
            <summary>
            Writing the nonstandard NETSCAPE2.0 extension as per chapters 26 and 15 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WriteGraphicControlExtension(System.Int32,KGySoft.Drawing.Imaging.GifGraphicDisposalMethod,System.Int32)">
            <summary>
            Writing the Graphic Control Extension as per chapter 23 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WriteImageDescriptor(System.Drawing.Point,System.Drawing.Size,KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Writing the Graphic Control Extension as per chapter 20 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNext">
            <summary>
            It consumes <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.nextGeneratedFrame"/> set by <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNextGeneratedFrame"/>, and sets <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.current"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNextGeneratedFrame">
            <summary>
            It consumes <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.nextPreparedFrame"/> set by <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNextPreparedFrame"/>, and sets <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.nextGeneratedFrame"/>.
            Tries to generate the next frame, but it does not set <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.Frame"/>
            (it is done by <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNext"/>) so it can look one frame forward.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNextPreparedFrame">
            <summary>
            It consumes <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.nextUnprocessedInputFrame"/> set by <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNextInputFrame"/>, and sets <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.nextPreparedFrame"/>.
            Tries to prepare the next frame. Prepared frames are adjusted to the final size and might already be quantized if no delta frame can be generated.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNextInputFrame">
            <summary>
            Tries to get the next frame from <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.inputFramesEnumerator"/>, and sets <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.nextUnprocessedInputFrame"/>.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.GifEncoder.LzwEncoder">
            <summary>
            The LZW Encoder based on the specification as per chapter 22 and Appendix F in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            The detailed LZW algorithm is written here: http://giflib.sourceforge.net/whatsinagif/lzw_image_data.html
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.GifEncoder.LzwEncoder.CodeTable">
            <summary>
            Provides the LZW code table implementation.
            It has been refactored to use open addressing double hashing instead of a regular Dictionary.
            Some implementation ideas were inspired by Kevin Weiner's Java encoder from here: http://www.java2s.com/Code/Java/2D-Graphics-GUI/AnimatedGifEncoder.htm
            Basically it uses a variant of Knuth's algorithm along with G. Knott's relatively-prime secondary probe.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifEncoder.LzwEncoder.CodeTable.tableSize">
            <summary>
            A prime that provides about 80% occupancy in the code table considering the max used entries when bit size is 12.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifEncoder.LzwEncoder.CodeTable.entries">
            <summary>
            Earlier versions used a dictionary as a code table where the key was a span of palette indices.
            Even with shared underlying buffer memory and optimized GetHashCode/Equals implementation it was much less efficient.
            Here we can exploit that all prefixes of new codes are already stored so when there is a hash collision we don't need
            to perform an equality check for the whole segment repeatedly (this is what Dictionary does when there are more entries in the same bucket).
            Instead, we use double hashing and a match key for equality check:
            - The primary hash is calculated for the current prefix and is used to select a code table entry
            - A match key is used for equality check. It is calculated last code + current index combination and is stored along with prefix codes.
            - If equality check by match key fails (collision), then using a secondary hash to jump from entry to entry.
            The idea was taken from here: http://www.java2s.com/Code/Java/2D-Graphics-GUI/AnimatedGifEncoder.htm
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Encodes the specified <paramref name="imageData"/> as a GIF image and writes it into the specified <paramref name="stream"/>.
            </summary>
            <param name="imageData">The image data to write. Non-indexed images will be quantized by using the specified <paramref name="quantizer"/>, or, if that is not set,
            by the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see> quantizer or <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">Grayscale</see> quantizer, depending on the pixel format.</param>
            <param name="stream">The stream to save the encoded image into.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors of the result.
            If <see langword="null"/> and <paramref name="imageData"/> is not an indexed image or the palette contains multiple alpha entries,
            then the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see> or <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">Grayscale</see> quantizer will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="imageData"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginEncodeImage</see>
            or <see cref="!:EncodeImageAsync">EncodeImageAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <para>To encode an <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a> you can use also the <see cref="O:KGySoft.Drawing.ImageExtensions.SaveAsGif">ImageExtensions.SaveAsGif</see>
            methods that provide a higher level access.</para>
            <para>To create a GIF completely manually you can create a <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> instance that provides a lower level access.</para>
            <para>If <paramref name="quantizer"/> is specified, then it will be used even for already indexed images.</para>
            <para>If <paramref name="quantizer"/> is an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>, then the palette of the result image will be adjusted for the actual image content.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to encode the specified <paramref name="imageData"/> as a GIF image and to write it into the specified <paramref name="stream"/>.
            </summary>
            <param name="imageData">The image data to write. Non-indexed images will be quantized by using the specified <paramref name="quantizer"/>, or, if that is not set,
            by the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see> quantizer or <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">Grayscale</see> quantizer, depending on the pixel format.</param>
            <param name="stream">The stream to save the encoded image into.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors of the result.
            If <see langword="null"/> and <paramref name="imageData"/> is not an indexed image or the palette contains multiple alpha entries,
            then the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see> or <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">Grayscale</see> quantizer will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="imageData"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:EncodeImageAsync">EncodeImageAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EndEncodeImage(System.IAsyncResult)">EndEncodeImage</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.
            The encoding itself cannot be parallelized. The <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> setting affects only the quantizing session
            if <paramref name="imageData"/> has a non-indexed pixel format, or when <paramref name="quantizer"/> is set.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">EncodeImage</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EndEncodeImage(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginEncodeImage</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:EncodeImageAsync">EncodeImageAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">
            <summary>
            Encodes the frames of the specified <paramref name="configuration"/> as an animated GIF image and writes it into the specified <paramref name="stream"/>.
            </summary>
            <param name="configuration">An <see cref="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration"/> instance describing the configuration of the encoding.</param>
            <param name="stream">The stream to save the encoded animation into.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="configuration"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="configuration"/> is invalid.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Threading.AsyncConfig)">BeginEncodeAnimation</see>
            or <see cref="!:EncodeAnimationAsync">EncodeAnimationAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <para>To encode <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a> instances with default configuration you can use the <see cref="O:KGySoft.Drawing.ImageExtensions.SaveAsAnimatedGif">ImageExtensions.SaveAsAnimatedGif</see>
            methods that provide a higher level access.</para>
            <para>To create an animation completely manually you can create a <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> instance that provides a lower level access.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to encode the frames of the specified <paramref name="configuration"/> as an animated GIF image and to write it into the specified <paramref name="stream"/>.
            </summary>
            <param name="configuration">An <see cref="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration"/> instance describing the configuration of the encoding.</param>
            <param name="stream">The stream to save the encoded animation into.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="configuration"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="configuration"/> is invalid.</exception>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:EncodeAnimationAsync">EncodeAnimationAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EndEncodeAnimation(System.IAsyncResult)">EndEncodeAnimation</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">EncodeAnimation</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EndEncodeAnimation(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Threading.AsyncConfig)">BeginEncodeAnimation</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:EncodeAnimationAsync">EncodeAnimationAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeHighColorImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Encodes the specified <paramref name="imageData"/> as a multi-layered, single frame GIF image and writes it into the specified <paramref name="stream"/>, preserving its original color depth.
            </summary>
            <param name="imageData">The image data to write. Possible alpha pixels might be blended with <paramref name="backColor"/> but otherwise the color depth will be preserved.</param>
            <param name="stream">The stream to save the encoded animation into.</param>
            <param name="allowFullScan"><see langword="true"/> to allow scanning the whole image for each layers to be able to re-use the local palette of the current layer.
            <br/><see langword="false"/> to expand the initial layer area to the local pixels only. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <param name="backColor">Colors with alpha (transparency), whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field
            is equal to or greater than <paramref name="alphaThreshold"/> will be blended with this color during the encoding.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">Specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which a pixel is considered transparent.
            If 0, then the final composite image will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="imageData"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeHighColorImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Threading.AsyncConfig)">BeginEncodeHighColorImage</see>
            or <see cref="!:EncodeHighColorImageAsync">EncodeHighColorImageAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <note type="caution">This method produces a GIF image that may have compatibility issues. Though the <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a>
            and <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Bitmap" target="_blank">Bitmap</a> types (at least on Windows)
            support them as expected as well as applications built on GDI+ (such as Windows Paint), many decoders may treat the result as an animation (including browsers).</note>
            <para>If <paramref name="allowFullScan"/> is <see langword="true"/>, then both the processing time and memory usage is higher.
            It helps to minimize the number of layers of the final image; however, the final image size will not be necessarily smaller, especially for true color images.</para>
            <para>If <paramref name="allowFullScan"/> is <see langword="false"/>, then each layer is attempted to be as compact as possible. It allows a very fast processing with lower memory usage.
            Though it usually produces more layers, the final size will not be necessarily larger, especially for true color images.</para>
            <note type="tip">You can prequantize true color images using a 16-bit quantizer (with or without dithering) to produce fairly compact, still high color GIF images.
            For such images the <paramref name="allowFullScan"/> parameter with <see langword="true"/> value typically produces more compact results.
            You can consider using the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb1555(System.Drawing.Color,System.Byte)">Argb1555</see> quantizer for images with transparency,
            or the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb565(System.Drawing.Color)">Rgb565</see> quantizer for non-transparent images.</note>
            <para>To encode an <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a> you can use also the <see cref="O:KGySoft.Drawing.ImageExtensions.SaveAsHighColorGif">ImageExtensions.SaveAsHighColorGif</see> methods.</para>
            <para>To create a multi-layered image completely manually you can create a <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> instance that provides a lower level access.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeHighColorImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to encode the specified <paramref name="imageData"/> as a multi-layered, single frame GIF image, writing it into the specified <paramref name="stream"/> and preserving its original color depth.
            </summary>
            <param name="imageData">The image data to write. Possible alpha pixels might be blended with <paramref name="backColor"/> but otherwise the color depth will be preserved.</param>
            <param name="stream">The stream to save the encoded animation into.</param>
            <param name="allowFullScan"><see langword="true"/> to allow scanning the whole image for each layers to be able to re-use the local palette of the current layer.
            <br/><see langword="false"/> to expand the initial layer area to the local pixels only. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <param name="backColor">Colors with alpha (transparency), whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field
            is equal to or greater than <paramref name="alphaThreshold"/> will be blended with this color during the encoding.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">Specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which a pixel is considered transparent.
            If 0, then the final composite image will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="imageData"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:EncodeHighColorImageAsync">EncodeHighColorImageAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EndEncodeHighColorImage(System.IAsyncResult)">EndEncodeHighColorImage</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.
            The encoding itself cannot be parallelized. The <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> setting affects only some processing steps if the size of a layer exceeds a threshold.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeHighColorImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte)">EncodeHighColorImage</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EndEncodeHighColorImage(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeHighColorImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Threading.AsyncConfig)">BeginEncodeHighColorImage</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:EncodeHighColorImageAsync">EncodeHighColorImageAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.AnimationFramesSizeHandling">
            <summary>
            Represents the strategy to be used with frames of different sizes.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AnimationFramesSizeHandling.ErrorIfDiffers">
            <summary>
            Specifies that if an input frame has a different size, then an exception should be thrown.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AnimationFramesSizeHandling.Center">
            <summary>
            Specifies that smaller or larger frames should be centered. Possibly exceeding areas will be clipped.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AnimationFramesSizeHandling.Resize">
            <summary>
            Specifies that frames should be resized to the actual size of the animation.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.AnimationMode">
            <summary>
            Represents the looping mode of an animation.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AnimationMode.PingPong">
            <summary>
            Specifies that added frames should be played back and forth.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AnimationMode.Repeat">
            <summary>
            Specifies that the animation should be looped.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AnimationMode.PlayOnce">
            <summary>
            Specifies that the animation should be played only once.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.GifCompressionMode">
            <summary>
            Represents the compression behavior of the <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> class.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifCompressionMode.Auto">
            <summary>
            Represents the automatic adaptive mode.
            The internally used code table might be regularly cleared.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifCompressionMode.DoNotClear">
            <summary>
            Indicates that once the internally used code table is full, it is not maintained anymore and all remaining codes
            are written using 12 bit code size. If codes so far can be re-used, then the result can be more compact than with <see cref="F:KGySoft.Drawing.Imaging.GifCompressionMode.Auto"/> mode;
            otherwise, the result can be even longer than in <see cref="F:KGySoft.Drawing.Imaging.GifCompressionMode.Uncompressed"/> mode.
            This option might not be tolerated by some decoders.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifCompressionMode.DoNotIncreaseBitSize">
            <summary>
            Indicates that all written codes must use the same bit size (3 to 9 bits, depending on palette size).
            It uses less memory but it may lead to poor compression, especially with palettes using no more than 4 colors.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifCompressionMode.Uncompressed">
            <summary>
            Indicates that the <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> should not use any compression.
            It uses the least memory but the result can be really long.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.GifGraphicDisposalMethod">
            <summary>
            Indicates the way in which the graphic is to be treated after being displayed.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifGraphicDisposalMethod.NotSpecified">
            <summary>
            No disposal specified. The decoder is not required to take any action.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifGraphicDisposalMethod.DoNotDispose">
            <summary>
            Do not dispose. The graphic is to be left in place.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifGraphicDisposalMethod.RestoreToBackground">
            <summary>
            Restore to background color. The area used by the graphic must be restored to the background color.
            If there is no global palette, or the corresponding image has transparent color, then the virtual screen
            is always cleared to transparent.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifGraphicDisposalMethod.RestoreToPrevious">
            <summary>
            Restore to previous. The decoder is required to restore the area overwritten by the graphic with what was there prior to rendering the graphic.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.AutoStrengthMode">
            <summary>
            Represents the behavior of ditherers with configurable strength when auto strength is used.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">OrderedDitherer.ConfigureStrength</see> method
            for more details and some examples regarding dithering strength.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AutoStrengthMode.Default">
            <summary>
            The auto strength mode is determined by the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.WorkingColorSpace"/> property
            of the corresponding quantizing session. if it returns <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Linear"/>, then the
            default strategy is <see cref="F:KGySoft.Drawing.Imaging.AutoStrengthMode.Interpolated"/>; otherwise, it is <see cref="F:KGySoft.Drawing.Imaging.AutoStrengthMode.Constant"/>.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AutoStrengthMode.Constant">
            <summary>
            Represents an auto strength strategy where strength is calibrated to a fix value that assures that neither the black nor the white colors
            will suffer from overdithering. This is the default auto strength strategy when quantizing in the sRGB color space and it usually works fine
            if palette entries are evenly distributed in the sRGB color space.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AutoStrengthMode.Interpolated">
            <summary>
            Represents an auto strength strategy where strength is calibrated both for white and black colors individually so none of them suffer from
            overdithering. During dithering the actual applied strength will be a dynamic value for each pixels using interpolation between
            the white and black strengths based on the pixel brightness. This is the default auto strength strategy when quantizing in the linear color space.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.KnownPixelFormat">
            <summary>
            Represents pixel formats with built-in support.
            For custom formats you can use the <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> type when applicable.
            </summary>
            <remarks>
            <note>The <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> enumeration contains all formats that
            the <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Imaging.PixelFormat" target="_blank">System.Drawing.Imaging.PixelFormat</a>
            enumeration also has, though some fields have different values and the matching names do not necessarily represent the same pixel layout either.
            For example, in this library wide formats, such as <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb"/>, use the full 16 bit per color channel range and the same gamma correction as the
            8-bit per channel formats, whereas <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Imaging.PixelFormat" target="_blank">System.Drawing.Imaging.PixelFormat.Format64bppArgb</a>
            might represent a different range or gamma correction, depending on the operating system.</note>
            </remarks>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Undefined">
            <summary>
            The pixel format is undefined.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format1bppIndexed">
            <summary>
            <para>Represents the indexed 1 bit per pixel format. The corresponding color palette can have up to 2 colors.</para>
            <para>Bit order: bits are filled up from the most significant bit to the least significant bit within a byte.</para>
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format4bppIndexed">
            <summary>
            <para>Represents the indexed 4 bit per pixel format. The corresponding color palette can have up to 16 colors.</para>
            <para>Bit order: even pixels occupy the high bits of a byte, whereas odd pixels are in the low bits.</para>
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format8bppIndexed">
            <summary>
            Represents the indexed 8 bit per pixel format. The corresponding color palette can have up to 256 colors.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale">
            <summary>
            Represents a 16 bit per pixel grayscale format. The color information specifies 65536 shades of gray.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppRgb555">
            <summary>
            <para>Represents a 16 bit per pixel RGB color format where red, green and blue channels use 5 bits per pixel and 1 bit is unused.</para>
            <para>Bit order from LSB to MSB: 5 blue, 5 green, 5 red bits and 1 unused bit. As a binary value a pixel can be specified as <c>0b_X_RRRRR_GGGGG_BBBBB</c>
            on little endian CPUs where <c>X</c> is the ignored most significant bit and <c>BBBBB</c> is the blue component at the least significant bits.</para>
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppRgb565">
            <summary>
            <para>Represents a 16 bit per pixel RGB color format where red, green and blue channels use 5, 6 and 5 bits per pixel, respectively.</para>
            <para>Bit order from LSB to MSB: 5 blue, 6 green and 5 red bits. As a binary value a pixel can be specified as <c>0b_RRRRR_GGGGGG_BBBBB</c>
            on little endian CPUs where <c>BBBBB</c> is the blue component at the least significant bits.</para>
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppArgb1555">
            <summary>
            <para>Represents a 16 bit per pixel ARGB color format where red, green and blue channels use 5 bits per pixel along with 1 bit for alpha.</para>
            <para>Bit order from LSB to MSB: 5 blue, 5 green, 5 red bits and 1 alpha bit. As a binary value a pixel can be specified as <c>0b_A_RRRRR_GGGGG_BBBBB</c>
            on little endian CPUs where <c>A</c> is the most significant bit and <c>BBBBB</c> is the blue component at the least significant bits.</para>
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format24bppRgb">
            <summary>
            <para>Represents a 24 bit per pixel RGB color format where red, green and blue channels use 8 bits per pixel.</para>
            <para>Bit order from LSB to MSB: 8 blue, 8 green and 8 red bits.</para>
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppRgb">
            <summary>
            <para>Represents a 32 bit per pixel RGB color format where red, green and blue channels use 8 bits per pixel. The remaining 8 bits are not used.</para>
            <para>Bit order from LSB to MSB: 8 blue, 8 green, 8 red and 8 unused bits. As a hex value a pixel can be specified as <c>0x_XX_RR_GG_BB</c>
            on little endian CPUs where <c>XX</c> is the unused most significant byte and <c>BB</c> is the blue component at the least significant byte.</para>
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb">
            <summary>
            <para>Represents a 32 bit per pixel ARGB color format where alpha, red, green and blue channels use 8 bits per pixel.</para>
            <para>Bit order from LSB to MSB: 8 blue, 8 green, 8 red and 8 alpha bits. As a hex value a pixel can be specified as <c>0x_AA_RR_GG_BB</c>
            on little endian CPUs where <c>BB</c> is the blue component at the least significant byte.</para>
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppPArgb">
            <summary>
            <para>Represents a 32 bit per pixel ARGB color format where alpha, red, green and blue channels use 8 bits per pixel.
            The red, green, and blue components are premultiplied, according to the alpha component.</para>
            <para>Bit order from LSB to MSB: 8 blue, 8 green, 8 red and 8 alpha bits. As a hex value a pixel can be specified as <c>0x_AA_RR_GG_BB</c>
            on little endian CPUs where <c>BB</c> is the blue component at the least significant byte.</para>
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb">
            <summary>
            <para>Represents a 48 bit per pixel RGB color format where red, green and blue channels use 16 bits per pixel.</para>
            <para>Bit order from LSB to MSB: 16 blue, 16 green and 16 red bits.</para>
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb">
            <summary>
            <para>Represents a 64 bit per pixel ARGB color format where alpha, red, green and blue channels use 16 bits per pixel.</para>
            <para>Bit order from LSB to MSB: 16 blue, 16 green, 16 red and 16 alpha bits. As a hex value a pixel can be specified as <c>0x_AAAA_RRRR_GGGG_BBBB</c>
            on little endian CPUs where <c>BBBB</c> is the blue component at the least significant couple of bytes.</para>
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppPArgb">
            <summary>
            <para>Represents a 64 bit per pixel ARGB color format where alpha, red, green and blue channels use 16 bits per pixel.
            The red, green, and blue components are premultiplied, according to the alpha component.</para>
            <para>Bit order from LSB to MSB: 16 blue, 16 green, 16 red and 16 alpha bits. As a hex value a pixel can be specified as <c>0x_AAAA_RRRR_GGGG_BBBB</c>
            on little endian CPUs where <c>BBBB</c> is the blue component at the least significant couple of bytes.</para>
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.WorkingColorSpace">
            <summary>
            Represents the preferred working color space for various operations such as alpha blending, measuring distance of colors, interpolation,
            quantizing, dithering and some other operations. The working color space can be specified independently from the color space of the actual pixel format
            of an <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance.
            </summary>
            <remarks>
            <para>The working color space can be specified at various places in KGy SOFT Drawing Libraries:
            <list type="bullet">
            <item>At the lowest level, you can specify it when blending colors manually, for example by
            the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.Blend(KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.WorkingColorSpace)">ColorExtensions.Blend</see> method.</item>
            <item><see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instances have a <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace"/> property, which can be set by the factory methods
            such as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData">BitmapDataFactory.CreateBitmapData</see> methods
            or by the <c>GetReadWriteBitmapData</c> methods for the technology-specific bitmap types.
            The <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace">IBitmapData.WorkingColorSpace</see> property is considered when setting pixels with transparency
            and the pixel format of the bitmap data does not support transparency so the color has to be blended with <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor">IBitmapData.BackColor</see>,
            or when bitmap data instances are drawn into each other.</item>
            <item>The <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class also has a <see cref="P:KGySoft.Drawing.Imaging.Palette.WorkingColorSpace"/> property, which is used by the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)"/>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)"/> methods.</item>
            <item>Quantizers also have their own working color space configuration. You can use the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.ConfigureColorSpace(KGySoft.Drawing.Imaging.WorkingColorSpace)">PredefinedColorsQuantizer.ConfigureColorSpace</see>
            and <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.ConfigureColorSpace(KGySoft.Drawing.Imaging.WorkingColorSpace)">OptimizedPaletteQuantizer.ConfigureColorSpace</see> methods to configure the
            working color space of the built-in quantizers of KGy SOFT Drawing Libraries.</item>
            <item>Ditherers may also have specific behavior for the different color spaces. The ditherer implementations in KGy SOFT Drawing Libraries
            always take the working color space of the corresponding quantizer exposed by the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.WorkingColorSpace">IQuantizingSession.WorkingColorSpace</see> property.</item>
            </list></para>
            <para>Most common color representations (just like the <see cref="T:System.Drawing.Color"/> or <see cref="T:KGySoft.Drawing.Imaging.Color32"/> types that use 8 bit color channels) use the sRGB color space
            that has gamma corrected color values. In a color type that uses the sRGB color space the consecutive RGB values don't represent linear light intensity increase.
            Instead, a gamma correction of approximately γ = 2.2 is applied to the actual light intensity, so it is adjusted for the perception of the human eye
            (in fact, the sRGB color space is linear for the darkest values and uses a γ = 2.4 correction above a threshold limit so the overall average is
            somewhere around 2.2). This representation helps distributing RGB values so that 50% represents the apparently half-bright tones:</para>
            <list type="table"><item><term>
            <div style="text-align:center;">
            <img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
            <br/>Grayscale color shades. The difference of RGB values between the neighboring shades is constant in the sRGB color space,
            resulting an apparently linear gradient with half-gray tones at the middle.</div>
            </term></item></list>
            <h2>Alpha Blending</h2>
            <para>Blending partially transparent (alpha) colors in the sRGB color space ends up in incorrect results, though it is not always obvious.
            The most apparent incorrect results are for colors that have disjunct RGB values, for which the result is typically too dark.</para>
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Blending in the sRGB color space</div></th>
            <th width="50%"><div style="text-align:center;">Blending in the linear color space</div></th></tr></thead>
            <tbody>
            <tr><td><div style="text-align:center;">
            <img src="../Help/Images/BlendingExampleSrgb.png" alt="Blending colored stripes in the sRGB color space"/>
            <br/>Result of blending colors in the sRGB color space. The vertical bars are opaque, whereas the horizontal ones have 50% transparency.
            Blending colors with disjunct RGB components often produce too dark results.</div></td>
            <td><div style="text-align:center;">
            <img src="../Help/Images/BlendingExampleLinear.png" alt="Blending colored stripes in the linear color space"/>
            <br/>Result of blending colors in the linear color space. The result seems much more natural.
            Note that horizontal bars still have 50% transparency, though they seem brighter now.</div></td>
            </tr>
            <tr><td colspan="2"><div style="text-align:center;">
            <img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient. As the image contains transparency the blending with the background is performed by your browser.
            <br/>(Side note: just like at the grayscale gradient above, the color gradients also have constant RGB differences between the
            horizontal neighboring pixels in the sRGB color space. The examples below are different only in alpha blending
            but all of them have the same sRGB color gradients.)</div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <img src="../Help/Images/AlphaGradientRgb888White.png" alt="Color hues blended with white background in the sRGB color space"/>
            <br/>Color hues blended with white background in the sRGB color space. If the alpha image in the row above looks like this,
            then your browser blends colors in the sRGB color space.</div></td>
            <td><div style="text-align:center;">
            <img src="../Help/Images/AlphaGradientRgb888WhiteLinear.png" alt="Color hues blended with white background in the linear color space"/>
            <br/>Color hues blended with white background in the linear color space.</div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <img src="../Help/Images/AlphaGradientRgb888Black.png" alt="Color hues blended with black background in the sRGB color space"/>
            <br/>Color hues blended with black background in the sRGB color space.</div></td>
            <td><div style="text-align:center;">
            <img src="../Help/Images/AlphaGradientRgb888BlackLinear.png" alt="Color hues blended with black background in the linear color space"/>
            <br/>Color hues blended with black background in the linear color space. Note that much more colors are visible in the darker regions.</div></td>
            </tr>
            </tbody></table>
            <para>To blend sRGB colors correctly, the source colors must be converted to the linear color space first,
            and then the blended result has to be converted back to the sRGB color space. This has an additional cost,
            which is often omitted even by professional image processing applications, libraries and even by web browsers.</para>
            <note>Even though blending in the sRGB color space is not quite correct, some pixel formats are optimized exactly for doing that.
            With premultiplied sRGB pixel formats sRGB blending is very fast, and forcing color correct blending is particularly expensive.
            Use such pixel formats only when it is really justified, for example when this is the fastest or default format for
            a rendering engine (which is almost always the case, including GDI+, WPF, UWP, WinUI, Skia and many other engines).
            If you want to use color correct blending the best if you use pixel formats with linear gamma (indicated by
            the <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.LinearGamma"/> property), or for sRGB pixel formats try to avoid premultiplied formats
            to prevent the overhead of unnecessary conversions back and forth.</note>
            <h2>Quantizing</h2>
            <para>When reducing the number of colors to some specified set of colors (either by using a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> of predefined entries or some custom
            quantizer function) measuring the distance between colors may return different results depending on the used color space.
            Looking up for the nearest colors in the sRGB color space tends to turn the darker shades too bright, though
            the more colors the quantizer uses the less noticeable the difference is.</para>
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Quantizing in the sRGB color space</div></th>
            <th width="50%"><div style="text-align:center;">Quantizing in the linear color space</div></th></tr></thead>
            <tbody>
            <tr><td colspan="2"><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarring.png" alt="Test image &quot;Girl with a Pearl Earring&quot;"/>
            <br/>Original test image "Girl with a Pearl Earring"</div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringBWSrgb.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with back and white palette, quantized in the sRGB color space"/>
            <br/>Quantizing by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white</see> palette in the sRGB color space.</div></td>
            <td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringBWLinear.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with back and white palette, quantized in the linear color space"/>
            <br/>Quantizing by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white</see> palette in the linear color space.</div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringRgb111Srgb.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with RGB111 palette, quantized in the sRGB color space"/>
            <br/>Quantizing by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)">RGB111</see> palette in the sRGB color space.</div></td>
            <td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringRgb111Linear.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with RGB111 palette, quantized in the linear color space"/>
            <br/>Quantizing by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)">RGB111</see> palette in the linear color space.</div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringDefault8bppSrgb.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with system default 8 BPP palette, quantized in the sRGB color space"/>
            <br/>Quantizing by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP</see> palette in the sRGB color space.
            For more colors the difference is much less noticeable but the background is slightly brighter than in the original image.</div></td>
            <td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringDefault8bppLinear.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with system default 8 BPP  palette, quantized in the linear color space"/>
            <br/>Quantizing by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP</see> palette in the linear color space.
            For more colors the difference is much less noticeable but the background is slightly darker than in the sRGB result.</div></td>
            </tr>
            </tbody></table>
            <h2>Dithering</h2>
            <para>When quantizing is combined with dithering, the ditherers may also respect the working color space of the quantizers. Similarly to the non-dithered results,
            the difference between working in the sRGB or linear color space gets less and less noticeable with using more and more colors.</para>
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Quantizing with dithering in the sRGB color space</div></th>
            <th width="50%"><div style="text-align:center;">Quantizing with dithering in the linear color space</div></th></tr></thead>
            <tbody>
            <tr><td colspan="2"><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarring.png" alt="Test image &quot;Girl with a Pearl Earring&quot;"/>
            <br/>Original test image "Girl with a Pearl Earring"</div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringBWDitheredB8Srgb.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with back and white palette, quantized in the sRGB color space using Bayer 8x8 dithering"/>
            <br/>Quantizing by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white</see> palette in the sRGB color space using <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering.
            The result is too bright. Please note though that if your browser resizes the image in the sRGB color space it might appear correct, in which case make sure you open it in a new tab and set the zoom to 100%.</div></td>
            <td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringBWDitheredB8Linear.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with back and white palette, quantized in the linear color space using Bayer 8x8 dithering"/>
            <br/>Quantizing by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white</see> palette in the linear color space using <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering.
            The result has correct brightness. Please note though that if your browser resizes the image in the sRGB color space it might appear too dark, in which case make sure you open it in a new tab and set the zoom to 100%.</div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringRgb111DitheredFSSrgb.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with RGB111 palette, quantized in the sRGB color space using Floyd-Steinberg dithering"/>
            <br/>Quantizing by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)">RGB111</see> palette in the sRGB color space using <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering.
            The result is too bright. Please note though that if your browser resizes the image in the sRGB color space it might appear correct, in which case make sure you open it in a new tab and set the zoom to 100%.</div></td>
            <td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringRgb111DitheredFSLinear.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with RGB111 palette, quantized in the linear color space using Floyd-Steinberg dithering"/>
            <br/>Quantizing by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)">RGB111</see> palette in the linear color space using <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering.
            The result has correct brightness. Please note though that if your browser resizes the image in the sRGB color space it might appear too dark, in which case make sure you open it in a new tab and set the zoom to 100%.</div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringDefault8bppDitheredFSSrgb.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with system default 8 BPP palette, quantized in the sRGB color space using Floyd-Steinberg dithering"/>
            <br/>Quantizing by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP</see> palette in the sRGB color space using <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering.
            The background is slightly brighter than in the original image but due to the number of colors the difference is barely noticeable.</div></td>
            <td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringDefault8bppDitheredFSLinear.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with system default 8 BPP  palette, quantized in the linear color space using Floyd-Steinberg dithering"/>
            <br/>Quantizing by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP</see> palette in the linear color space using <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering.
            Due to the number of colors the difference is barely noticeable between the sRGB and the linear result.</div></td>
            </tr>
            </tbody></table>
            <h2>Resizing</h2>
            <para>When resizing images with some interpolation the working color space may also affect the result. When resizing true color images the difference might be negligible;
            however, if the source image has only a few colors with high frequency areas (typically dithered images as above) the working color space used for the resizing makes a noticeable difference.</para>
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Resizing in the sRGB color space</div></th>
            <th width="50%"><div style="text-align:center;">Resizing in the linear color space</div></th></tr></thead>
            <tbody>
            <tr><td colspan="2"><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringRgb111DitheredB8Linear.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with RGB111 palette, quantized in the linear color space using Bayer 8x8 dithering"/>
            <br/>Test image "Girl with a Pearl Earring" quantized by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)">RGB111</see> palette in the linear color space
            using <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering.</div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringRgb111ResizedSrgb.png" alt="Quantized test image &quot;Girl with a Pearl Earring&quot; resized in the sRGB color space"/>
            <br/>Resizing the quantized image with bicubic interpolation in the sRGB color space. The result is too dark.
            Ironically, if the source image would have been quantized in the sRGB color space so it was too bright, then the resized result would seem quite correct.</div></td>
            <td><div style="text-align:center;">
            <img src="../Help/Images/GirlWithAPearlEarringRgb111ResizedLinear.png" alt="Quantized test image &quot;Girl with a Pearl Earring&quot; resized in the linear color space"/>
            <br/>Resizing the quantized image with bicubic interpolation in the linear color space. The result preserved the original brightness.</div></td>
            </tr>
            </tbody></table>
            </remarks>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default">
            <summary>
            Represents the default color space mode most optimal for the current operation or actual color space.
            When working with <see cref="T:KGySoft.Drawing.Imaging.Palette"/> entries or an <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> the default option always chooses
            the sRGB color space. When working with an <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> directly, then the selected working color space
            depends on the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the target bitmap data.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Linear">
            <summary>
            Indicates that the linear color space should be used when performing operations on colors.
            If the actual color space of the source is sRGB, then the operation has some overhead due to the conversions back and forth.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Srgb">
            <summary>
            Indicates that the sRGB color space should be used when performing operations on colors.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.BitmapDataExtensions">
            <summary>
            Provides extension methods for the <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>, <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            and <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> types.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetPreferredColorSpace(KGySoft.Drawing.Imaging.IBitmapData)">
            <summary>
            Gets a non-default <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> that can be used when working with the specified <paramref name="bitmapData"/>.
            </summary>
            <param name="bitmapData">An <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> to determine the result. If <see langword="null"/>, then <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Srgb"/> is returned.</param>
            <returns>A non-default <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> that can be used when working with the specified <paramref name="bitmapData"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetPreferredColorSpaceOrDefault(KGySoft.Drawing.Imaging.IBitmapData)">
            <summary>
            Gets non-default color space if set, or sets linear if pixel format has linear gamma.
            Unlike <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetPreferredColorSpace(KGySoft.Drawing.Imaging.IBitmapData)"/>, it can return Default.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData)">
            <summary>
            Gets the clone of the specified <paramref name="source"/> with identical size.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:CloneAsync(IReadableBitmapData,TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Gets the clone of the specified <paramref name="source"/> with identical size.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="workingColorSpace">Specifies the value of the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace"/> property of the cloned instance.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:CloneAsync(IReadableBitmapData,TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle)">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/>.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:CloneAsync(IReadableBitmapData, Rectangle, TaskConfig?)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Gets the clone of the specified <paramref name="source"/> with identical size and the specified <paramref name="pixelFormat"/> and color settings.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="backColor">If <paramref name="pixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="pixelFormat"/> can represent only single-bit alpha or <paramref name="pixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, Color32, byte, Rectangle?, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This overload automatically quantizes colors if <paramref name="pixelFormat"/> represents a narrower set of colors than <paramref name="source"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.
            To use a custom quantizer use the overloads with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> parameter.</para>
            <para>Color depth of wide-color formats (<see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If they are different, then colors might be quantized to 32bpp ones during the operation.</para>
            <para>If <paramref name="pixelFormat"/> represents an indexed format, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>. To specify the desired palette of the result use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette)"/> overload.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat_1.htm">ConvertPixelFormat(Image, PixelFormat, Color, byte)</a> extension method
            for some examples. The <a href="https://docs.kgysoft.net/drawing/html/Overload_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat</a> extensions work the same way
            for <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Gets the clone of the specified <paramref name="source"/> with identical size and the specified <paramref name="pixelFormat"/> and color settings.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="workingColorSpace">Specifies the value of the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace"/> property of the cloned instance
            and affects the possible blending operations during the cloning.</param>
            <param name="backColor">If <paramref name="pixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="pixelFormat"/> can represent only single-bit alpha or <paramref name="pixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, Color32, byte, Rectangle?, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This overload automatically quantizes colors if <paramref name="pixelFormat"/> represents a narrower set of colors than <paramref name="source"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.
            To use a custom quantizer use the overloads with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> parameter.</para>
            <para>Color depth of wide-color formats (<see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If they are different, then colors might be quantized to 32bpp ones during the operation.</para>
            <para>If <paramref name="pixelFormat"/> represents an indexed format, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>. To specify the desired palette of the result use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette)"/> overload.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat_1.htm">ConvertPixelFormat(Image, PixelFormat, Color, byte)</a> extension method
            for some examples. The <a href="https://docs.kgysoft.net/drawing/html/Overload_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat</a> extensions work the same way
            for <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Gets the clone of the specified <paramref name="source"/> with identical size and the specified <paramref name="pixelFormat"/> and <paramref name="palette"/>.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="palette">If <paramref name="pixelFormat"/> is an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.
            If <see langword="null"/>, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, Palette, Rectangle?, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This overload automatically quantizes colors if <paramref name="pixelFormat"/> represents a narrower set of colors than <paramref name="source"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.
            To use a custom quantizer use the overloads with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> parameter.</para>
            <para>Color depth of wide-color formats (<see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If they are different, then colors might be quantized to 32bpp ones during the operation.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat_2.htm">ConvertPixelFormat(Image, PixelFormat, Color[], Color, byte)</a> extension method
            for some examples. The <a href="https://docs.kgysoft.net/drawing/html/Overload_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat</a> extensions work the same way
            for <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="palette"/> contains too many colors for the specified <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and color settings.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="backColor">If <paramref name="pixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="pixelFormat"/> can represent only single-bit alpha or <paramref name="pixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, Color32, byte, Rectangle?, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This overload automatically quantizes colors if <paramref name="pixelFormat"/> represents a narrower set of colors than <paramref name="source"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.
            To use a custom quantizer use the overloads with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> parameter.</para>
            <para>Color depth of wide-color formats (<see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If they are different, then colors might be quantized to 32bpp ones during the operation.</para>
            <para>If <paramref name="pixelFormat"/> represents an indexed format, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>. To specify the desired palette of the result use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette)"/> overload.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat_2.htm">ConvertPixelFormat(Image, PixelFormat, Color[], Color, byte)</a> extension method
            for some examples. The <a href="https://docs.kgysoft.net/drawing/html/Overload_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat</a> extensions work the same way
            for <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and color settings.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="workingColorSpace">Specifies the value of the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace"/> property of the cloned instance
            and affects the possible blending operations during the cloning.</param>
            <param name="backColor">If <paramref name="pixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="pixelFormat"/> can represent only single-bit alpha or <paramref name="pixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, Color32, byte, Rectangle?, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This overload automatically quantizes colors if <paramref name="pixelFormat"/> represents a narrower set of colors than <paramref name="source"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.
            To use a custom quantizer use the overloads with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> parameter.</para>
            <para>Color depth of wide-color formats (<see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If they are different, then colors might be quantized to 32bpp ones during the operation.</para>
            <para>If <paramref name="pixelFormat"/> represents an indexed format, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>. To specify the desired palette of the result use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette)"/> overload.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat_2.htm">ConvertPixelFormat(Image, PixelFormat, Color[], Color, byte)</a> extension method
            for some examples. The <a href="https://docs.kgysoft.net/drawing/html/Overload_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat</a> extensions work the same way
            for <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and <paramref name="palette"/>.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="palette">If <paramref name="pixelFormat"/> is an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.
            If <see langword="null"/>, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, Palette, Rectangle?, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This overload automatically quantizes colors if <paramref name="pixelFormat"/> represents a narrower set of colors than <paramref name="source"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.
            To use a custom quantizer use the overloads with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> parameter.</para>
            <para>Color depth of wide-color formats (<see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If they are different, then colors might be quantized to 32bpp ones during the operation.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat_2.htm">ConvertPixelFormat(Image, PixelFormat, Color[], Color, byte)</a> extension method
            for some examples. The <a href="https://docs.kgysoft.net/drawing/html/Overload_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat</a> extensions work the same way
            for <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="palette"/> contains too many colors for the specified <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Gets the clone of the specified <paramref name="source"/> with identical size and the specified <paramref name="pixelFormat"/>, using an optional <paramref name="quantizer"/> and <paramref name="ditherer"/>.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors of the result.
            If <see langword="null"/> and <paramref name="pixelFormat"/> is an indexed format, then a default palette and quantization logic will be used.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="pixelFormat"/> represents an at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, IQuantizer, IDitherer, Rectangle?, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If <paramref name="pixelFormat"/> can represent a narrower set of colors, then the result will be automatically quantized to its color space,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="pixelFormat"/> can represent,
            then the result will eventually be quantized to <paramref name="pixelFormat"/>, though the result may have a poorer quality than expected.</para>
            <para>Color depth of wide-color formats (<see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats if there is no <paramref name="quantizer"/> specified. If pixel formats are different, then colors might be quantized to 32bpp ones during the operation.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat(Image, PixelFormat, IQuantizer?, IDitherer?)</a> extension method
            for some examples. The <a href="https://docs.kgysoft.net/drawing/html/Overload_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat</a> extensions work the same way
            for <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="quantizer"/> uses a palette with too many colors for the specified <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Gets the clone of the specified <paramref name="source"/> with identical size and the specified <paramref name="pixelFormat"/>, using an optional <paramref name="ditherer"/>.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="pixelFormat"/> represents an at least 24 bits-per-pixel size.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, IQuantizer, IDitherer, Rectangle?, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If <paramref name="pixelFormat"/> can represent a narrower set of colors, then the result will be automatically quantized to its color space.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            <para>Color depth of wide-color formats (<see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If pixel formats are different, then colors might be quantized to 32bpp ones during the operation.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat(Image, PixelFormat, IQuantizer?, IDitherer?)</a>extension method
            for some examples. The <a href="https://docs.kgysoft.net/drawing/html/Overload_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat</a> extensions work the same way
            for <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/>, using an optional <paramref name="ditherer"/>.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="pixelFormat"/> represents an at least 24 bits-per-pixel size.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, IQuantizer, IDitherer, Rectangle?, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If <paramref name="pixelFormat"/> can represent a narrower set of colors, then the result will be automatically quantized to its color space.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            <para>Color depth of wide-color formats (<see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If pixel formats are different, then colors might be quantized to 32bpp ones during the operation.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat(Image, PixelFormat, IQuantizer?, IDitherer?)</a> extension method
            for some examples. The <a href="https://docs.kgysoft.net/drawing/html/Overload_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat</a> extensions work the same way
            for <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/>, using an optional <paramref name="quantizer"/> and <paramref name="ditherer"/>.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors of the result.
            If <see langword="null"/> and <paramref name="pixelFormat"/> is an indexed format, then a default palette and quantization logic will be used.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="pixelFormat"/> represents an at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, IQuantizer, IDitherer, Rectangle?, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If <paramref name="pixelFormat"/> can represent a narrower set of colors, then the result will be automatically quantized to its color space,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="pixelFormat"/> can represent,
            then the result will eventually be quantized to <paramref name="pixelFormat"/>, though the result may have a poorer quality than expected.</para>
            <para>Color depth of wide-color formats (<see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats if there is no <paramref name="quantizer"/> specified. If pixel formats are different, then colors might be quantized to 32bpp ones during the operation.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat(Image, PixelFormat, IQuantizer?, IDitherer?)</a> extension method
            for some examples. The <a href="https://docs.kgysoft.net/drawing/html/Overload_KGySoft_Drawing_ImageExtensions_ConvertPixelFormat.htm">ConvertPixelFormat</a> extensions work the same way
            for <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Image" target="_blank">Image</a>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="quantizer"/> uses a palette with too many colors for the specified <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext,System.Nullable{System.Drawing.Rectangle})">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> inside of an already created, possibly asynchronous <paramref name="context"/>.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="context">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncContext.htm">IAsyncContext</a> instance
            that contains information for asynchronous processing about the current operation.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>, or <see langword="null"/>, if the operation was canceled.</returns>
            <remarks>
            <para>This method blocks the caller thread but if <paramref name="context"/> belongs to an async top level method, then the execution may already run
            on a pool thread. Degree of parallelism, the ability of cancellation and reporting progress depend on how these were configured at the top level method.</para>
            <para>When reporting progress, this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_AsyncHelper.htm">AsyncHelper</a>
            class for details about how to create a context for possibly async top level methods.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle})">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and color settings
            inside of an already created, possibly asynchronous <paramref name="context"/>.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="context">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncContext.htm">IAsyncContext</a> instance
            that contains information for asynchronous processing about the current operation.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="backColor">If <paramref name="pixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="pixelFormat"/> can represent only single-bit alpha or <paramref name="pixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned,
            or <see langword="null"/> to clone the whole <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>, or <see langword="null"/>, if the operation was canceled.</returns>
            <remarks>
            <para>This method blocks the caller thread but if <paramref name="context"/> belongs to an async top level method, then the execution may already run
            on a pool thread. Degree of parallelism, the ability of cancellation and reporting progress depend on how these were configured at the top level method.</para>
            <para>When reporting progress, this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_AsyncHelper.htm">AsyncHelper</a>
            class for details about how to create a context for possibly async top level methods.</note>
            <note>See the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for more details about the other parameters.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle})">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and color settings
            inside of an already created, possibly asynchronous <paramref name="context"/>.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="context">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncContext.htm">IAsyncContext</a> instance
            that contains information for asynchronous processing about the current operation.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="workingColorSpace">Specifies the value of the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace"/> property of the cloned instance
            and affects the possible blending operations during the cloning.</param>
            <param name="backColor">If <paramref name="pixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="pixelFormat"/> can represent only single-bit alpha or <paramref name="pixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned,
            or <see langword="null"/> to clone the whole <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>, or <see langword="null"/>, if the operation was canceled.</returns>
            <remarks>
            <para>This method blocks the caller thread but if <paramref name="context"/> belongs to an async top level method, then the execution may already run
            on a pool thread. Degree of parallelism, the ability of cancellation and reporting progress depend on how these were configured at the top level method.</para>
            <para>When reporting progress, this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_AsyncHelper.htm">AsyncHelper</a>
            class for details about how to create a context for possibly async top level methods.</note>
            <note>See the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> overload for more details about the other parameters.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette,System.Nullable{System.Drawing.Rectangle})">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and <paramref name="palette"/>
            inside of an already created, possibly asynchronous <paramref name="context"/>.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="context">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncContext.htm">IAsyncContext</a> instance
            that contains information for asynchronous processing about the current operation.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="palette">If <paramref name="pixelFormat"/> is an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.
            If <see langword="null"/>, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned,
            or <see langword="null"/> to clone the whole <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>, or <see langword="null"/>, if the operation was canceled.</returns>
            <remarks>
            <para>This method blocks the caller thread but if <paramref name="context"/> belongs to an async top level method, then the execution may already run
            on a pool thread. Degree of parallelism, the ability of cancellation and reporting progress depend on how these were configured at the top level method.</para>
            <para>When reporting progress, this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_AsyncHelper.htm">AsyncHelper</a>
            class for details about how to create a context for possibly async top level methods.</note>
            <note>See the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette)"/> overload for more details about the other parameters.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="palette"/> contains too many colors for the specified <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle})">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/>, using an optional <paramref name="quantizer"/> and <paramref name="ditherer"/>
            inside of an already created, possibly asynchronous <paramref name="context"/>.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="context">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncContext.htm">IAsyncContext</a> instance
            that contains information for asynchronous processing about the current operation.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors of the result.
            If <see langword="null"/> and <paramref name="pixelFormat"/> is an indexed format, then a default palette and quantization logic will be used.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="pixelFormat"/> represents an at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned,
            or <see langword="null"/> to clone the whole <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>, or <see langword="null"/>, if the operation was canceled.</returns>
            <remarks>
            <para>This method blocks the caller thread but if <paramref name="context"/> belongs to an async top level method, then the execution may already run
            on a pool thread. Degree of parallelism, the ability of cancellation and reporting progress depend on how these were configured at the top level method.</para>
            <para>When reporting progress, this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_AsyncHelper.htm">AsyncHelper</a>
            class for details about how to create a context for possibly async top level methods.</note>
            <note>See the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload for more details about the other parameters.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="quantizer"/> uses a palette with too many colors for the specified <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to clone the specified <paramref name="source"/> with identical size asynchronously.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:CloneAsync(IReadableBitmapData, TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClone(System.IAsyncResult)">EndClone</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to clone the specified <paramref name="source"/> with identical size asynchronously.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="workingColorSpace">Specifies the value of the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace"/> property of the cloned instance.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:CloneAsync(IReadableBitmapData, TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClone(System.IAsyncResult)">EndClone</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to clone the specified portion of the specified <paramref name="source"/> asynchronously.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:CloneAsync(IReadableBitmapData, Rectangle, TaskConfig?)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClone(System.IAsyncResult)">EndClone</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to clone the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and color settings asynchronously.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="backColor">If <paramref name="pixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="pixelFormat"/> can represent only single-bit alpha or <paramref name="pixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned, or <see langword="null"/> to clone the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, Color32, byte, Rectangle?, TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClone(System.IAsyncResult)">EndClone</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to clone the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and color settings asynchronously.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="workingColorSpace">Specifies the value of the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace"/> property of the cloned instance
            and affects the possible blending operations during the cloning.</param>
            <param name="backColor">If <paramref name="pixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="pixelFormat"/> can represent only single-bit alpha or <paramref name="pixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned, or <see langword="null"/> to clone the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, Color32, byte, Rectangle?, TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClone(System.IAsyncResult)">EndClone</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to clone the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and <paramref name="palette"/> asynchronously.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="palette">If <paramref name="pixelFormat"/> is an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.
            If <see langword="null"/>, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned, or <see langword="null"/> to clone the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, Palette, Rectangle?, TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClone(System.IAsyncResult)">EndClone</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Palette)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="palette"/> contains too many colors for the specified <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to clone the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/>, using an optional <paramref name="quantizer"/> and <paramref name="ditherer"/> asynchronously.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors of the result.
            If <see langword="null"/> and <paramref name="pixelFormat"/> is an indexed format, then a default palette and quantization logic will be used.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="pixelFormat"/> represents an at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned, or <see langword="null"/> to clone the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:CloneAsync(IReadableBitmapData, KnownPixelFormat, Palette, Rectangle?, TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClone(System.IAsyncResult)">EndClone</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="quantizer"/> uses a palette with too many colors for the specified <paramref name="pixelFormat"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClone(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone">BeginClone</see> methods to complete.
            In .NET Framework 4.0 and above you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync">CloneAsync</see> methods instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that is the result of the operation,
            or <see langword="null"/>, if the operation was canceled and the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_ThrowIfCanceled.htm">ThrowIfCanceled</a> property of the <c>asyncConfig</c> parameter was <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Copies the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            without scaling and blending. This method works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            To draw a bitmap data into another one with blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto">DrawInto</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be copied into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> into which <paramref name="source"/> should be copied.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Point.Empty">Point.Empty</see>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used. If not specified, then the copying operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginCopyTo</see>
            or <see cref="!:CopyToAsync">CopyToAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The copied area is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually be quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Point,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Copies the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            without scaling and blending. This method works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            To draw a bitmap data into another one with blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto">DrawInto</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be copied into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> into which <paramref name="source"/> should be copied.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginCopyTo</see>
            or <see cref="!:CopyToAsync">CopyToAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The copied area is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Copies the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            without scaling and blending. This method works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            To draw a bitmap data into another one with blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto">DrawInto</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be copied into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> into which <paramref name="source"/> should be copied.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be copied into the <paramref name="target"/>.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginCopyTo</see>
            or <see cref="!:CopyToAsync">CopyToAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The copied area is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Copies the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            without scaling and blending. This method works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            To draw a bitmap data into another one with blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto">DrawInto</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be copied into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> into which <paramref name="source"/> should be copied.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be copied into the <paramref name="target"/>.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used. If not specified, then the copying operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginCopyTo</see>
            or <see cref="!:CopyToAsync">CopyToAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The copied area is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually be quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Threading.IAsyncContext,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Copies the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            without scaling and blending, inside of an already created, possibly asynchronous <paramref name="context"/>.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be copied into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> into which <paramref name="source"/> should be copied.</param>
            <param name="context">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncContext.htm">IAsyncContext</a> instance
            that contains information for asynchronous processing about the current operation.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be copied into the <paramref name="target"/>.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used. If not specified, then the copying operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns><see langword="true"/>, if the operation completed successfully.
            <br/><see langword="false"/>, if the operation has been canceled.</returns>
            <remarks>
            <para>This method blocks the caller thread but if <paramref name="context"/> belongs to an async top level method, then the execution may already run
            on a pool thread. Degree of parallelism, the ability of cancellation and reporting progress depend on how these were configured at the top level method.</para>
            <para>When reporting progress, this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_AsyncHelper.htm">AsyncHelper</a>
            class for details about how to create a context for possibly async top level methods.</note>
            <note>See the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload for more details about the other parameters.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to copy the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> asynchronously,
            without scaling and blending. This method works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            To draw a bitmap data into another one with blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto">BeginDrawInto</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be copied into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> into which <paramref name="source"/> should be copied.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be copied, or <see langword="null"/> to copy the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="targetLocation">A <see cref="T:System.Drawing.Point"/> that specifies the target location, or <see langword="null"/> top copy the <paramref name="source"/> to the top-left corner of the <paramref name="target"/>. Target size will be always the same as the source size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used. If not specified, then the copying operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:CopyToAsync">CopyToAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndCopyTo(System.IAsyncResult)">EndCopyTo</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndCopyTo(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginCopyTo</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:CopyToAsync">CopyToAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            without scaling, using blending. This method always preserves the source size in pixels, works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            For scaling use the overloads with <c>targetRectangle</c> and <see cref="T:KGySoft.Drawing.ScalingMode"/> parameters.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Point.Empty">Point.Empty</see>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:DrawIntoAsync(IReadableBitmapData, IReadWriteBitmapData, Rectangle?, Point?, IQuantizer, IDitherer, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The image to be drawn is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually be quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Point,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            without scaling, using blending. This method always preserves the source size in pixels, works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            For scaling use the overloads with <c>targetRectangle</c> and <see cref="T:KGySoft.Drawing.ScalingMode"/> parameters.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:DrawIntoAsync(IReadableBitmapData, IReadWriteBitmapData, Rectangle?, Point?, IQuantizer, IDitherer, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The image to be drawn is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            without scaling, using blending. This method always preserves the source size in pixels, works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            For scaling use the overloads with <c>targetRectangle</c> and <see cref="T:KGySoft.Drawing.ScalingMode"/> parameters.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:DrawIntoAsync(IReadableBitmapData, IReadWriteBitmapData, Rectangle?, Point?, IQuantizer, IDitherer, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The image to be drawn is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            without scaling, using blending. This method always preserves the source size in pixels, works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            For scaling use the overloads with <c>targetRectangle</c> and <see cref="T:KGySoft.Drawing.ScalingMode"/> parameters.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:DrawIntoAsync(IReadableBitmapData, IReadWriteBitmapData, Rectangle?, Point?, IQuantizer, IDitherer, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The image to be drawn is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually be quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Threading.IAsyncContext,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            without scaling, using blending inside of an already created, possibly asynchronous <paramref name="context"/>.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="context">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncContext.htm">IAsyncContext</a> instance
            that contains information for asynchronous processing about the current operation.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns><see langword="true"/>, if the operation completed successfully.
            <br/><see langword="false"/>, if the operation has been canceled.</returns>
            <remarks>
            <para>This method blocks the caller thread but if <paramref name="context"/> belongs to an async top level method, then the execution may already run
            on a pool thread. Degree of parallelism, the ability of cancellation and reporting progress depend on how these were configured at the top level method.</para>
            <para>When reporting progress, this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_AsyncHelper.htm">AsyncHelper</a>
            class for details about how to create a context for possibly async top level methods.</note>
            <note>See the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload for more details about the other parameters.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to draw the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> asynchronously,
            without scaling, using blending. This method always preserves the source size in pixels, works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            For scaling use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Threading.AsyncConfig)"/> overload.
            To copy a bitmap data into another one without blending use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginCopyTo</see> method instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>, or <see langword="null"/> to draw the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="targetLocation">A <see cref="T:System.Drawing.Point"/> that specifies the target location, or <see langword="null"/> top draw the <paramref name="source"/> to the top-left corner of the <paramref name="target"/>. Target size will be always the same as the source size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:DrawIntoAsync(IReadableBitmapData, IReadWriteBitmapData, Rectangle?, Point?, IQuantizer, IDitherer, TaskConfig)"/> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndDrawInto(System.IAsyncResult)">EndDrawInto</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndDrawInto(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto">BeginDrawInto</see> methods to complete.
            In .NET Framework 4.0 and above you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync">DrawIntoAsync</see> methods instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            using scaling and blending. This method works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:DrawIntoAsync(IReadableBitmapData, IReadWriteBitmapData, Rectangle, Rectangle, IQuantizer, IDitherer, ScalingMode, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="source"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="targetRectangle"/> exceeds bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="source"/> and <paramref name="targetRectangle"/> have different sizes.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods (without scaling).</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually be quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            using scaling and blending. This method works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:DrawIntoAsync(IReadableBitmapData, IReadWriteBitmapData, Rectangle, Rectangle, IQuantizer, IDitherer, ScalingMode, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="source"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="targetRectangle"/> exceeds bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="source"/> and <paramref name="targetRectangle"/> have different sizes.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods (without scaling).</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            using scaling and blending. This method works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:DrawIntoAsync(IReadableBitmapData, IReadWriteBitmapData, Rectangle, Rectangle, IQuantizer, IDitherer, ScalingMode, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="source"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="targetRectangle"/> exceeds bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="source"/> and <paramref name="targetRectangle"/> have different sizes.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods (without scaling).</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            using scaling and blending. This method works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:DrawIntoAsync(IReadableBitmapData, IReadWriteBitmapData, Rectangle, Rectangle, IQuantizer, IDitherer, ScalingMode, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="sourceRectangle"/> or <paramref name="targetRectangle"/> exceed bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> are different.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods (without scaling).</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            using scaling and blending. This method works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>
            format has at least 24 bits-per-pixel size.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:DrawIntoAsync(IReadableBitmapData, IReadWriteBitmapData, Rectangle, Rectangle, IQuantizer, IDitherer, ScalingMode, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="sourceRectangle"/> or <paramref name="targetRectangle"/> exceed bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> are different.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods (without scaling).</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            using scaling and blending. This method works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:DrawIntoAsync(IReadableBitmapData, IReadWriteBitmapData, Rectangle, Rectangle, IQuantizer, IDitherer, ScalingMode, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="sourceRectangle"/> or <paramref name="targetRectangle"/> exceed bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> are different.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods (without scaling).</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually be quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Threading.IAsyncContext,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            using scaling and blending, inside of an already created, possibly asynchronous <paramref name="context"/>.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="context">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncContext.htm">IAsyncContext</a> instance
            that contains information for asynchronous processing about the current operation.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <returns><see langword="true"/>, if the operation completed successfully.
            <br/><see langword="false"/>, if the operation has been canceled.</returns>
            <remarks>
            <para>This method blocks the caller thread but if <paramref name="context"/> belongs to an async top level method, then the execution may already run
            on a pool thread. Degree of parallelism, the ability of cancellation and reporting progress depend on how these were configured at the top level method.</para>
            <para>When reporting progress, this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_AsyncHelper.htm">AsyncHelper</a>
            class for details about how to create a context for possibly async top level methods.</note>
            <note>See the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)"/> overload for more details about the other parameters.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to draw the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> asynchronously,
            using scaling and blending. This method works between any pair of source and target <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s and supports quantizing and dithering.
            To copy a bitmap data into another one without blending use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginCopyTo</see> method instead.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:DrawIntoAsync(IReadableBitmapData, IReadWriteBitmapData, Rectangle, Rectangle, IQuantizer, IDitherer, ScalingMode, TaskConfig)"/> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndDrawInto(System.IAsyncResult)">EndDrawInto</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Clips the specified <paramref name="source"/> using the specified <paramref name="clippingRegion"/>.
            Unlike the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> methods, this one returns a wrapper,
            providing access only to the specified region of the original <paramref name="source"/>.
            </summary>
            <param name="source">The source bitmap data to be clipped.</param>
            <param name="clippingRegion">A <see cref="T:System.Drawing.Rectangle"/> that specifies a region within the <paramref name="source"/>.</param>
            <param name="disposeSource"><see langword="true"/> to dispose <paramref name="source"/> when the result is disposed; otherwise, <see langword="false"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> that provides access only to the specified region withing the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="clippingRegion"/> has no overlapping region with source bounds.</exception>
            <remarks>
            <para>The <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the returned instance can be 0, indicating that the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see>
            method cannot be used. It can occur if the left edge of the clipping is not zero.</para>
            <para>Even if <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the returned instance is a nonzero value it can happen that it is too low to access all columns
            by the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> method. It can occur with indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>s if the right edge of the clipping is not on byte boundary.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle)">
            <summary>
            Clips the specified <paramref name="source"/> using the specified <paramref name="clippingRegion"/>.
            Unlike the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> methods, this one returns a wrapper,
            providing access only to the specified region of the original <paramref name="source"/>.
            This overload does not dispose <paramref name="source"/> when the result is disposed.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Boolean)"/> overload for details.
            </summary>
            <param name="source">The source bitmap data to be clipped.</param>
            <param name="clippingRegion">A <see cref="T:System.Drawing.Rectangle"/> that specifies a region within the <paramref name="source"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> that provides access only to the specified region withing the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="clippingRegion"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColors(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean)">
            <summary>
            Gets the colors used in the specified <paramref name="bitmapData"/>. A limit can be defined in <paramref name="maxColors"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>, whose colors have to be returned. If it is indexed and the <paramref name="forceScanningContent"/> parameter is <see langword="false"/>,
            then its palette entries are returned and <paramref name="maxColors"/> is ignored.</param>
            <param name="maxColors">A limit of the returned colors. If <paramref name="forceScanningContent"/> parameter is <see langword="false"/>, then
            this parameter is ignored for indexed bitmaps. Use 0 for no limit. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="forceScanningContent"><see langword="true"/> to force scanning the actual image content even if the specified <paramref name="bitmapData"/> is
            indexed and has a palette. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:KGySoft.Drawing.Imaging.Color32"/> entries.</returns>
            <remarks>
            <note>This method blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColors(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean,KGySoft.Threading.AsyncConfig)">BeginGetColors</see>
            or <see cref="!:GetColorsAsync">GetColorsAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <para>Completely transparent pixels are considered the same regardless of their color information.</para>
            <para>Every <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> is supported, though wide color formats (<see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/>,
            <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb"/> and <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppPArgb"/>) are quantized to 32 bit during the processing.
            To get the actual <em>number</em> of colors, which can be accurate even for wide color formats, use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData)">GetColorCount</see> method.
            </para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColors(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to get the colors used in the specified <paramref name="bitmapData"/> asynchronously. A limit can be defined in <paramref name="maxColors"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>, whose colors have to be returned. If it is indexed and the <paramref name="forceScanningContent"/> parameter is <see langword="false"/>,
            then its palette entries are returned and <paramref name="maxColors"/> is ignored.</param>
            <param name="maxColors">A limit of the returned colors. If <paramref name="forceScanningContent"/> parameter is <see langword="false"/>, then
            this parameter is ignored for indexed bitmaps. Use 0 for no limit. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="forceScanningContent"><see langword="true"/> to force scanning the actual image content even if the specified <paramref name="bitmapData"/> is
            indexed and has a palette. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:GetColorsAsync">GetColorsAsync</see> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndGetColors(System.IAsyncResult)">EndGetColors</see> method.</para>
            <para>This method is not a blocking call, though the operation is not parallelized and the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is ignored.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColors(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean)">GetColors</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndGetColors(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColors(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean,KGySoft.Threading.AsyncConfig)">BeginGetColors</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:GetColorsAsync">GetColorsAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:KGySoft.Drawing.Imaging.Color32"/> entries that is the result of the operation.
            If the operation was canceled and the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_ThrowIfCanceled.htm">ThrowIfCanceled</a> property of the <c>asyncConfig</c> parameter was <see langword="false"/>, then an empty collection is returned.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData)">
            <summary>
            Gets the actual number of colors of the specified <paramref name="bitmapData"/>. Colors are counted even for indexed bitmaps.
            </summary>
            <param name="bitmapData">The bitmap, whose colors have to be counted to count its colors.</param>
            <returns>The actual number of colors of the specified <paramref name="bitmapData"/>.</returns>
            <remarks>
            <note>This method blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.AsyncConfig)">BeginGetColorCount</see>
            or <see cref="!:GetColorCountAsync">GetColorCountAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <para>Completely transparent pixels are considered the same regardless of their color information.</para>
            <para>Every <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> is supported, but an accurate result is returned for wide color formats only
            when <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> is large enough to access all pixels directly (might not be the case for a clipped bitmap data, for example).
            Otherwise, colors are quantized to 32 bits-per-pixel values while counting them.
            Wide pixel formats are <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppArgb"/> and <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format64bppPArgb"/>.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.AsyncConfig)">
            <summary>
            Gets the actual number of colors of the specified <paramref name="bitmapData"/> asynchronously. Colors are counted even for indexed bitmaps.
            </summary>
            <param name="bitmapData">The bitmap, whose colors have to be counted to count its colors.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:GetColorCountAsync">GetColorCountAsync</see> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndGetColorCount(System.IAsyncResult)">EndGetColorCount</see> method.</para>
            <para>This method is not a blocking call, though the operation is not parallelized and the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is ignored.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData)">GetColorCount</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndGetColorCount(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.AsyncConfig)">BeginGetColorCount</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:GetColorCountAsync">GetColorCountAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>An <see cref="T:System.Int32">int</see> value that is the result of the operation,
            or <c>0</c>, if the operation was canceled and the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_ThrowIfCanceled.htm">ThrowIfCanceled</a> property of the <c>asyncConfig</c> parameter was <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData)">
            <summary>
            Returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, which is the grayscale version of the specified <paramref name="bitmapData"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to grayscale.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> containing the grayscale version of the original <paramref name="bitmapData"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.AsyncConfig)">BeginToGrayscale</see>
            or <see cref="!:ToGrayscaleAsync">ToGrayscaleAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method always returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/> pixel format.</para>
            <para>To return an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with arbitrary <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> overloads with a grayscale palette,
            quantizer (eg. <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">PredefinedColorsQuantizer.Grayscale</see>) or pixel format (<see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>).</para>
            <para>To make an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> grayscale without creating a new instance use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)">MakeGrayscale</see> method.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to convert the specified <paramref name="bitmapData"/> to grayscale asynchronously.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to grayscale.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> containing the grayscale version of the original <paramref name="bitmapData"/>.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:ToGrayscaleAsync">ToGrayscaleAsync</see> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndToGrayscale(System.IAsyncResult)">EndToGrayscale</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData)">ToGrayscale</see> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndToGrayscale(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.AsyncConfig)">BeginToGrayscale</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:ToGrayscaleAsync">ToGrayscaleAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that is the result of the operation,
            or <see langword="null"/>, if the operation was canceled and the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_ThrowIfCanceled.htm">ThrowIfCanceled</a> property of the <c>asyncConfig</c> parameter was <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData)">
            <summary>
            Returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, which is the clone of the specified <paramref name="bitmapData"/> with transparent background.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to transparent.</param>
            <returns>A new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, which is the clone of the specified <paramref name="bitmapData"/> with transparent background.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:ToTransparentAsync(IReadableBitmapData, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method uses the bottom-left pixel to determine the background color, which must be completely opaque; otherwise, just an exact clone of <paramref name="bitmapData"/> will be returned.</para>
            <para>This method always returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/> pixel format.</para>
            <para>To attempt to make an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> transparent without creating a new instance use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData)">MakeTransparent</see> method.</para>
            <para>To force replacing even non-completely opaque pixels use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32)"/> overload instead.</para>
            <note>Please note that unlike the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">MakeOpaque</see> method, this one changes exactly one color shade without any tolerance.
            For any customization use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> method with a quantizer
            created by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.KnownPixelFormat)">PredefinedColorsQuantizer.FromCustomFunction</see> method.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, which is the clone of the specified <paramref name="bitmapData"/> with transparent background.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to transparent.</param>
            <param name="transparentColor">Specifies the color to make transparent.</param>
            <returns>A new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, which is the clone of the specified <paramref name="bitmapData"/> with transparent background.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:ToTransparentAsync(IReadableBitmapData, Color32, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method always returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/> pixel format.</para>
            <para>To attempt to make an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> transparent without creating a new instance use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32)">MakeTransparent</see> method.</para>
            <para>To auto-detect the background color to be made transparent use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData)"/> overload instead.</para>
            <note>Please note that unlike the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">MakeOpaque</see> method, this one changes exactly one color shade without any tolerance.
            For any customization use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> method with a quantizer
            created by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.KnownPixelFormat)">PredefinedColorsQuantizer.FromCustomFunction</see> method.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to convert the specified <paramref name="bitmapData"/> to another one with transparent background asynchronously.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to transparent.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:ToTransparentAsync(IReadableBitmapData, TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndToTransparent(System.IAsyncResult)">EndToTransparent</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData)"/> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Threading.AsyncConfig)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to convert the specified <paramref name="bitmapData"/> to another one with transparent background asynchronously.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to transparent.</param>
            <param name="transparentColor">Specifies the color to make transparent.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:ToTransparentAsync(IReadableBitmapData, Color32, TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndToTransparent(System.IAsyncResult)">EndToTransparent</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32)"/> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Threading.AsyncConfig)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndToTransparent(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent">BeginToTransparent</see> methods to complete.
            In .NET Framework 4.0 and above you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparentAsync">ToTransparentAsync</see> methods instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that is the result of the operation,
            or <see langword="null"/>, if the operation was canceled and the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_ThrowIfCanceled.htm">ThrowIfCanceled</a> property of the <c>asyncConfig</c> parameter was <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Resize(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Size,KGySoft.Drawing.ScalingMode,System.Boolean)">
            <summary>
            Resizes the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to resize.</param>
            <param name="newSize">The requested new size.</param>
            <param name="scalingMode">A <see cref="T:KGySoft.Drawing.ScalingMode"/> value, which determines the quality of the result as well as the processing time. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <param name="keepAspectRatio"><see langword="true"/> to keep aspect ratio of the specified <paramref name="source"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, which is the resized version of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginResize(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Size,KGySoft.Drawing.ScalingMode,System.Boolean,KGySoft.Threading.AsyncConfig)">BeginResize</see> or <see cref="!:ResizeAsync">ResizeAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The result <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> depends on the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace"/> of the <paramref name="source"/>
            bitmap data but is always at least a 32 BPP format. To resize a bitmap data with a custom pixel format you can create a
            new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> method
            and use the <see cref="O:KGySoft.Drawing.ImageExtensions.DrawInto">DrawInto</see> extension methods, which has several overloads that also allow quantizing and dithering.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginResize(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Size,KGySoft.Drawing.ScalingMode,System.Boolean,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to resize the specified <paramref name="source"/> asynchronously.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to resize.</param>
            <param name="newSize">The requested new size.</param>
            <param name="scalingMode">A <see cref="T:KGySoft.Drawing.ScalingMode"/> value, which determines the quality of the result as well as the processing time. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <param name="keepAspectRatio"><see langword="true"/> to keep aspect ratio of the specified <paramref name="source"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:ResizeAsync">ResizeAsync</see> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndResize(System.IAsyncResult)">EndResize</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Resize(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Size,KGySoft.Drawing.ScalingMode,System.Boolean)">Resize</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndResize(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginResize(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Size,KGySoft.Drawing.ScalingMode,System.Boolean,KGySoft.Threading.AsyncConfig)">BeginResize</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:ResizeAsync">ResizeAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that is the result of the operation,
            or <see langword="null"/>, if the operation was canceled and the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_ThrowIfCanceled.htm">ThrowIfCanceled</a> property of the <c>asyncConfig</c> parameter was <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Save(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream)">
            <summary>
            Saves the content of this <paramref name="bitmapData"/> into the specified <paramref name="stream"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to save.</param>
            <param name="stream">The stream to save the bitmap data into.</param>
            <remarks>
            <note>This method blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginSave(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Threading.AsyncConfig)">BeginSave</see>
            or <see cref="!:SaveAsync">SaveAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <para>To reload the content use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.Load(System.IO.Stream)">BitmapDataFactory.Load</see> method.</para>
            <para>The saved content always preserves known <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s so the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.Load(System.IO.Stream)">BitmapDataFactory.Load</see>
            method can restore it the same way on any platform. Custom pixel formats are saved by a compatible known pixel format.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginSave(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to save the content of this <paramref name="bitmapData"/> into the specified <paramref name="stream"/> asynchronously.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to save.</param>
            <param name="stream">The stream to save the bitmap data into.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:SaveAsync">SaveAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndSave(System.IAsyncResult)">EndSave</see> method.</para>
            <para>This method is not a blocking call, though the operation is not parallelized and the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is ignored.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Save(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream)">Save</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndSave(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginSave(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Threading.AsyncConfig)">BeginSave</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:SaveAsync">SaveAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DoCloneExact(KGySoft.Threading.IAsyncContext,KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Cloning without changing pixel format if possible. Pixel format is changed only for indexed custom formats.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DoCloneDirect(KGySoft.Threading.IAsyncContext,KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.Imaging.WorkingColorSpace,KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Cloning with arbitrary pixel format and core settings using direct get/set pixels.
            NOTE: pixelFormat actually can be invalid here for custom pixel formats, in which case CreateCompatibleBitmapDataFactory must create the clone.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Clips the specified <paramref name="source"/> using the specified <paramref name="clippingRegion"/>.
            Unlike the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> methods, this one returns a wrapper,
            providing access only to the specified region of the original <paramref name="source"/>.
            </summary>
            <param name="source">The source bitmap data to be clipped.</param>
            <param name="clippingRegion">A <see cref="T:System.Drawing.Rectangle"/> that specifies a region within the <paramref name="source"/>.</param>
            <param name="disposeSource"><see langword="true"/> to dispose <paramref name="source"/> when the result is disposed; otherwise, <see langword="false"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> that provides access only to the specified region withing the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="clippingRegion"/> has no overlapping region with source bounds.</exception>
            <remarks>
            <para>The <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the returned instance can be 0, indicating that the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see>/<see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see>
            method cannot be used. It can occur if the left edge of the clipping is not zero.</para>
            <para>Even if <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the returned instance is a nonzero value it can happen that it is too low to access all columns
            by the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see>/<see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> methods. It can occur with indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>s if the right edge of the clipping is not on byte boundary.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle)">
            <summary>
            Clips the specified <paramref name="source"/> using the specified <paramref name="clippingRegion"/>.
            Unlike the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> methods, this one returns a wrapper,
            providing access only to the specified region of the original <paramref name="source"/>.
            This overload does not dispose <paramref name="source"/> when the result is disposed.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Boolean)"/> overload for details.
            </summary>
            <param name="source">The source bitmap data to be clipped.</param>
            <param name="clippingRegion">A <see cref="T:System.Drawing.Rectangle"/> that specifies a region within the <paramref name="source"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> that provides access only to the specified region withing the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="clippingRegion"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Quantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer)">
            <summary>
            Quantizes an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> using the specified <paramref name="quantizer"/> (reduces the number of colors).
            </summary>
            <param name="bitmapData">An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to be quantized.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmapData"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="quantizer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="quantizer"/>'s <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext)">Initialize</see> method returned <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginQuantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Threading.AsyncConfig)">BeginQuantize</see>
            or <see cref="!:QuantizeAsync">QuantizeAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method quantizes the specified <paramref name="bitmapData"/> in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> extension method instead.</para>
            <para>If the <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> or the palette of <paramref name="bitmapData"/> is not compatible with the colors of the specified <paramref name="quantizer"/>, then
            the result may not be correct.</para>
            <para>If <paramref name="bitmapData"/> has already the same set of colors that the specified <paramref name="quantizer"/>, then it can happen
            that calling this method does not change the <paramref name="bitmapData"/> at all.</para>
            <note type="tip"><list type="bullet">
            <item>To use predefined colors or custom quantization functions use the static methods of the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> class.
            <br/>See the <strong>Remarks</strong> section of its members for details and examples.</item>
            <item>To use an optimized palette of a specified number of colors adjusted for <paramref name="bitmapData"/> see the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.</item>
            </list></note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Quantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Threading.IAsyncContext,KGySoft.Drawing.Imaging.IQuantizer)">
            <summary>
            Quantizes an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> using the specified <paramref name="quantizer"/> (reduces the number of colors)
            inside of an already created, possibly asynchronous <paramref name="context"/>.
            </summary>
            <param name="bitmapData">An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to be quantized.</param>
            <param name="context">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncContext.htm">IAsyncContext</a> instance
            that contains information for asynchronous processing about the current operation.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmapData"/>.</param>
            <returns><see langword="true"/>, if the operation completed successfully.
            <br/><see langword="false"/>, if the operation has been canceled.</returns>
            <remarks>
            <para>This method blocks the caller thread but if <paramref name="context"/> belongs to an async top level method, then the execution may already run
            on a pool thread. Degree of parallelism, the ability of cancellation and reporting progress depend on how these were configured at the top level method.</para>
            <para>When reporting progress, this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_AsyncHelper.htm">AsyncHelper</a>
            class for details about how to create a context for possibly async top level methods.</note>
            <note>See the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Quantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer)"/> overload for more details about the other parameters.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="quantizer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="quantizer"/>'s <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext)">Initialize</see> method returned <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Dither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Quantizes an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with dithering (reduces the number of colors while trying to preserve details)
            using the specified <paramref name="quantizer"/> and <paramref name="ditherer"/>.
            </summary>
            <param name="bitmapData">An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to be quantized.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmapData"/>.</param>
            <param name="ditherer">An <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation to be used for dithering during the quantization of the specified <paramref name="bitmapData"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/>, <paramref name="quantizer"/> or <paramref name="ditherer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext)">IQuantizer.Initialize</see> method
            or the <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Threading.IAsyncContext)">IDitherer.Initialize</see> method returned <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginDither</see>
            or <see cref="!:DitherAsync">DitherAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method quantizes <paramref name="bitmapData"/> with dithering in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> extension method instead.</para>
            <para>If the <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> or the palette of <paramref name="bitmapData"/> is not compatible with the colors of the specified <paramref name="quantizer"/>, then
            the result may not be correct.</para>
            <para>If <paramref name="bitmapData"/> has already the same set of colors that the specified <paramref name="quantizer"/>, then it can happen
            that calling this method does not change <paramref name="bitmapData"/> at all.</para>
            <note type="tip"><list type="bullet">
            <item>To use predefined colors or custom quantization functions use the static methods of the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> class.
            <br/>See the <strong>Remarks</strong> section of its members for details and examples.</item>
            <item>To use an optimized palette of a specified number of colors adjusted for <paramref name="bitmapData"/> see the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.</item>
            <item>For some built-in dithering solutions see the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/>
            and <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> classes. All of them have several examples in their <strong>Remarks</strong> section.</item>
            </list></note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Dither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Threading.IAsyncContext,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Quantizes an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with dithering (reduces the number of colors while trying to preserve details)
            using the specified <paramref name="quantizer"/> and <paramref name="ditherer"/>
            inside of an already created, possibly asynchronous <paramref name="context"/>.
            </summary>
            <param name="bitmapData">An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to be quantized.</param>
            <param name="context">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncContext.htm">IAsyncContext</a> instance
            that contains information for asynchronous processing about the current operation.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmapData"/>.</param>
            <param name="ditherer">An <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation to be used for dithering during the quantization of the specified <paramref name="bitmapData"/>.</param>
            <returns><see langword="true"/>, if the operation completed successfully.
            <br/><see langword="false"/>, if the operation has been canceled.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/>, <paramref name="quantizer"/> or <paramref name="ditherer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext)">IQuantizer.Initialize</see> method
            or the <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Threading.IAsyncContext)">IDitherer.Initialize</see> method returned <see langword="null"/>.</exception>
            <remarks>
            <para>This method blocks the caller thread but if <paramref name="context"/> belongs to an async top level method, then the execution may already run
            on a pool thread. Degree of parallelism, the ability of cancellation and reporting progress depend on how these were configured at the top level method.</para>
            <para>When reporting progress, this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_AsyncHelper.htm">AsyncHelper</a>
            class for details about how to create a context for possibly async top level methods.</note>
            <note>See the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Dither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload for more details about the other parameters.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginQuantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to quantize an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> asynchronously, using the specified <paramref name="quantizer"/> (reduces the number of colors).
            </summary>
            <param name="bitmapData">An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to be quantized.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmapData"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="quantizer"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:QuantizeAsync">QuantizeAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndQuantize(System.IAsyncResult)">EndQuantize</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Quantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer)">Quantize</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndQuantize(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginQuantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Threading.AsyncConfig)">BeginQuantize</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:QuantizeAsync">QuantizeAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <exception cref="T:System.InvalidOperationException">The quantizer's <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext)">Initialize</see> method returned <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to quantize an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with dithering asynchronously (reduces the number of colors while trying to preserve details)
            using the specified <paramref name="quantizer"/> and <paramref name="ditherer"/>.
            </summary>
            <param name="bitmapData">An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to be quantized.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmapData"/>.</param>
            <param name="ditherer">An <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation to be used for dithering during the quantization of the specified <paramref name="bitmapData"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/>, <paramref name="quantizer"/> or <paramref name="ditherer"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:DitherAsync">DitherAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndQuantize(System.IAsyncResult)">EndQuantize</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Dither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Dither</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndDither(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginDither</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:DitherAsync">QuantizeAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext)">IQuantizer.Initialize</see> method
            or the <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Threading.IAsyncContext)">IDitherer.Initialize</see> method returned <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32})">
            <summary>
            Transforms the colors of this <paramref name="bitmapData"/> using the specified <paramref name="transformFunction"/> delegate.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="transformFunction">The transform function to be used on the colors of the specified <paramref name="bitmapData"/>. It must be thread-safe.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="transformFunction"/> is <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginTransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginTransformColors</see>
            or <see cref="!:TransformColorsAsync">TransformColorsAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method transforms the <paramref name="bitmapData"/> in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> extension method
            with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance created by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.KnownPixelFormat)">PredefinedColorsQuantizer.FromCustomFunction</see> method.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and it supports setting the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/>, then its palette entries will be transformed instead of the actual pixels.</para>
            <para>On multi-core systems <paramref name="transformFunction"/> might be called concurrently so it must be thread-safe.</para>
            <note type="tip">If <paramref name="transformFunction"/> can return colors incompatible with the pixel format of the specified <paramref name="bitmapData"/>, or you want to transform the actual
            pixels of an indexed <paramref name="bitmapData"/> instead of modifying the palette, then use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)"/> overload and specify an <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Transforms the colors of this <paramref name="bitmapData"/> using the specified <paramref name="transformFunction"/> delegate.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="transformFunction">The transform function to be used on the colors of the specified <paramref name="bitmapData"/>. It must be thread-safe.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if <paramref name="transformFunction"/> returns colors
            that is not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="transformFunction"/> is <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginTransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginTransformColors</see>
            or <see cref="!:TransformColorsAsync">TransformColorsAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method transforms the <paramref name="bitmapData"/> in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> extension method
            with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance created by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.KnownPixelFormat)">PredefinedColorsQuantizer.FromCustomFunction</see> method.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>On multi-core systems <paramref name="transformFunction"/> might be called concurrently so it must be thread-safe.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/> format.</para>
            <note>See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_TransformColors.htm">BitmapExtensions.TransformColors</a> method for an example.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Threading.IAsyncContext,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Transforms the colors of this <paramref name="bitmapData"/> using the specified <paramref name="transformFunction"/> delegate
            inside of an already created, possibly asynchronous <paramref name="context"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="context">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncContext.htm">IAsyncContext</a> instance
            that contains information for asynchronous processing about the current operation.</param>
            <param name="transformFunction">The transform function to be used on the colors of the specified <paramref name="bitmapData"/>. It must be thread-safe.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if <paramref name="transformFunction"/> returns colors
            that is not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>.</param>
            <returns><see langword="true"/>, if the operation completed successfully.
            <br/><see langword="false"/>, if the operation has been canceled.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="transformFunction"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method blocks the caller thread but if <paramref name="context"/> belongs to an async top level method, then the execution may already run
            on a pool thread. Degree of parallelism, the ability of cancellation and reporting progress depend on how these were configured at the top level method.</para>
            <para>When reporting progress, this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_AsyncHelper.htm">AsyncHelper</a>
            class for details about how to create a context for possibly async top level methods.</note>
            <note>See the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)"/> overload for more details about the other parameters.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginTransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to transform the colors of this <paramref name="bitmapData"/> asynchronously, using the specified <paramref name="transformFunction"/> delegate.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="transformFunction">The transform function to be used on the colors of the specified <paramref name="bitmapData"/>. It must be thread-safe.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if <paramref name="transformFunction"/> returns colors
            that is not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="transformFunction"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:TransformColorsAsync">TransformColorsAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndTransformColors(System.IAsyncResult)">EndTransformColors</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)"/> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndTransformColors(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginTransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginTransformColors</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:TransformColorsAsync">TransformColorsAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Replaces every <paramref name="oldColor"/> occurrences to <paramref name="newColor"/> in the specified <paramref name="bitmapData"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="oldColor">The original color to be replaced.</param>
            <param name="newColor">The new color to replace <paramref name="oldColor"/> with.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result if <paramref name="newColor"/>
            is not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginReplaceColor</see>
            or <see cref="!:ReplaceColorAsync">ReplaceColorAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If <paramref name="newColor"/> has alpha, which cannot be represented by <paramref name="bitmapData"/>, then it will be blended with <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/>.</para>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/> format.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to replace every <paramref name="oldColor"/> occurrences to <paramref name="newColor"/> in the specified <paramref name="bitmapData"/> asynchronously.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="oldColor">The original color to be replaced.</param>
            <param name="newColor">The new color to replace <paramref name="oldColor"/> with.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result if <paramref name="newColor"/>
            is not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:ReplaceColorAsync">ReplaceColorAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndReplaceColor(System.IAsyncResult)">EndReplaceColor</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">ReplaceColor</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndReplaceColor(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginReplaceColor</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:ReplaceColorAsync">ReplaceColorAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Invert(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Inverts the colors of the specified <paramref name="bitmapData"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be inverted.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the inverse of the <paramref name="bitmapData"/>
            has no exact representation with its <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginInvert(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginInvert</see>
            or <see cref="!:InvertAsync">InvertAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/> format.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginInvert(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to Invert the colors of the specified <paramref name="bitmapData"/> asynchronously.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be inverted.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the inverse of the <paramref name="bitmapData"/>
            has no exact representation with its <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:InvertAsync">InvertAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndInvert(System.IAsyncResult)">EndInvert</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Invert(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)">Invert</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndInvert(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginInvert(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginInvert</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:InvertAsync">InvertAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData)">
            <summary>
            If possible, makes the background of this <paramref name="bitmapData"/> transparent, taking the bottom-left pixel as the background color.
            If the <paramref name="bitmapData"/> does not support transparency, then the pixels that have the same color as the bottom-left pixel will be set
            to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make transparent.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:MakeTransparentAsync(IReadWriteBitmapData, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">ReplaceColor</see> method internally.</para>
            <para>Similarly to the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.drawing.bitmap.maketransparent" target="_blank">Bitmap.MakeTransparent</a> method,
            this one uses the bottom-left pixel to determine the background color, which must be completely opaque; otherwise, <paramref name="bitmapData"/> will not be changed.</para>
            <para>Unlike the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.drawing.bitmap.maketransparent" target="_blank">Bitmap.MakeTransparent</a> method,
            this one preserves the original <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. If <paramref name="bitmapData"/> does not support transparency and cannot set <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/>
            either, then every occurrence of the color of the bottom-left pixel will be changed to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            To make such bitmaps transparent use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData)">ToTransparent</see> method instead,
            which returns a new instance with <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.</para>
            <para>To force replacing even non-completely opaque pixels use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32)"/> overload instead.</para>
            <note>Please note that unlike the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">MakeOpaque</see> method, this one changes exactly one color shade without any tolerance.
            For any customization use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32})">TransformColors</see> method instead.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            If possible, makes the background of this <paramref name="bitmapData"/> transparent, using <paramref name="transparentColor"/> as the background color.
            If the <paramref name="bitmapData"/> does not support transparency, then the pixels that have the same color as <paramref name="transparentColor"/> will be set
            to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make transparent.</param>
            <param name="transparentColor">Specifies the color to make transparent.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Threading.AsyncConfig)"/>
            or <see cref="!:MakeTransparentAsync(IReadWriteBitmapData, Color32, TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">ReplaceColor</see> method internally.</para>
            <para>Unlike the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.drawing.bitmap.maketransparent" target="_blank">Bitmap.MakeTransparent(Color)</a> method,
            this one preserves the original <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. If <paramref name="bitmapData"/> does not support transparency and cannot set <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> either,
            then every occurrence of the <paramref name="transparentColor"/> will be changed to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            To make such bitmaps transparent use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32)">ToTransparent</see> method instead,
            which returns a new instance with <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.</para>
            <para>To auto-detect the background color to be made transparent use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData)"/> overload instead.</para>
            <note>Please note that unlike the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">MakeOpaque</see> method, this one changes exactly one color shade without any tolerance.
            For any customization use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32})">TransformColors</see> method instead.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Threading.AsyncConfig)">
            <summary>
            If possible, begins to make the background of this <paramref name="bitmapData"/> transparent asynchronously, taking the bottom-left pixel as the background color.
            If the <paramref name="bitmapData"/> does not support transparency, then the pixels that have the same color as the bottom-left pixel will be set
            to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make transparent.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:MakeTransparentAsync(IReadWriteBitmapData, TaskConfig)"/> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeTransparent(System.IAsyncResult)">EndMakeTransparent</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData)"/> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.AsyncConfig)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Threading.AsyncConfig)">
            <summary>
            If possible, begins to make the background of this <paramref name="bitmapData"/> transparent asynchronously, using <paramref name="transparentColor"/> as the background color.
            If the <paramref name="bitmapData"/> does not support transparency, then the pixels that have the same color as <paramref name="transparentColor"/> will be set
            to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make transparent.</param>
            <param name="transparentColor">Specifies the color to make transparent.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:MakeTransparentAsync(IReadWriteBitmapData,Color32,TaskConfig)"/> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeTransparent(System.IAsyncResult)">EndMakeTransparent</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32)"/> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Threading.AsyncConfig)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeTransparent(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent">BeginMakeTransparent</see> methods to complete.
            In .NET Framework 4.0 and above you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparentAsync">MakeTransparentAsync</see> methods instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Makes this <paramref name="bitmapData"/> opaque using the specified <paramref name="backColor"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make opaque.</param>
            <param name="backColor">Pixels with alpha in <paramref name="bitmapData"/> will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the specified color is ignored.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the inverse of the <paramref name="bitmapData"/>
            has no exact representation with its <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginMakeOpaque</see>
            or <see cref="!:MakeOpaqueAsync">MakeOpaqueAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/> format.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to make this <paramref name="bitmapData"/> opaque asynchronously using the specified <paramref name="backColor"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make opaque.</param>
            <param name="backColor">Pixels with alpha in <paramref name="bitmapData"/> will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the specified color is ignored.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the inverse of the <paramref name="bitmapData"/>
            has no exact representation with its <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:MakeOpaqueAsync">MakeOpaqueAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeOpaque(System.IAsyncResult)">EndMakeOpaque</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">MakeOpaque</see> method for more details.</note>
            <remarks>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeOpaque(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginMakeOpaque</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:MakeOpaqueAsync">MakeOpaqueAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Makes this <paramref name="bitmapData"/> grayscale.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make grayscale.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result if grayscale colors
            cannot be represented by the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> or the current palette of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginMakeGrayscale</see>
            or <see cref="!:MakeGrayscaleAsync">MakeGrayscaleAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method transforms the <paramref name="bitmapData"/> in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData)">ToGrayscale</see> extension method, which always returns a bitmap data with <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/> format,
            or the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> method with a grayscale
            quantizer (<see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">PredefinedColorsQuantizer.Grayscale</see>, for example).</para>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/> format.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to make this <paramref name="bitmapData"/> grayscale asynchronously.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make grayscale.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result if grayscale colors
            cannot be represented by the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> or the current palette of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:MakeGrayscaleAsync">MakeGrayscaleAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeGrayscale(System.IAsyncResult)">EndMakeGrayscale</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)">MakeGrayscale</see> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeGrayscale(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginMakeGrayscale</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:MakeGrayscaleAsync">MakeGrayscaleAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustBrightness(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">
            <summary>
            Adjusts the brightness of the specified <paramref name="bitmapData"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="brightness">A float value between -1 and 1, inclusive bounds. Positive values make the <paramref name="bitmapData"/> brighter,
            while negative values make it darker.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustBrightness(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Threading.AsyncConfig)">BeginAdjustBrightness</see>
            or <see cref="!:AdjustBrightnessAsync">AdjustBrightnessAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/> format.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_AdjustBrightness.htm">BitmapExtensions.AdjustBrightness</a> method for an example.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="brightness"/> is not between -1 and 1
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustBrightness(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to adjust the brightness of the specified <paramref name="bitmapData"/> asynchronously.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="brightness">A float value between -1 and 1, inclusive bounds. Positive values make the <paramref name="bitmapData"/> brighter,
            while negative values make it darker.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:AdjustBrightnessAsync">AdjustBrightnessAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndAdjustBrightness(System.IAsyncResult)">EndAdjustBrightness</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustBrightness(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">AdjustBrightness</see> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="brightness"/> is not between -1 and 1
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndAdjustBrightness(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustBrightness(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Threading.AsyncConfig)">BeginAdjustBrightness</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:AdjustBrightnessAsync">AdjustBrightnessAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustContrast(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">
            <summary>
            Adjusts the contrast of the specified <paramref name="bitmapData"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="contrast">A float value between -1 and 1, inclusive bounds. Positive values increase the contrast,
            while negative values decrease the it.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustContrast(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Threading.AsyncConfig)">BeginAdjustContrast</see>
            or <see cref="!:AdjustContrastAsync">AdjustContrastAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/> format.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_AdjustContrast.htm">BitmapExtensions.AdjustContrast</a> method for an example.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="contrast"/> is not between -1 and 1
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustContrast(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to adjust the contrast of the specified <paramref name="bitmapData"/> asynchronously.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="contrast">A float value between -1 and 1, inclusive bounds. Positive values increase the contrast,
            while negative values decrease the it.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:AdjustContrastAsync">AdjustContrastAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndAdjustContrast(System.IAsyncResult)">EndAdjustContrast</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustContrast(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">AdjustContrast</see> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="contrast"/> is not between -1 and 1
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndAdjustContrast(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustContrast(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Threading.AsyncConfig)">BeginAdjustContrast</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:AdjustContrastAsync">AdjustContrastAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustGamma(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">
            <summary>
            Adjusts the gamma correction of the specified <paramref name="bitmapData"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="gamma">A float value between 0 and 10, inclusive bounds. Values less than 1 decrease gamma correction,
            while values above 1 increase it.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustGamma(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Threading.AsyncConfig)">BeginAdjustGamma</see>
            or <see cref="!:AdjustGammaAsync">AdjustGammaAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/> format.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_AdjustGamma.htm">BitmapExtensions.AdjustGamma</a> method for an example.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="gamma"/> is not between 0 and 10
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustGamma(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to adjust the gamma correction of the specified <paramref name="bitmapData"/> asynchronously.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="gamma">A float value between 0 and 10, inclusive bounds. Values less than 1 decrease gamma correction,
            while values above 1 increase it.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:AdjustGammaAsync">AdjustGammaAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndAdjustGamma(System.IAsyncResult)">EndAdjustGamma</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustGamma(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">AdjustGamma</see> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="gamma"/> is not between 0 and 10
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndAdjustGamma(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustGamma(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Threading.AsyncConfig)">BeginAdjustGamma</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:AdjustGammaAsync">AdjustGammaAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.BitmapDataExtensions.KernelMap">
            <summary>
            Represents the kernel map for resizing using a specific interpolation function.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.BitmapDataExtensions.KernelMap.MaxDiameter">
            <summary>
            Gets the maximum diameter of the kernels.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.KernelMap.GetKernel(System.Int32)">
            <summary>
            Returns a <see cref="T:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizeKernel"/> for an index value between 0 and targetLength - 1.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.KernelMap.BuildKernel(System.Func{System.Single,System.Single},System.Int32,System.Int32)">
            <summary>
            Builds a <see cref="T:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizeKernel"/> for the row <paramref name="destRowIndex"/> (in <see cref="F:KGySoft.Drawing.Imaging.BitmapDataExtensions.KernelMap.kernels"/>)
            referencing the data at row <paramref name="dataRowIndex"/> within <see cref="F:KGySoft.Drawing.Imaging.BitmapDataExtensions.KernelMap.data"/>, so the data reusable by other data rows.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizeKernel">
            <summary>
            Points to a collection of weights allocated in <see cref="T:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizingSessionInterpolated"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizeKernel.ConvolveWith(KGySoft.Collections.ArraySection{KGySoft.Drawing.Imaging.PColorF}@,System.Int32)">
            <summary>
            Computes the sum of colors weighted by weight values, pointed by this <see cref="T:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizeKernel"/> instance.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizeKernel.Slide(System.Int32)">
            <summary>
            Reinterprets the origin of the current kernel adjusting the destination column index
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Clips the specified <paramref name="source"/> using the specified <paramref name="clippingRegion"/>.
            Unlike the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> methods, this one returns a wrapper,
            providing access only to the specified region of the original <paramref name="source"/>.
            </summary>
            <param name="source">The source bitmap data to be clipped.</param>
            <param name="clippingRegion">A <see cref="T:System.Drawing.Rectangle"/> that specifies a region within the <paramref name="source"/>.</param>
            <param name="disposeSource"><see langword="true"/> to dispose <paramref name="source"/> when the result is disposed; otherwise, <see langword="false"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> that provides access only to the specified region withing the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="clippingRegion"/> has no overlapping region with source bounds.</exception>
            <remarks>
            <para>The <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the returned instance can be 0, indicating that the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see>
            method cannot be used. It can occur if the left edge of the clipping is not zero.</para>
            <para>Even if <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the returned instance is a nonzero value it can happen that it is too low to access all columns
            by the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> method. It can occur with indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>s if the right edge of the clipping is not on byte boundary.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle)">
            <summary>
            Clips the specified <paramref name="source"/> using the specified <paramref name="clippingRegion"/>.
            Unlike the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> methods, this one returns a wrapper,
            providing access only to the specified region of the original <paramref name="source"/>.
            This overload does not dispose <paramref name="source"/> when the result is disposed.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle,System.Boolean)"/> overload for details.
            </summary>
            <param name="source">The source bitmap data to be clipped.</param>
            <param name="clippingRegion">A <see cref="T:System.Drawing.Rectangle"/> that specifies a region within the <paramref name="source"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> that provides access only to the specified region withing the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="clippingRegion"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Clears the content of the specified <paramref name="bitmapData"/> and fills it with the specified <paramref name="color"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> to be cleared.</param>
            <param name="color">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> that represents the desired result color of the <paramref name="bitmapData"/>.
            If it has transparency, which is not supported by <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/>, then the result might be either
            completely transparent (depends also on <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/>), or the color will be blended with <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/>.
            </param>
            <param name="ditherer">The ditherer to be used for the clearing. Has no effect if <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginClear</see>
            or <see cref="!:ClearAsync">ClearAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Threading.IAsyncContext,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Clears the content of the specified <paramref name="bitmapData"/> and fills it with the specified <paramref name="color"/>
            inside of an already created, possibly asynchronous <paramref name="context"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> to be cleared.</param>
            <param name="context">An <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncContext.htm">IAsyncContext</a> instance
            that contains information for asynchronous processing about the current operation.</param>
            <param name="color">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> that represents the desired result color of the <paramref name="bitmapData"/>.
            If it has transparency, which is not supported by <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/>, then the result might be either
            completely transparent (depends also on <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/>), or the color will be blended with <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/>.
            </param>
            <param name="ditherer">The ditherer to be used for the clearing. Has no effect if <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns><see langword="true"/>, if the operation completed successfully.
            <br/><see langword="false"/>, if the operation has been canceled.</returns>
            <remarks>
            <para>This method blocks the caller thread but if <paramref name="context"/> belongs to an async top level method, then the execution may already run
            on a pool thread. Degree of parallelism, the ability of cancellation and reporting progress depend on how these were configured at the top level method.</para>
            <para>When reporting progress, this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_AsyncHelper.htm">AsyncHelper</a>
            class for details about how to create a context for possibly async top level methods.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">
            <summary>
            Begins to clear the content of the specified <paramref name="bitmapData"/> and fills it with the specified <paramref name="color"/> asynchronously.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> to be cleared.</param>
            <param name="color">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> that represents the desired result color of the <paramref name="bitmapData"/>.
            If it has transparency, which is not supported by <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/>, then the result might be either
            completely transparent (depends also on <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/>), or the color will be blended with <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/>.
            </param>
            <param name="ditherer">The ditherer to be used for the clearing. Has no effect if <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc.
            When <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_Progress.htm">Progress</a> is set in this parameter,
            then this library always passes a <see cref="T:KGySoft.Drawing.DrawingOperation"/> instance to the generic methods of
            the <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> interface. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="!:ClearAsync">ClearAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClear(System.IAsyncResult)">EndClear</see> method.</para>
            <para>This method is not a blocking call even if the <a href="https://docs.kgysoft.net/corelibraries/html/P_KGySoft_Threading_AsyncConfigBase_MaxDegreeOfParallelism.htm">MaxDegreeOfParallelism</a> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClear(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Threading.AsyncConfig)">BeginClear</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="!:ClearAsync">ClearAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Tries to the set the specified <paramref name="palette"/> for this <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> whose <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> should be set.</param>
            <param name="palette">A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance to set.</param>
            <returns><see langword="true"/>&#160;<paramref name="palette"/> can be set as the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of this <paramref name="bitmapData"/>; otherwise, <see langword="false"/>.</returns>
            <remarks>
            <para>Setting may fail if <paramref name="bitmapData"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> is not an indexed one,
            the number of entries in <paramref name="palette"/> is less than <see cref="P:KGySoft.Drawing.Imaging.Palette.Count"/> of the current <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/>,
            the number of entries in <paramref name="palette"/> is larger than the possible maximum number of colors of the current <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>,
            or when the current <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> does not support setting the palette.</para>
            <para>The <see cref="P:KGySoft.Drawing.Imaging.Palette.BackColor">Palette.BackColor</see> and <see cref="P:KGySoft.Drawing.Imaging.Palette.AlphaThreshold">Palette.AlphaThreshold</see> properties of the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> property will
            continue to return the same value as the original <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> values of this <paramref name="bitmapData"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ColorExtensions">
            <summary>
            Contains extension methods for various color types representing colors.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColor32(System.Drawing.Color)">
            <summary>
            Converts this <see cref="T:System.Drawing.Color"/> to a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance converted from this <see cref="T:System.Drawing.Color"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColor64(System.Drawing.Color)">
            <summary>
            Converts this <see cref="T:System.Drawing.Color"/> to a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance converted from this <see cref="T:System.Drawing.Color"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColorF(System.Drawing.Color)">
            <summary>
            Converts this <see cref="T:System.Drawing.Color"/> to a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance converted from this <see cref="T:System.Drawing.Color"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColor32(System.Drawing.Color)">
            <summary>
            Converts this <see cref="T:System.Drawing.Color"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance converted from this <see cref="T:System.Drawing.Color"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColor64(System.Drawing.Color)">
            <summary>
            Converts this <see cref="T:System.Drawing.Color"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance converted from this <see cref="T:System.Drawing.Color"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColorF(System.Drawing.Color)">
            <summary>
            Converts this <see cref="T:System.Drawing.Color"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance converted from this <see cref="T:System.Drawing.Color"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColor64(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> to a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColorF(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> to a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColor32(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.
            It's practically the same as calling the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPremultiplied(KGySoft.Drawing.Imaging.Color32)"/> method.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColor64(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColorF(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColor(KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> to a <see cref="T:System.Drawing.Color"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> to convert.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColorF(KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> to a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColor32(KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColor64(KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.
            It's practically the same as calling the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPremultiplied(KGySoft.Drawing.Imaging.Color64)"/> method.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColorF(KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColor(KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> to a <see cref="T:System.Drawing.Color"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> to convert.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColor32(KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColor64(KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColorF(KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.
            It's practically the same as calling the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPremultiplied(KGySoft.Drawing.Imaging.ColorF)"/> method.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColor(KGySoft.Drawing.Imaging.PColor32)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> to a <see cref="T:System.Drawing.Color"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> to convert.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColor64(KGySoft.Drawing.Imaging.PColor32)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> to a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColorF(KGySoft.Drawing.Imaging.PColor32)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> to a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColor64(KGySoft.Drawing.Imaging.PColor32)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColorF(KGySoft.Drawing.Imaging.PColor32)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColor(KGySoft.Drawing.Imaging.PColor64)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> to a <see cref="T:System.Drawing.Color"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> to convert.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColorF(KGySoft.Drawing.Imaging.PColor64)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> to a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColorF(KGySoft.Drawing.Imaging.PColor64)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColor(KGySoft.Drawing.Imaging.PColorF)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> to a <see cref="T:System.Drawing.Color"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> to convert.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColor32(KGySoft.Drawing.Imaging.PColorF)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> to a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToColor64(KGySoft.Drawing.Imaging.PColorF)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> to a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColor32(KGySoft.Drawing.Imaging.PColorF)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColor64(KGySoft.Drawing.Imaging.PColorF)">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> to a <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> to convert.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance converted from this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPremultiplied(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Converts this straight <see cref="T:KGySoft.Drawing.Imaging.Color32"/> value to a premultiplied <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> value.
            It's practically the same as calling the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColor32(KGySoft.Drawing.Imaging.Color32)"/> method.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> value to convert.</param>
            <returns>A premultiplied <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPremultiplied(KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Converts this straight <see cref="T:KGySoft.Drawing.Imaging.Color64"/> value to a premultiplied <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> value.
            It's practically the same as calling the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColor64(KGySoft.Drawing.Imaging.Color64)"/> method.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> value to convert.</param>
            <returns>A premultiplied <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPremultiplied(KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Converts this straight <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> value to a premultiplied <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> value.
            It's practically the same as calling the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.ToPColorF(KGySoft.Drawing.Imaging.ColorF)"/> method.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> value to convert.</param>
            <returns>A premultiplied <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToStraight(KGySoft.Drawing.Imaging.PColor32)">
            <summary>
            Converts this premultiplied <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> value to a straight <see cref="T:KGySoft.Drawing.Imaging.Color32"/> value.
            It's practically the same as calling the <see cref="M:KGySoft.Drawing.Imaging.PColor32.ToColor32"/> method.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> value to convert.</param>
            <returns>A straight <see cref="T:KGySoft.Drawing.Imaging.Color32"/> value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToStraight(KGySoft.Drawing.Imaging.PColor64)">
            <summary>
            Converts this premultiplied <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> value to a straight <see cref="T:KGySoft.Drawing.Imaging.Color64"/> value.
            It's practically the same as calling the <see cref="M:KGySoft.Drawing.Imaging.PColor64.ToColor64"/> method.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> value to convert.</param>
            <returns>A straight <see cref="T:KGySoft.Drawing.Imaging.Color64"/> value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToStraight(KGySoft.Drawing.Imaging.PColorF)">
            <summary>
            Converts this premultiplied <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> value to a straight <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> value.
            It's practically the same as calling the <see cref="M:KGySoft.Drawing.Imaging.PColorF.ToColorF"/> method.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> value to convert.</param>
            <returns>A straight <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToStraightSafe(KGySoft.Drawing.Imaging.PColor32)">
            <summary>
            Converts this premultiplied <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance containing possibly invalid RGB values to a straight <see cref="T:KGySoft.Drawing.Imaging.Color32"/> value.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> value to convert.</param>
            <returns>A straight <see cref="T:KGySoft.Drawing.Imaging.Color32"/> value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToStraightSafe(KGySoft.Drawing.Imaging.PColor64)">
            <summary>
            Converts this premultiplied <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance containing possibly invalid RGB values to a straight <see cref="T:KGySoft.Drawing.Imaging.Color64"/> value.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> value to convert.</param>
            <returns>A straight <see cref="T:KGySoft.Drawing.Imaging.Color64"/> value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.ToStraightSafe(KGySoft.Drawing.Imaging.PColorF)">
            <summary>
            Converts this premultiplied <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance containing possibly invalid ARGB values to a straight <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> value.
            </summary>
            <param name="color">The <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> value to convert.</param>
            <returns>A straight <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightness(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets the brightness of a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance as a <see cref="T:System.Byte">byte</see> based on human perception.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A"/> component of the specified value is ignored.
            </summary>
            <param name="c">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance to get the brightness of.</param>
            <returns>A <see cref="T:System.Byte">byte</see> value where 0 represents the darkest and 255 represents the brightest possible value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightness(KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Gets the brightness of a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance as a <see cref="T:System.Byte">byte</see> based on human perception.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A"/> component of the specified value is ignored.
            </summary>
            <param name="c">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance to get the brightness of.</param>
            <param name="colorSpace">The color space to be used for determining the brightness. If <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the sRGB color space will be used.
            For performance reasons this method does not validate this parameter. For undefined values the sRGB color space will be used as well.</param>
            <returns>A <see cref="T:System.Byte">byte</see> value where 0 represents the darkest and 255 represents the brightest possible value.</returns>
            <remarks>
            <note>This method always returns a gamma corrected result, even if <paramref name="colorSpace"/> is <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Linear"/>.
            To get the brightness in the linear color space use the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightness(KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.WorkingColorSpace)"/> method instead.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightness(KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Gets the brightness of a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance as a <see cref="T:System.UInt16"/> based on human perception.
            The <see cref="F:KGySoft.Drawing.Imaging.Color64.A"/> component of the specified value is ignored.
            </summary>
            <param name="c">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance to get the brightness of.</param>
            <returns>A <see cref="T:System.UInt16"/> value where 0 represents the darkest and 65535 represents the brightest possible value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightness(KGySoft.Drawing.Imaging.Color64,KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Gets the brightness of a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance as a <see cref="T:System.UInt16"/> based on human perception.
            The <see cref="F:KGySoft.Drawing.Imaging.Color64.A"/> component of the specified value is ignored.
            </summary>
            <param name="c">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance to get the brightness of.</param>
            <param name="colorSpace">The color space to be used for determining the brightness. If <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the sRGB color space will be used.
            For performance reasons this method does not validate this parameter. For undefined values the sRGB color space will be used as well.</param>
            <returns>A <see cref="T:System.UInt16"/> value where 0 represents the darkest and 65535 represents the brightest possible value.</returns>
            <remarks>
            <note>This method always returns a gamma corrected result, even if <paramref name="colorSpace"/> is <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Linear"/>.
            To get the brightness in the linear color space use the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightness(KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.WorkingColorSpace)"/> method instead.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightness(KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Gets the brightness of a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance as a <see cref="T:System.Single">float</see> value in the linear color space.
            The <see cref="F:KGySoft.Drawing.Imaging.ColorF.A"/> component of the specified value is ignored.
            </summary>
            <param name="c">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance to get the brightness of.</param>
            <returns>A <see cref="T:System.Single">float</see> value where 0 represents the darkest and 1 represents the brightest possible value.</returns>
            <remarks>
            <note>The result of this method is not gamma corrected. To get a gamma corrected <see cref="T:System.Single">float</see> result,
            call the <see cref="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.LinearToSrgb(System.Single)">ColorSpaceHelper.LinearToSrgb</see> method on the result,
            or use the <see cref="O:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightnessF">GetBrightnessF</see> methods instead.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightness(KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Gets the brightness of a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance as a <see cref="T:System.Single">float</see> value in the linear color space.
            The <see cref="F:KGySoft.Drawing.Imaging.ColorF.A"/> component of the specified value is ignored.
            </summary>
            <param name="c">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance to get the brightness of.</param>
            <param name="colorSpace">The color space to be used for determining the brightness. If <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the linear color space will be used.
            For performance reasons this method does not validate this parameter. For undefined values the linear color space will be used as well.</param>
            <returns>A <see cref="T:System.Single">float</see> value where 0 represents the darkest and 1 represents the brightest possible value.</returns>
            <remarks>
            <note>The result of this method is not gamma corrected. To get a gamma corrected <see cref="T:System.Single">float</see> result,
            call the <see cref="M:KGySoft.Drawing.Imaging.ColorSpaceHelper.LinearToSrgb(System.Single)">ColorSpaceHelper.LinearToSrgb</see> method on the result,
            or use the <see cref="O:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightnessF">GetBrightnessF</see> methods instead.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightnessF(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets the brightness of a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance as a <see cref="T:System.Single">float</see> value based on human perception.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A"/> component of the specified value is ignored.
            </summary>
            <param name="c">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance to get the brightness of.</param>
            <returns>A <see cref="T:System.Single">float</see> value where 0 represents the darkest and 1 represents the brightest possible value.</returns>
            <remarks>
            <note>This method always returns a gamma corrected result.
            To get the brightness in the linear color space use the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightness(KGySoft.Drawing.Imaging.ColorF)"/> method instead.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightnessF(KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Gets the brightness of a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance as a <see cref="T:System.Single">float</see> value based on human perception.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A"/> component of the specified value is ignored.
            </summary>
            <param name="c">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance to get the brightness of.</param>
            <param name="colorSpace">The color space to be used for determining the brightness. If <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the sRGB color space will be used.
            For performance reasons this method does not validate this parameter. For undefined values the sRGB color space will be used as well.</param>
            <returns>A <see cref="T:System.Single">float</see> value where 0 represents the darkest and 1 represents the brightest possible value.</returns>
            <remarks>
            <note>This method always returns a gamma corrected result, even if <paramref name="colorSpace"/> is <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Linear"/>.
            To get the brightness in the linear color space use the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightness(KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.WorkingColorSpace)"/> method instead.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightnessF(KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Gets the brightness of a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance as a <see cref="T:System.Single">float</see> value based on human perception.
            The <see cref="F:KGySoft.Drawing.Imaging.Color64.A"/> component of the specified value is ignored.
            </summary>
            <param name="c">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance to get the brightness of.</param>
            <returns>A <see cref="T:System.Single">float</see> value where 0 represents the darkest and 1 represents the brightest possible value.</returns>
            <remarks>
            <note>This method always returns a gamma corrected result.
            To get the brightness in the linear color space use the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightness(KGySoft.Drawing.Imaging.ColorF)"/> method instead.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightnessF(KGySoft.Drawing.Imaging.Color64,KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Gets the brightness of a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance as a <see cref="T:System.Single">float</see> value based on human perception.
            The <see cref="F:KGySoft.Drawing.Imaging.Color64.A"/> component of the specified value is ignored.
            </summary>
            <param name="c">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance to get the brightness of.</param>
            <param name="colorSpace">The color space to be used for determining the brightness. If <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the sRGB color space will be used.
            For performance reasons this method does not validate this parameter. For undefined values the sRGB color space will be used as well.</param>
            <returns>A <see cref="T:System.Single">float</see> value where 0 represents the darkest and 1 represents the brightest possible value.</returns>
            <remarks>
            <note>This method always returns a gamma corrected result, even if <paramref name="colorSpace"/> is <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Linear"/>.
            To get the brightness in the linear color space use the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.GetBrightness(KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.WorkingColorSpace)"/> method instead.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.Blend(KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Blends the specified <paramref name="foreColor"/> and <paramref name="backColor"/> in the sRGB color space.
            It returns <paramref name="foreColor"/> if it has no transparency (that is, when <see cref="F:KGySoft.Drawing.Imaging.Color32.A"/> is 255); otherwise, the result of the blending.
            </summary>
            <param name="foreColor">The covering color to blend with <paramref name="backColor"/>.</param>
            <param name="backColor">The background color to be covered with <paramref name="foreColor"/>.</param>
            <returns><paramref name="foreColor"/> if it has no transparency; otherwise, the result of the blending.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.Blend(KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Blends the specified <paramref name="foreColor"/> and <paramref name="backColor"/> in the specified <paramref name="colorSpace"/>.
            It returns <paramref name="foreColor"/> if it has no transparency (that is, when <see cref="F:KGySoft.Drawing.Imaging.Color32.A"/> is 255); otherwise, the result of the blending.
            </summary>
            <param name="foreColor">The covering color to blend with <paramref name="backColor"/>.</param>
            <param name="backColor">The background color to be covered with <paramref name="foreColor"/>.</param>
            <param name="colorSpace">The color space to be used for the blending. If <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the sRGB color space will be used.
            For performance reasons this method does not validate this parameter. For undefined values the sRGB color space will be used as well.</param>
            <returns><paramref name="foreColor"/> if it has no transparency; otherwise, the result of the blending.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.Blend(KGySoft.Drawing.Imaging.Color64,KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Blends the specified <paramref name="foreColor"/> and <paramref name="backColor"/> in the sRGB color space.
            It returns <paramref name="foreColor"/> if it has no transparency (that is, when <see cref="F:KGySoft.Drawing.Imaging.Color64.A"/> is 65535); otherwise, the result of the blending.
            </summary>
            <param name="foreColor">The covering color to blend with <paramref name="backColor"/>.</param>
            <param name="backColor">The background color to be covered with <paramref name="foreColor"/>.</param>
            <returns><paramref name="foreColor"/> if it has no transparency; otherwise, the result of the blending.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.Blend(KGySoft.Drawing.Imaging.Color64,KGySoft.Drawing.Imaging.Color64,KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Blends the specified <paramref name="foreColor"/> and <paramref name="backColor"/> in the specified <paramref name="colorSpace"/>.
            It returns <paramref name="foreColor"/> if it has no transparency (that is, when <see cref="F:KGySoft.Drawing.Imaging.Color64.A"/> is 65535); otherwise, the result of the blending.
            </summary>
            <param name="foreColor">The covering color to blend with <paramref name="backColor"/>.</param>
            <param name="backColor">The background color to be covered with <paramref name="foreColor"/>.</param>
            <param name="colorSpace">The color space to be used for the blending. If <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the sRGB color space will be used.
            For performance reasons this method does not validate this parameter. For undefined values the sRGB color space will be used as well.</param>
            <returns><paramref name="foreColor"/> if it has no transparency; otherwise, the result of the blending.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.Blend(KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Blends the specified <paramref name="foreColor"/> and <paramref name="backColor"/> in the linear color space.
            It returns <paramref name="foreColor"/> if it has no transparency (that is, when <see cref="F:KGySoft.Drawing.Imaging.ColorF.A"/> is greater than or equal to 1); otherwise, the result of the blending.
            </summary>
            <param name="foreColor">The covering color to blend with <paramref name="backColor"/>.</param>
            <param name="backColor">The background color to be covered with <paramref name="foreColor"/>.</param>
            <returns><paramref name="foreColor"/> if it has no transparency; otherwise, the result of the blending.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.Blend(KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Blends the specified <paramref name="foreColor"/> and <paramref name="backColor"/> in the specified <paramref name="colorSpace"/>.
            It returns <paramref name="foreColor"/> if it has no transparency (that is, when <see cref="F:KGySoft.Drawing.Imaging.ColorF.A"/> is greater than or equal to 1); otherwise, the result of the blending.
            </summary>
            <param name="foreColor">The covering color to blend with <paramref name="backColor"/>.</param>
            <param name="backColor">The background color to be covered with <paramref name="foreColor"/>.</param>
            <param name="colorSpace">The color space to be used for the blending. If <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the linear color space will be used.
            For performance reasons this method does not validate this parameter. For undefined values the linear color space will be used as well.</param>
            <returns><paramref name="foreColor"/> if it has no transparency; otherwise, the result of the blending.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.Blend(KGySoft.Drawing.Imaging.PColor32,KGySoft.Drawing.Imaging.PColor32)">
            <summary>
            Blends the specified <paramref name="foreColor"/> and <paramref name="backColor"/> in the sRGB color space.
            It returns <paramref name="foreColor"/> if it has no transparency (that is, when <see cref="F:KGySoft.Drawing.Imaging.PColor32.A"/> is 255); otherwise, the result of the blending.
            </summary>
            <param name="foreColor">The covering color to blend with <paramref name="backColor"/>.</param>
            <param name="backColor">The background color to be covered with <paramref name="foreColor"/>.</param>
            <returns><paramref name="foreColor"/> if it has no transparency; otherwise, the result of the blending.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.Blend(KGySoft.Drawing.Imaging.PColor32,KGySoft.Drawing.Imaging.PColor32,KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Blends the specified <paramref name="foreColor"/> and <paramref name="backColor"/> in the specified <paramref name="colorSpace"/>.
            It returns <paramref name="foreColor"/> if it has no transparency (that is, when <see cref="F:KGySoft.Drawing.Imaging.PColor32.A"/> is 255); otherwise, the result of the blending.
            </summary>
            <param name="foreColor">The covering color to blend with <paramref name="backColor"/>.</param>
            <param name="backColor">The background color to be covered with <paramref name="foreColor"/>.</param>
            <param name="colorSpace">The color space to be used for the blending. If <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the sRGB color space will be used.
            For performance reasons this method does not validate this parameter. For undefined values the sRGB color space will be used as well.</param>
            <returns><paramref name="foreColor"/> if it has no transparency; otherwise, the result of the blending.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.Blend(KGySoft.Drawing.Imaging.PColor64,KGySoft.Drawing.Imaging.PColor64)">
            <summary>
            Blends the specified <paramref name="foreColor"/> and <paramref name="backColor"/> in the sRGB color space.
            It returns <paramref name="foreColor"/> if it has no transparency (that is, when <see cref="F:KGySoft.Drawing.Imaging.PColor64.A"/> is 65535); otherwise, the result of the blending.
            </summary>
            <param name="foreColor">The covering color to blend with <paramref name="backColor"/>.</param>
            <param name="backColor">The background color to be covered with <paramref name="foreColor"/>.</param>
            <returns><paramref name="foreColor"/> if it has no transparency; otherwise, the result of the blending.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.Blend(KGySoft.Drawing.Imaging.PColor64,KGySoft.Drawing.Imaging.PColor64,KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Blends the specified <paramref name="foreColor"/> and <paramref name="backColor"/> in the specified <paramref name="colorSpace"/>.
            It returns <paramref name="foreColor"/> if it has no transparency (that is, when <see cref="F:KGySoft.Drawing.Imaging.Color64.A"/> is 65535); otherwise, the result of the blending.
            </summary>
            <param name="foreColor">The covering color to blend with <paramref name="backColor"/>.</param>
            <param name="backColor">The background color to be covered with <paramref name="foreColor"/>.</param>
            <param name="colorSpace">The color space to be used for the blending. If <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the sRGB color space will be used.
            For performance reasons this method does not validate this parameter. For undefined values the sRGB color space will be used as well.</param>
            <returns><paramref name="foreColor"/> if it has no transparency; otherwise, the result of the blending.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.Blend(KGySoft.Drawing.Imaging.PColorF,KGySoft.Drawing.Imaging.PColorF)">
            <summary>
            Blends the specified <paramref name="foreColor"/> and <paramref name="backColor"/> in the linear color space.
            It returns <paramref name="foreColor"/> if it has no transparency (that is, when <see cref="F:KGySoft.Drawing.Imaging.PColorF.A"/> is greater than or equal to 1); otherwise, the result of the blending.
            </summary>
            <param name="foreColor">The covering color to blend with <paramref name="backColor"/>.</param>
            <param name="backColor">The background color to be covered with <paramref name="foreColor"/>.</param>
            <returns><paramref name="foreColor"/> if it has no transparency; otherwise, the result of the blending.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.Blend(KGySoft.Drawing.Imaging.PColorF,KGySoft.Drawing.Imaging.PColorF,KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Blends the specified <paramref name="foreColor"/> and <paramref name="backColor"/> in the specified <paramref name="colorSpace"/>.
            It returns <paramref name="foreColor"/> if it has no transparency (that is, when <see cref="F:KGySoft.Drawing.Imaging.PColorF.A"/> is greater than or equal to 1); otherwise, the result of the blending.
            </summary>
            <param name="foreColor">The covering color to blend with <paramref name="backColor"/>.</param>
            <param name="backColor">The background color to be covered with <paramref name="foreColor"/>.</param>
            <param name="colorSpace">The color space to be used for the blending. If <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the linear color space will be used.
            For performance reasons this method does not validate this parameter. For undefined values the linear color space will be used as well.</param>
            <returns><paramref name="foreColor"/> if it has no transparency; otherwise, the result of the blending.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.TolerantEquals(KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Byte)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instances are equal using a specified <paramref name="tolerance"/>.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <param name="tolerance">The allowed tolerance for ARGB components.</param>
            <param name="alphaThreshold">Specifies a threshold under which colors are considered transparent. If both colors have lower <see cref="F:KGySoft.Drawing.Imaging.Color32.A"/> value than the threshold, then they are considered equal.
            If only one of the specified colors has lower <see cref="F:KGySoft.Drawing.Imaging.Color32.A"/> value than the threshold, then the colors are considered different.
            If both colors' <see cref="F:KGySoft.Drawing.Imaging.Color32.A"/> value are equal to or greater than this value, then <paramref name="tolerance"/> is applied to the <see cref="F:KGySoft.Drawing.Imaging.Color32.A"/> value, too. This parameter is optional.
            <br/>Default value: 0.</param>
            <returns><see langword="true"/>, if the colors are considered equal with the specified <paramref name="tolerance"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.TolerantEquals(KGySoft.Drawing.Imaging.Color64,KGySoft.Drawing.Imaging.Color64,System.UInt16,System.UInt16)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instances are equal using a specified <paramref name="tolerance"/>.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <param name="tolerance">The allowed tolerance for ARGB components.</param>
            <param name="alphaThreshold">Specifies a threshold under which colors are considered transparent. If both colors have lower <see cref="F:KGySoft.Drawing.Imaging.Color64.A"/> value than the threshold, then they are considered equal.
            If only one of the specified colors has lower <see cref="F:KGySoft.Drawing.Imaging.Color64.A"/> value than the threshold, then the colors are considered different.
            If both colors' <see cref="F:KGySoft.Drawing.Imaging.Color64.A"/> value are equal to or greater than this value, then <paramref name="tolerance"/> is applied to the <see cref="F:KGySoft.Drawing.Imaging.Color64.A"/> value, too. This parameter is optional.
            <br/>Default value: 0.</param>
            <returns><see langword="true"/>, if the colors are considered equal with the specified <paramref name="tolerance"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.TolerantEquals(KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.ColorF,System.Single,System.Single)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instances are equal using a specified <paramref name="tolerance"/>.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <param name="tolerance">The allowed tolerance for ARGB components. For performance reasons this parameter is not validated. This parameter is optional.
            <br/>Default value: <c>0.000001</c> (10<sup>-6</sup>).</param>
            <param name="alphaThreshold">Specifies a threshold under which colors are considered transparent. If both colors have lower <see cref="F:KGySoft.Drawing.Imaging.ColorF.A"/> value than the threshold, then they are considered equal.
            If only one of the specified colors has lower <see cref="F:KGySoft.Drawing.Imaging.ColorF.A"/> value than the threshold, then the colors are considered different.
            If both colors' <see cref="F:KGySoft.Drawing.Imaging.ColorF.A"/> value are equal to or greater than this value, then <paramref name="tolerance"/> is applied to the <see cref="F:KGySoft.Drawing.Imaging.ColorF.A"/> value, too.
            For performance reasons this parameter is not validated. This parameter is optional.
            <br/>Default value: 0.</param>
            <returns><see langword="true"/>, if the colors are considered equal with the specified <paramref name="tolerance"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.TolerantEquals(KGySoft.Drawing.Imaging.PColor32,KGySoft.Drawing.Imaging.PColor32,System.Byte,System.Byte)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instances are equal using a specified <paramref name="tolerance"/>.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <param name="tolerance">The allowed tolerance for ARGB components.</param>
            <param name="alphaThreshold">Specifies a threshold under which colors are considered transparent. If both colors have lower <see cref="F:KGySoft.Drawing.Imaging.PColor32.A"/> value than the threshold, then they are considered equal.
            If only one of the specified colors has lower <see cref="F:KGySoft.Drawing.Imaging.PColor32.A"/> value than the threshold, then the colors are considered different.
            If both colors' <see cref="F:KGySoft.Drawing.Imaging.PColor32.A"/> value are equal to or greater than this value, then <paramref name="tolerance"/> is applied to the <see cref="F:KGySoft.Drawing.Imaging.PColor32.A"/> value, too. This parameter is optional.
            <br/>Default value: 0.</param>
            <returns><see langword="true"/>, if the colors are considered equal with the specified <paramref name="tolerance"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.TolerantEquals(KGySoft.Drawing.Imaging.PColor64,KGySoft.Drawing.Imaging.PColor64,System.UInt16,System.UInt16)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instances are equal using a specified <paramref name="tolerance"/>.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <param name="tolerance">The allowed tolerance for ARGB components.</param>
            <param name="alphaThreshold">Specifies a threshold under which colors are considered transparent. If both colors have lower <see cref="F:KGySoft.Drawing.Imaging.PColor64.A"/> value than the threshold, then they are considered equal.
            If only one of the specified colors has lower <see cref="F:KGySoft.Drawing.Imaging.PColor64.A"/> value than the threshold, then the colors are considered different.
            If both colors' <see cref="F:KGySoft.Drawing.Imaging.PColor64.A"/> value are equal to or greater than this value, then <paramref name="tolerance"/> is applied to the <see cref="F:KGySoft.Drawing.Imaging.PColor64.A"/> value, too. This parameter is optional.
            <br/>Default value: 0.</param>
            <returns><see langword="true"/>, if the colors are considered equal with the specified <paramref name="tolerance"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorExtensions.TolerantEquals(KGySoft.Drawing.Imaging.PColorF,KGySoft.Drawing.Imaging.PColorF,System.Single,System.Single)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instances are equal using a specified <paramref name="tolerance"/>.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <param name="tolerance">The allowed tolerance for ARGB components. For performance reasons this parameter is not validated. This parameter is optional.
            <br/>Default value: <c>0.000001</c> (10<sup>-6</sup>).</param>
            <param name="alphaThreshold">Specifies a threshold under which colors are considered transparent. If both colors have lower <see cref="F:KGySoft.Drawing.Imaging.PColorF.A"/> value than the threshold, then they are considered equal.
            If only one of the specified colors has lower <see cref="F:KGySoft.Drawing.Imaging.PColorF.A"/> value than the threshold, then the colors are considered different.
            If both colors' <see cref="F:KGySoft.Drawing.Imaging.PColorF.A"/> value are equal to or greater than this value, then <paramref name="tolerance"/> is applied to the <see cref="F:KGySoft.Drawing.Imaging.PColorF.A"/> value, too.
            For performance reasons this parameter is not validated. This parameter is optional.
            <br/>Default value: 0.</param>
            <returns><see langword="true"/>, if the colors are considered equal with the specified <paramref name="tolerance"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IntExtensions">
            <summary>
            In fact, Int32, UInt32, BitVector32
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.KnownPixelFormatExtensions">
            <summary>
            Contains extension methods for the <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> type.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.KnownPixelFormatExtensions.ToBitsPerPixel(KGySoft.Drawing.Imaging.KnownPixelFormat)">
            <summary>
            Gets the bits per pixel (BPP) value of a <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> value without checking
            whether <paramref name="pixelFormat"/> represents a valid value.
            </summary>
            <param name="pixelFormat">The pixel format to convert.</param>
            <returns>The bits per pixel (BPP) value of a <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.KnownPixelFormatExtensions.IsValidFormat(KGySoft.Drawing.Imaging.KnownPixelFormat)">
            <summary>
            Gets whether this <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> instance represents a valid format.
            The valid format values are the named ones, exception with the default <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Undefined"/> value.
            </summary>
            <param name="pixelFormat">The pixel format to be checked.</param>
            <returns><see langword="true"/>, if this <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> instance represents a valid format; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.KnownPixelFormatExtensions.IsIndexed(KGySoft.Drawing.Imaging.KnownPixelFormat)">
            <summary>
            Gets whether this <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> instance represents an indexed format without checking
            whether <paramref name="pixelFormat"/> represents a valid value.
            </summary>
            <param name="pixelFormat">The pixel format to be checked.</param>
            <returns><see langword="true"/>, if this <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> instance represents an indexed format; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.KnownPixelFormatExtensions.HasAlpha(KGySoft.Drawing.Imaging.KnownPixelFormat)">
            <summary>
            Gets whether this <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> instance represents a format with alpha (transparency) without checking
            whether <paramref name="pixelFormat"/> represents a valid value.
            </summary>
            <param name="pixelFormat">The pixel format to be checked.</param>
            <returns><see langword="true"/>, if this <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> instance represents a format with alpha; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.KnownPixelFormatExtensions.GetInfo(KGySoft.Drawing.Imaging.KnownPixelFormat)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> for this <paramref name="pixelFormat"/>.
            </summary>
            <param name="pixelFormat">The pixel format to retrieve a <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> for.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> representing the specified <paramref name="pixelFormat"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> must be a valid format.</exception>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.QuantizerExtensions">
            <summary>
            Contains extension methods for the <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> type.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ScalingModeExtensions.SinC(System.Single)">
            <summary>
            Gets the sine cardinal of <paramref name="x"/>, which is Sin(PI * x) / (PI * x)
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IBitmapData">
            <summary>
            Represents the raw data of a bitmap. To create a managed instance use the <see cref="T:KGySoft.Drawing.Imaging.BitmapDataFactory"/> class.
            To obtain a readable or writable instance for platform specific bitmaps you can either use the specific <c>GetReadableBitmapData</c>, <c>GetWritableBitmapData</c>
            or <c>GetReadWriteBitmapData</c> extension methods when applicable (see the <strong>Remarks</strong> section of the <see cref="N:KGySoft.Drawing"/> namespace for a list
            about the supported platforms). Otherwise, you can use the members of the <see cref="T:KGySoft.Drawing.Imaging.BitmapDataFactory"/> class to create a bitmap data for
            any managed or unmanaged preallocated buffer of any bitmap implementation.
            <br/>See the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">BitmapExtensions.GetReadWriteBitmapData</a>
            method for details and code samples. That method is for the GDI+ <a href="https://docs.microsoft.com/en-us/dotnet/api/system.drawing.bitmap" target="_blank">Bitmap</a> type but the main principles apply for all sources.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.Height">
            <summary>
            Gets the height of the current <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance in pixels.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.Width">
            <summary>
            Gets the width of the current <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance in pixels.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.Size">
            <summary>
            Gets the size of the current <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance in pixels.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> of the current <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance.
            </summary>
            <remarks>
            <para>The value of this property determines how the raw underlying values should be interpreted if the pixels
            are accessed by the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> or <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see>
            methods. Otherwise, in most cases using the members of the interfaces derived from the <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> and <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataRow"/> interfaces
            work seamlessly.</para>
            <para>If this property returns an indexed format (see <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.Indexed"/>),
            then the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> property returns a non-<see langword="null"/> value.</para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.Palette">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance representing the colors used in this <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> if <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> represents an indexed format.
            For indexed bitmaps <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.Indexed"/> property of <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> returns <see langword="true"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize">
            <summary>
            Gets the size of a row in bytes, or zero, if this <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance does not have an actual raw buffer to access.
            </summary>
            <remarks>
            <para>This property can be useful when accessing the bitmap data by the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> or <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> methods.</para>
            <para>As <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> can represent any custom bitmap data, row size is not guaranteed to be a multiple of 4.</para>
            <note>
            <para>This property can return 0 if the current <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance represents a bitmap data without actual raw data or represents a clipped
            region where the left edge of the clipping has an offset compared to the original bitmap data.</para>
            <para>Even if this property returns a nonzero value, it is possible that raw access does not cover the few last columns.
            This may occur in case of indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>s if the bitmap data is clipped and the right edge of the clipping does not fall at byte boundary.</para>
            </note>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor">
            <summary>
            When accessing pixels of indexed bitmaps, or setting pixels of bitmaps without alpha support, gets the color of the background.
            For example, when setting color values with alpha, which are considered opaque, they will be blended with this color before setting the pixel.
            <br/>See the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> extension method for details and examples.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold">
            <summary>
            If this <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> represents a bitmap with single bit alpha or with a palette that has a transparent color,
            then gets a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the pixels to be set will never be transparent.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace">
            <summary>
            Gets the preferred working color space when dealing with the pixels of this <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance.
            Some operations, such as setting pixels or drawing another bitmap data into this instance consider the value of this property.
            Operations that use an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance may override the value of this property.
            <br/>Default value if not implemented: <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>. (Only in .NET Core 3.0/.NET Standard 2.1 and above. In earlier targeted frameworks this member must be implemented.)
            </summary>
            <remarks>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for details and
            image examples about using the different color spaces in various operations.</note>
            <para>For <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> implementations the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace"/> property primarily determines how to
            blend colors in drawing operations or when this <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> does not support transparency and partially transparent
            colors are set by the <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> or <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/> members.
            Custom <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> implementations may ignore the value of this property. Some other operations such as
            cloning, resizing, etc. may also respect the value of this property.</para>
            <para>When <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace"/> is <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, the working color space is chosen based on the context.
            For example, when setting a pixel using the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, the sRGB blending will be picked (unless <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>
            has the <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.LinearGamma"/> flag enabled) because it is faster, and it is the default behavior for most applications.</para>
            <para>For some operations, such as drawing a bitmap data into another one by the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto">DrawInto</see>
            methods the working color space is determined by the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace"/> of the target bitmap data.</para>
            <para>When using a quantizer for some operations, it may override the value of this property. As quantizers are limited to the 32 bit ARGB color space,
            the built-in <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementations in this library also use sRGB blending by default but you can override it by
            the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.ConfigureColorSpace(KGySoft.Drawing.Imaging.WorkingColorSpace)">PredefinedColorsQuantizer.ConfigureColorSpace</see>
            and <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.ConfigureColorSpace(KGySoft.Drawing.Imaging.WorkingColorSpace)">OptimizedPaletteQuantizer.ConfigureColorSpace</see> methods.</para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.IsDisposed">
            <summary>
            Gets whether this <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance is disposed.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IBitmapDataInternal.GetRowCached(System.Int32)">
            <summary>
            Should be called from internal row access if the row is not exposed for public usage.
            If called repeatedly by the same thread, the same row instance is returned with adjusted row index.
            Works only if the result row is used in a scope that is never accessible to multiple threads.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IBitmapDataRow">
            <summary>
            Represents a single row of an <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance. Reading or writing actual pixels is available via the derived interfaces of this type.
            <br/>See the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for details and examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapDataRow.Index">
            <summary>
            Gets the index of the current row. Can fall between zero and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height">Height</see> of the owner <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> (exclusive upper bound).
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapDataRow.Width">
            <summary>
            Gets the width of the row in pixels.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapDataRow.Size">
            <summary>
            Gets the size of the row in bytes, or zero, if this <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataRow"/> instance does not have an actual raw buffer to access.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize">IBitmapData.RowSize</see> property for details.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IBitmapDataRowMovable">
            <summary>
            Represents a single row of an <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance that allows setting its position to any row. Reading or writing actual pixels is available via the derived interfaces of this type.
            <br/>See the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for details and examples.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IBitmapDataRowMovable.MoveNextRow">
            <summary>
            If not already in the last row (<see cref="P:KGySoft.Drawing.Imaging.IBitmapDataRow.Index"/> is less than <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height">Height</see> of the owner <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/>),
            then advances the position of the current <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataRowMovable"/> instance so it points to the next row.
            <br/>See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for examples.
            </summary>
            <returns><see langword="true"/>, if this <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataRow"/> has been advanced to another row;
            <see langword="false"/>, if this <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataRow"/> had already pointed to the last row before this method was called.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IBitmapDataRowMovable.MoveToRow(System.Int32)">
            <summary>
            Moves the current <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataRowMovable"/> to the specified row of the underlying <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/>.
            </summary>
            <param name="y">The row index to set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/> is negative or greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height">Height</see> of the owner <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/>.</exception>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ICustomBitmapData.CreateCompatibleBitmapDataFactory">
            <summary>
            Gets a factory to create a compatible bitmap data of the specified size that can be used by quantizers.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ICustomBitmapDataRow">
            <summary>
            Represents a low-level custom accessor to a bitmap data row.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ICustomBitmapDataRow.BitmapData">
            <summary>
            Gets the corresponding <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> of this row.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ICustomBitmapDataRow.Index">
            <summary>
            Gets the index of the current row. Can fall between zero and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height">Height</see> of the owner <see cref="P:KGySoft.Drawing.Imaging.ICustomBitmapDataRow.BitmapData"/> (exclusive upper bound).
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ICustomBitmapDataRow.GetRefAs``1(System.Int32)">
            <summary>
            Gets a reference to a value interpreted as <typeparamref name="T"/> within the current row at the specified <paramref name="x"/> index.
            </summary>
            <typeparam name="T">The type of the value to return a reference for. Must be a value type without managed references.</typeparam>
            <param name="x">The x-coordinate of the value within the row to retrieve. The valid range depends on the size of <typeparamref name="T"/>.</param>
            <returns>A reference to a value interpreted as <typeparamref name="T"/> within the current row at the specified <paramref name="x"/> index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is not valid for <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> and <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ICustomBitmapDataRow.UnsafeGetRefAs``1(System.Int32)">
            <summary>
            Gets a reference to a value interpreted as <typeparamref name="T"/> within the current row at the specified <paramref name="x"/> index.
            This method is similar to <see cref="M:KGySoft.Drawing.Imaging.ICustomBitmapDataRow.GetRefAs``1(System.Int32)"/> but it does not check whether <paramref name="x"/> is valid for <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> and the size of <typeparamref name="T"/>.
            It may provide a better performance but if <paramref name="x"/> is invalid, then memory can be either corrupted or an <see cref="T:System.AccessViolationException"/> can be thrown.
            </summary>
            <typeparam name="T">The type of the value to return a reference for. Must be a value type without managed references.</typeparam>
            <param name="x">The x-coordinate of the value within the row to retrieve. The valid range depends on the size of <typeparamref name="T"/>.</param>
            <returns>A reference to a value interpreted as <typeparamref name="T"/> within the current row at the specified <paramref name="x"/> index.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ICustomBitmapDataRow`1">
            <summary>
            Represents a low-level custom accessor to a bitmap data row of specific element type.
            </summary>
            <typeparam name="T">The element type of the underlying custom buffer.</typeparam>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ICustomBitmapDataRow`1.Item(System.Int32)">
            <summary>
            Gets a reference to the actual underlying buffer element at the specified index.
            To reinterpret the element type of the underlying buffer use the <see cref="M:KGySoft.Drawing.Imaging.ICustomBitmapDataRow.GetRefAs``1(System.Int32)"/> method instead.
            </summary>
            <param name="index">The element index of the value withing the current row to obtain.</param>
            <returns>A reference to the actual underlying buffer element at the specified index.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IDitherer">
            <summary>
            Represents a ditherer that can be used to dither the result of a quantizing session.
            <br/>For built-in implementations see the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>,
            <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> and <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> classes.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Dither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IDitherer.InitializeReliesOnContent">
            <summary>
            Gets whether <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Threading.IAsyncContext)">Initialize</see> relies on the actual content of the source to be dithered.
            </summary>
            <remarks>
            <para>This property should return <see langword="true"/>, if <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Threading.IAsyncContext)">Initialize</see> method relies on the exact content to be dithered
            in order to make the <see cref="M:KGySoft.Drawing.Imaging.IDitheringSession.GetDitheredColor(KGySoft.Drawing.Imaging.Color32,System.Int32,System.Int32)">GetDitheredColor</see> method work properly.</para>
            <para>If this property returns <see langword="false"/>, then <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Threading.IAsyncContext)">Initialize</see> will be called with an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
            instance, whose <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> properties can be used but the actual content might be different
            from the one will be used when calling the <see cref="M:KGySoft.Drawing.Imaging.IDitheringSession.GetDitheredColor(KGySoft.Drawing.Imaging.Color32,System.Int32,System.Int32)">GetDitheredColor</see> method.</para>
            <para>The return value of this property may affect the performance of some drawing operations where returning <see langword="true"/> forces the source and
            target images to be blended together before dithering the result, while returning <see langword="false"/> allows the ditherer to be initialized
            with the source image and let the <see cref="M:KGySoft.Drawing.Imaging.IDitheringSession.GetDitheredColor(KGySoft.Drawing.Imaging.Color32,System.Int32,System.Int32)">GetDitheredColor</see> method to be called with colors that are blended on-the-fly during the dithering.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Threading.IAsyncContext)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IDitheringSession"/> instance that can be used to dither the result of the specified <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/>
            applied to the specified <paramref name="source"/>.
            </summary>
            <param name="source">The dithering session to be initialized will be performed on the specified <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.</param>
            <param name="quantizingSession">The <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> to which the dithering should be applied.</param>
            <param name="asyncContext">Contains information for asynchronous processing about the current operation. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IDitheringSession"/> instance that can be used to dither the result of the specified <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/>
            applied to the specified <paramref name="source"/>.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IDitheringSession">
            <summary>
            Represents a disposable dithering session returned by the <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Threading.IAsyncContext)">IDitherer.Initialize</see> method
            that is used to dither the result of a quantizing session for a specific <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> source.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IDitherer" />
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IDitheringSession.IsSequential">
            <summary>
            Gets whether this ditherer allows only sequential processing (line by line). Even returning <see langword="true"/> does
            not guarantee that every pixel will be queried. It just enforces that queried rows are processed sequentially.
            </summary>
            <value>
            If <see langword="true"/>, then the <see cref="M:KGySoft.Drawing.Imaging.IDitheringSession.GetDitheredColor(KGySoft.Drawing.Imaging.Color32,System.Int32,System.Int32)">GetDitheredColor</see> method will be called sequentially for each queried pixels.
            If <see langword="false"/>, then the <see cref="M:KGySoft.Drawing.Imaging.IDitheringSession.GetDitheredColor(KGySoft.Drawing.Imaging.Color32,System.Int32,System.Int32)">GetDitheredColor</see> method can be called concurrently for any pixels.
            </value>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IDitheringSession.GetDitheredColor(KGySoft.Drawing.Imaging.Color32,System.Int32,System.Int32)">
            <summary>
            Gets the dithered color of the specified <paramref name="origColor"/> that may depend on the specified coordinates.
            The returned color should be quantized by the <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> passed to the <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Threading.IAsyncContext)">IDitherer.Initialize</see> method,
            which was used to create this <see cref="T:KGySoft.Drawing.Imaging.IDitheringSession"/> instance.
            </summary>
            <param name="origColor">The original color to be dithered.</param>
            <param name="x">The x-coordinate of the pixel to be dithered represented by the specified <paramref name="origColor"/>.</param>
            <param name="y">The y-coordinate of the pixel to be dithered represented by the specified <paramref name="origColor"/>.</param>
            <returns>The dithered color of the specified <paramref name="origColor"/> that may depend on the specified coordinates.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IPalette">
            <summary>
            Represents the properties of a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that can be accessed from custom color lookup functions.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IPalette.Count">
            <summary>
            Gets the number of color entries in the current <see cref="T:KGySoft.Drawing.Imaging.IPalette"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IPalette.BackColor">
            <summary>
            Gets the background color. If a lookup operation
            is performed with a color whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <see cref="P:KGySoft.Drawing.Imaging.IPalette.AlphaThreshold"/>,
            and there is no exact match among the entries of this <see cref="T:KGySoft.Drawing.Imaging.IPalette"/>,
            then the color will be blended with this color before performing the lookup.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IPalette.AlphaThreshold">
            <summary>
            If this <see cref="T:KGySoft.Drawing.Imaging.IPalette"/> has a transparent entry, then gets a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field,
            under which lookup operations will return the first transparent color in the palette.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IPalette.IsGrayscale">
            <summary>
            Gets whether the palette consists of grayscale entries only.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IPalette.HasAlpha">
            <summary>
            Gets whether the palette contains at least one entry that is not fully opaque.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IPalette.WorkingColorSpace">
            <summary>
            Gets the preferred color space when this <see cref="T:KGySoft.Drawing.Imaging.IPalette"/> instance performs blending and measuring distance when looking for a nearest color.
            </summary>
            <remarks>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for details and
            image examples about using the different color spaces in various operations.</note>
            <para>If the value of this property is <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the sRGB color space is used.</para>
            <para>If this palette uses a custom nearest color lookup, then it depends on the custom function whether it considers the value of this property.</para>
            <note>Please note that palette entries themselves always represent sRGB color values, regardless the value of this property.</note>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IPalette.Item(System.Int32)">
            <summary>
            Gets the color entry of this <see cref="T:KGySoft.Drawing.Imaging.IPalette"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index of the color entry to be retrieved.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance representing the color entry of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> at the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> must be equal to or greater than zero and less <see cref="P:KGySoft.Drawing.Imaging.IPalette.Count"/>.</exception>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IQuantizer">
            <summary>
            Represents a quantizer that can be used to reduce the number of colors of an image.
            <br/>For built-in implementations see the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> and <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> classes.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Quantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IQuantizer.PixelFormatHint">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> that is compatible with this <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/>.
            It is recommended to return the format with the lowest bits-per-pixel value that is still compatible with this instance.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IQuantizer.InitializeReliesOnContent">
            <summary>
            Gets whether <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext)">Initialize</see> relies on the actual content of the source to be quantized.
            </summary>
            <remarks>
            <para>This property should return <see langword="true"/>, if <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext)">Initialize</see> method relies on the exact content to be quantized
            in order to generate a palette and make the <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">GetQuantizedColor</see> method work properly.</para>
            <para>If this property returns <see langword="false"/>, then <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext)">Initialize</see> will be called with an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
            instance, whose <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> properties can be used but the actual content might be different
            from the one will be used when calling the <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">GetQuantizedColor</see> method.</para>
            <para>The return value of this property may affect the performance of some drawing operations where returning <see langword="true"/> forces the source and
            target images to be blended together before quantizing the result, while returning <see langword="false"/> allows the quantizer to be initialized
            with the source image and let the <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">GetQuantizedColor</see> method to be called with colors that are blended on-the-fly during the quantization.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> instance that can be used to quantize the colors of the specified <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.
            </summary>
            <param name="source">The quantizing session to be initialized will be performed on the specified <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.</param>
            <param name="asyncContext">Contains information for asynchronous processing about the current operation. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> instance that can be used to quantize the colors of the specified <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IQuantizingSession">
            <summary>
            Represents a disposable quantizing session returned by the <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext)">IQuantizer.Initialize</see> method
            that is used to quantize (reduce the colors) of a specific <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> source.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IQuantizer" />
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IQuantizingSession.Palette">
            <summary>
            Gets the palette containing the colors of the quantized result. Expected to be called if the target of the quantization
            is indexed. Typical indexed pixel formats contain no more than 256 colors; however, it is allowed to return a bigger <see cref="T:KGySoft.Drawing.Imaging.Palette"/>.
            If the corresponding <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> returns a non-indexed pixel format in its <see cref="P:KGySoft.Drawing.Imaging.IQuantizer.PixelFormatHint"/> property, then this property can return <see langword="null"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IQuantizingSession.BackColor">
            <summary>
            Gets the background color for this <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/>.
            When the <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">GetQuantizedColor</see> is called with a color with alpha,
            which is considered opaque, then it will be blended with this color before quantizing.
            <br/>See also the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold"/> property for details.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold">
            <summary>
            If this <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> can produce transparent pixels, then gets the alpha threshold value
            that can be used to determine whether a color with alpha should be considered transparent or should be blended with <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.BackColor"/>.
            </summary>
            <remarks>
            <para>If this <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> can produce transparent pixels, and <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">GetQuantizedColor</see> is called with a color,
            whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is lower than the threshold, then the returned color will be transparent.</para>
            <para>If this <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> cannot produce transparent pixels, or <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">GetQuantizedColor</see> is called with a color,
            whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is greater than or equal to the threshold, then the returned color will be will be blended with <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.BackColor"/> before quantizing.</para>
            <para>If <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold"/> is 0, then the quantized color will never be transparent.</para>
            <para>If <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold"/> is 255, then only fully opaque colors will not be considered transparent.</para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IQuantizingSession.IsGrayscale">
            <summary>
            Gets whether this <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> works with grayscale colors.
            Its value may help to optimize the processing in some cases but it is allowed to return always <see langword="false"/>.
            <br/>Default value if not implemented: <see langword="false"/>. (Only in .NET Core 3.0/.NET Standard 2.1 and above. In earlier targeted frameworks this member must be implemented.)
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IQuantizingSession.WorkingColorSpace">
            <summary>
            Gets the preferred working color space of this <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> instance.
            If this quantizing session is used by a ditherer, then <see cref="T:KGySoft.Drawing.Imaging.IDitheringSession"/> implementations may also respect the value of this property.
            <br/>Default value if not implemented: <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>. (Only in .NET Core 3.0/.NET Standard 2.1 and above. In earlier targeted frameworks this member must be implemented.)
            </summary>
            <remarks>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for details and
            image examples about using the different color spaces in various operations.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets the quantized color of the specified <paramref name="origColor"/>. If <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.Palette"/> property has non-<see langword="null"/> return value,
            then the result color must be a valid <see cref="T:KGySoft.Drawing.Imaging.Palette"/> entry.
            <br/>See also the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold"/> property for details.
            </summary>
            <param name="origColor">The original color to be quantized.</param>
            <returns>The quantized color.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IReadableBitmapData">
            <summary>
            Represents a readable <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance.
            To create an instance use the <see cref="T:KGySoft.Drawing.Imaging.BitmapDataFactory"/> class or the <c>GetReadableBitmapData</c> extension methods for various platform dependent bitmap implementations.
            <br/>See the <strong>Remarks</strong> section of the <see cref="N:KGySoft.Drawing"/> namespace for a list about the technologies with dedicated support.
            <br/>See the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">BitmapExtensions.GetReadWriteBitmapData</a>
            method for details and code samples. That method is for the GDI+ <a href="https://docs.microsoft.com/en-us/dotnet/api/system.drawing.bitmap" target="_blank">Bitmap</a> type but the main principles apply for all sources.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.BitmapDataFactory"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IReadableBitmapData.FirstRow">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRowMovable"/> instance representing the first row of the current <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.
            Subsequent rows can be accessed by calling the <see cref="M:KGySoft.Drawing.Imaging.IBitmapDataRowMovable.MoveNextRow">MoveNextRow</see> method on the returned instance
            while it returns <see langword="true"/>. Alternatively, you can use the <see cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.Item(System.Int32)">indexer</see> or the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapData.GetMovableRow(System.Int32)">GetMovableRow</see> method to obtain any row.
            <br/>See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for examples.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> has already been disposed.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.Item(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapData.GetMovableRow(System.Int32)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IReadableBitmapData.Item(System.Int32)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.
            When obtaining the same row repeatedly, then a cached instance is returned. To get a movable row use the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapData.GetMovableRow(System.Int32)">GetMovableRow</see> method instead.
            <br/>See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for examples.
            </summary>
            <param name="y">The y-coordinate of the row to obtain.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IReadableBitmapData.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the specified coordinates.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <param name="y">The y-coordinate of the pixel to retrieve.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> instance that represents the color of the specified pixel.</returns>
            <remarks>
            <para>Use the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapData.GetColor32(System.Int32,System.Int32)">GetColor32</see> method for a slightly better performance.</para>
            <para>Line by line processing is also possible by obtaining the first row by the <see cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.FirstRow"/> property,
            getting the pixels by the <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRowMovable"/> members and then moving to the next line by the <see cref="M:KGySoft.Drawing.Imaging.IBitmapDataRowMovable.MoveNextRow">MoveNextRow</see> method.</para>
            <para>The returned value represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. To access the actual <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>-dependent raw value
            obtain a row and use the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> method.</para>
            <note>See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for examples.</note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/>.
            <br/>-or-
            <br/><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapData.GetColor32(System.Int32,System.Int32)"/>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.FirstRow"/>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.Item(System.Int32)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IReadableBitmapData.GetColor32(System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the specified coordinates as a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> value.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapData.GetPixel(System.Int32,System.Int32)">GetPixel</see> method for details.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <param name="y">The y-coordinate of the pixel to retrieve.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents the color of the specified pixel.</returns>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/>.
            <br/>-or-
            <br/><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.FirstRow"/>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.Item(System.Int32)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IReadableBitmapData.GetMovableRow(System.Int32)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRowMovable"/> instance representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.
            Unlike the <see cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.Item(System.Int32)">indexer</see>, this method always allocates a new instance.
            </summary>
            <param name="y">The y-coordinate of the row to obtain.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRowMovable"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.Item(System.Int32)"/>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.FirstRow"/>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow">
            <summary>
            Provides a fast read-only access to a single row of an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.
            <br/>See the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for details and examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.Item(System.Int32)">
            <summary>
            Gets the color of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents the color of the specified pixel.</returns>
            <remarks>
            <para>To return a <see cref="T:System.Drawing.Color"/> structure you can use also the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)">GetColor</see> method but this member has a slightly better performance.</para>
            <para>The returned value represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>. To access the actual <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>-dependent raw value
            use the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> method.</para>
            <note>See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for examples.</note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColorIndex(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)">
            <summary>
            Gets the color of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> instance that represents the color of the specified pixel.</returns>
            <remarks>
            <para>If you don't really need to retrieve a 20 byte wide <see cref="T:System.Drawing.Color"/> structure (16 bytes on 32-bit targets), then you can use the
            <see cref="P:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.Item(System.Int32)">indexer</see> for a slightly better performance, which returns a more compact 4-byte <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure.</para>
            <para>The returned value represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>. To access the actual <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>-dependent raw value
            use the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> method.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.Item(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColorIndex(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColorIndex(System.Int32)">
            <summary>
            If the owner <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> is an indexed one, then gets the color index of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            </summary>
            <param name="x">The x-coordinate of the color index to retrieve.</param>
            <returns>A palette index that represents the color of the specified pixel.</returns>
            <remarks>
            <para>This method can be used only if the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> returns an indexed format
            (which are <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format8bppIndexed"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format4bppIndexed"/> and <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format1bppIndexed"/>).
            Otherwise, this method throws an <see cref="T:System.InvalidOperationException"/>.</para>
            <para>To get the actual color of the pixel at the <paramref name="x"/> coordinate you can use the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)">GetColor</see> method,
            the <see cref="P:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.Item(System.Int32)">indexer</see>, or you can call the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetColor(System.Int32)">Palette.GetColor</see> method with the return value of this method
            on the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance returned by the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.</exception>
            <exception cref="T:System.InvalidOperationException">This <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/> does not belong to a row of an indexed <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.Item(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">
             <summary>
             Gets the underlying raw value within the current <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/> at the specified <paramref name="x"/> coordinate.
             </summary>
             <typeparam name="T">The type of the value to return. Must be a value type without managed references.</typeparam>
             <param name="x">The x-coordinate of the value within the row to retrieve. The valid range depends on the size of <typeparamref name="T"/>.</param>
             <returns>The raw value within the current <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/> at the specified <paramref name="x"/> coordinate.</returns>
             <remarks>
             <para>This method returns the actual raw underlying data as arbitrary unmanaged value type (a value type is unmanaged if contains no managed references).
             <typeparamref name="T"/> can have any size so you using this method can access multiple pixels or individual color channels.</para>
             <para>To determine the row width in bytes use the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.</para>
             <para>To determine the actual pixel size use the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.</para>
             </remarks>
             <example>
             The following example demonstrates how to access the premultiplied color values of a bitmap data with premultiplied pixel format:
             <note>This example requires to reference the <a href="https://www.nuget.org/packages/KGySoft.Drawing/" target="_blank">KGySoft.Drawing</a> package. When targeting .NET 7 or later it can be executed on Windows only.</note>
             <code lang="C#"><![CDATA[
             using (IReadWriteBitmapData bitmapData = BitmapDataFactory.CreateBitmapData(
                 new Size(1, 1), KnownPixelFormat.Format32bppPArgb))
             {
                 // setting a white pixel with 50% alpha:
                 bitmapData.SetPixel(0, 0, Color.FromArgb(128, 255, 255, 255));
            
                 // reading the raw premultiplied color value:
                 Console.WriteLine(bitmapData[0].ReadRaw<Color32>(0)); // 80808080 [A=128; R=128; G=128; B=128]
            
                 // but reading it by the indexer (or by GetPixel/GetColor) transforms the color back:
                 Console.WriteLine(bitmapData[0][0]); // 80FFFFFF [A=128; R=255; G=255; B=255]
             }]]></code>
             <note type="tip">See also the example at the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">IWritableBitmapDataRow.WriteRaw</see> method.</note>
             </example>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or the memory location of the value (considering the size of <typeparamref name="T"/>)
             at least partially exceeds the bounds of the current row.</exception>
             <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.Item(System.Int32)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColorIndex(System.Int32)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)"/>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRowMovable">
            <summary>
            Represents a single row of an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance that allows setting its position to any row.
            <br/>See the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for details and examples.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData">
            <summary>
            Represents an <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance with read/write access.
            To create an instance use the <see cref="T:KGySoft.Drawing.Imaging.BitmapDataFactory"/> class or the <c>GetReadWriteBitmapData</c> extension methods for various platform dependent bitmap implementations.
            <br/>See the <strong>Remarks</strong> section of the <see cref="N:KGySoft.Drawing"/> namespace for a list about the technologies with dedicated support.
            <br/>See the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">BitmapExtensions.GetReadWriteBitmapData</a>
            method for details and code samples. That method is for the GDI+ <a href="https://docs.microsoft.com/en-us/dotnet/api/system.drawing.bitmap" target="_blank">Bitmap</a> type but the main principles apply for all sources.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.BitmapDataFactory"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IReadWriteBitmapData.FirstRow">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow"/> instance representing the first row of the current <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            Subsequent rows can be accessed by calling the <see cref="M:KGySoft.Drawing.Imaging.IBitmapDataRowMovable.MoveNextRow">MoveNextRow</see> method on the returned instance
            while it returns <see langword="true"/>. Alternatively, you can use the <see cref="P:KGySoft.Drawing.Imaging.IReadWriteBitmapData.Item(System.Int32)">indexer</see> to obtain any row.
            <br/>See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for examples.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> has already been disposed.</exception>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IReadWriteBitmapData.Item(System.Int32)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            When obtaining the same row repeatedly, then a cached instance is returned. To get a movable row use the <see cref="M:KGySoft.Drawing.Imaging.IReadWriteBitmapData.GetMovableRow(System.Int32)">GetMovableRow</see> method instead.
            <br/>See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for examples.
            </summary>
            <param name="y">The y-coordinate of the row to obtain.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IReadWriteBitmapData.GetMovableRow(System.Int32)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRowMovable"/> instance representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            Unlike the <see cref="P:KGySoft.Drawing.Imaging.IReadWriteBitmapData.Item(System.Int32)">indexer</see>, this method always allocates a new instance.
            </summary>
            <param name="y">The y-coordinate of the row to obtain.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRowMovable"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadWriteBitmapData.Item(System.Int32)"/>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadWriteBitmapData.FirstRow"/>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow">
            <summary>
            Provides a fast read-write access to a single row of an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            <br/>See the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for details and examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow.Item(System.Int32)">
            <summary>
            Gets or sets the color of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <value>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents the color of the specified pixel.</value>
            <remarks>
            <para>To return a <see cref="T:System.Drawing.Color"/> structure you can use also the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)">GetColor</see> method but this member has a slightly better performance.</para>
            <para>To set the color from a <see cref="T:System.Drawing.Color"/> structure you can use also the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)">SetColor</see> method but this member has a slightly better performance.</para>
            <para>The color value represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>. To access the actual <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>-dependent raw data
            use the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> and <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> methods.</para>
            <para>If the color to be set is not supported by owner <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, then it will be quantized to a supported color value.</para>
            <note>See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for examples.</note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColorIndex(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColorIndex(System.Int32,System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)"/>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRowMovable">
            <summary>
            Represents a single row of an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that allows setting its position to any row.
            <br/>See the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for details and examples.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IWritableBitmapData">
            <summary>
            Represents a writable <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance.
            To create an instance use the <see cref="T:KGySoft.Drawing.Imaging.BitmapDataFactory"/> class or the <c>GetWritableBitmapData</c> extension methods for various platform dependent bitmap implementations.
            <br/>See the <strong>Remarks</strong> section of the <see cref="N:KGySoft.Drawing"/> namespace for a list about the technologies with dedicated support.
            <br/>See the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">BitmapExtensions.GetReadWriteBitmapData</a>
            method for details and code samples. That method is for the GDI+ <a href="https://docs.microsoft.com/en-us/dotnet/api/system.drawing.bitmap" target="_blank">Bitmap</a> type but the main principles apply for all sources.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.BitmapDataFactory"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IWritableBitmapData.FirstRow">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRowMovable"/> instance representing the first row of the current <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.
            Subsequent rows can be accessed by calling the <see cref="M:KGySoft.Drawing.Imaging.IBitmapDataRowMovable.MoveNextRow">MoveNextRow</see> method on the returned instance
            while it returns <see langword="true"/>. Alternatively, you can use the <see cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.Item(System.Int32)">indexer</see> or the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.GetMovableRow(System.Int32)">GetMovableRow</see> method to obtain any row.
            <br/>See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for examples.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> has already been disposed.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.Item(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.GetMovableRow(System.Int32)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IWritableBitmapData.Item(System.Int32)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.
            When obtaining the same row repeatedly, then a cached instance is returned. To get a movable row use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.GetMovableRow(System.Int32)">GetMovableRow</see> method instead.
            <br/>See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for examples.
            </summary>
            <param name="y">The y-coordinate of the row to obtain.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the pixel at the specified coordinates.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <param name="y">The y-coordinate of the pixel to set.</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> structure that represents the color to assign to the specified pixel.</param>
            <remarks>
            <para>Use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetColor32(System.Int32,System.Int32,KGySoft.Drawing.Imaging.Color32)">SetColor32</see> method for a slightly better performance.</para>
            <para>Line by line processing is also possible by obtaining the first row by the <see cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.FirstRow"/> property,
            setting the pixels by the <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRowMovable"/> members and then moving to the next line by the <see cref="M:KGySoft.Drawing.Imaging.IBitmapDataRowMovable.MoveNextRow">MoveNextRow</see> method.</para>
            <para>The <paramref name="color"/> argument represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. To access the actual <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>-dependent raw value
            obtain a row and use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> method.</para>
            <para>If the color to be set is not supported by owner <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, then it will be quantized to a supported color value.</para>
            <note>See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for an example.</note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/>.
            <br/>-or-
            <br/><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetColor32(System.Int32,System.Int32,KGySoft.Drawing.Imaging.Color32)"/>
            <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.FirstRow"/>
            <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.Item(System.Int32)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetColor32(System.Int32,System.Int32,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Sets the color of the pixel at the specified coordinates using a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> value.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">SetPixel</see> method for details.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <param name="y">The y-coordinate of the pixel to set.</param>
            <param name="color">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure that represents the color to assign to the specified pixel.</param>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/>.
            <br/>-or-
            <br/><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.FirstRow"/>
            <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.Item(System.Int32)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IWritableBitmapData.GetMovableRow(System.Int32)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRowMovable"/> instance representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.
            Unlike the <see cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.Item(System.Int32)">indexer</see>, this method always allocates a new instance.
            </summary>
            <param name="y">The y-coordinate of the row to obtain.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRowMovable"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.Item(System.Int32)"/>
            <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.FirstRow"/>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow">
            <summary>
            Provides a fast write-only access to a single row of an <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.
            <br/>See the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a>method for details and examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.Item(System.Int32)">
            <summary>
            Sets the color of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <value>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents the color of the specified pixel.</value>
            <remarks>
            <para>To set the color from a <see cref="T:System.Drawing.Color"/> structure you can use also the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)">SetColor</see> method but this member has a slightly better performance.</para>
            <para>The color value represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>. To access the actual <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>-dependent raw data
            use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> method.</para>
            <para>If the color to be set is not supported by owner <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>, then it will be quantized to a supported color value.</para>
            <note>See the <strong>Examples</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for examples.</note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColorIndex(System.Int32,System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> instance that represents the color of the specified pixel.</param>
            <remarks>
            <para>If you don't really need to set the pixel color from a 20 byte wide <see cref="T:System.Drawing.Color"/> structure (16 bytes on 32-bit targets), then you can use the
            <see cref="P:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.Item(System.Int32)">indexer</see> for a slightly better performance, which uses the more compact 4-byte <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure.</para>
            <para>The specified <paramref name="color"/> represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>. To access the actual <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>-dependent raw data
            use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> method.</para>
            <para>If the color to be set is not supported by owner <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>, then it will be quantized to a supported color value.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.Item(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColorIndex(System.Int32,System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColorIndex(System.Int32,System.Int32)">
            <summary>
            If the owner <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> has an indexed pixel format, then sets the color index of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            </summary>
            <param name="x">The x-coordinate of the color index to set.</param>
            <param name="colorIndex">A palette index that represents the color to be set.</param>
            <remarks>
            <para>This method can be used only if the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> returns an indexed format
            (which are <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format8bppIndexed"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format4bppIndexed"/> and <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format1bppIndexed"/>).
            Otherwise, this method throws an <see cref="T:System.InvalidOperationException"/>.</para>
            <para>To set the actual color of the pixel at the <paramref name="x"/> coordinate you can use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)">SetColor</see> method or
            the <see cref="P:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.Item(System.Int32)">indexer</see>.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.</exception>
            <exception cref="T:System.InvalidOperationException">This <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/> does not belong to a row of an indexed <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.Item(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">
             <summary>
             Sets the underlying raw value within the current <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/> at the specified <paramref name="x"/> coordinate.
             </summary>
             <typeparam name="T">The type of the value to write. Must be a value type without managed references.</typeparam>
             <param name="x">The x-coordinate of the value within the row to write. The valid range depends on the size of <typeparamref name="T"/>.</param>
             <param name="data">The raw value to write.</param>
             <remarks>
             <para>This method writes the actual raw underlying data. <typeparamref name="T"/> can have any size so you by using this method you can write multiple pixels as well as individual color channels.</para>
             <para>To determine the row width in bytes use the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.</para>
             <para>To determine the actual pixel size use the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instance.</para>
             </remarks>
             <example>
             The following example demonstrates how to write multiple pixels by a single <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> call:
             <note>This example requires to reference the <a href="https://www.nuget.org/packages/KGySoft.Drawing/" target="_blank">KGySoft.Drawing</a> package. When targeting .NET 7 or later it can be executed on Windows only.</note>
             <code lang="C#"><![CDATA[
             using (Bitmap bmp4bppIndexed = new Bitmap(8, 1, PixelFormat.Format4bppIndexed))
             using (IReadWriteBitmapData bitmapData = bmp4bppIndexed.GetReadWriteBitmapData())
             {
                 IReadWriteBitmapDataRow row = bitmapData[0];
            
                 // Writing as uint writes 8 pixels at once in case of a 4 BPP indexed bitmap:
                 row.WriteRaw<uint>(0, 0x12345678);
            
                 // because of little endianness and 4 BPP pixel order the color indices will be printed
                 // in the following order: 7, 8, 5, 6, 3, 4, 1, 2
                 for (int x = 0; x < bitmapData.Width; x++)
                     Console.WriteLine(row.GetColorIndex(x));
             }]]></code>
             <note type="tip">See also the example at the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">IReadableBitmapDataRow.ReadRaw</see> method.</note>
             </example>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or the memory location of the value (considering the size of <typeparamref name="T"/>)
             at least partially exceeds the bounds of the current row.</exception>
             <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.Item(System.Int32)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColorIndex(System.Int32,System.Int32)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)"/>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRowMovable">
            <summary>
            Represents a single row of an <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instance that allows setting its position to any row.
            <br/>See the <strong>Remarks</strong> section of the <a href="https://docs.kgysoft.net/drawing/html/M_KGySoft_Drawing_BitmapExtensions_GetReadWriteBitmapData.htm">GetReadWriteBitmapData</a> method for details and examples.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer">
            <summary>
            Represents a quantizer that can generate an optimized set of colors best matching to the original image.
            Use the static methods to retrieve an instance. For using predefined colors see the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> class.
            </summary>
            <remarks>
            <para>The <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class can be used to reduce colors of an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> using a
            palette of up to 65536 colors where the palette entries are optimized for the quantized image.
            <note>Though more than 256 colors are supported, the typical goal of palette optimization is to adjust the colors for an indexed pixel format.
            Natively supported indexed formats cannot have more than 256 colors, though you are allowed to create images with custom pixel format
            by using the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData">BitmapDataFactory.CreateBitmapData</see> methods that
            have <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> parameters. Please note though that a large palette may have impact on both memory usage and performance.</note></para>
            <para>This class supports palette optimization by three different algorithms (see the
            <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see>, <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see> and <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see> methods)</para>
            <para>The following table compares the algorithms supported by the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class:
            <list type="table">
            <listheader><term></term><term><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see></term><term><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see></term><term><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see></term></listheader>
            <item>
            <term><strong>Speed</strong></term>
            <term>With default settings usually slower than the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see>'s algorithm but faster than <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see>.
            When using high <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.ConfigureBitLevel(System.Nullable{System.Int32})">bit levels</see> and the source is a true color image, then it is generally faster for high requested colors,
            and can be faster even than <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see>'s algorithm using the same bit level.</term>
            <term>In most cases this is the slowest one of the three algorithms, especially for larger images.</term>
            <term>With default settings this is almost always the fastest one of the three algorithms
            (still much slower though than the quantizers of the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> class).
            When using high <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.ConfigureBitLevel(System.Nullable{System.Int32})">bit levels</see> it can be the slowest one for small images and gets to be the fastest one for larger image sizes.</term>
            </item>
            <item>
            <term><strong>Memory consumption<sup>*</sup></strong></term>
            <term>Generating the palette may consume quite a large amount of memory but it also depends on the number of different colors
            of the source image and the requested color count. The memory is continuously allocated on demand and in extreme cases it may consume a huge amount of memory.
            The memory usage can be limited by the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.ConfigureBitLevel(System.Nullable{System.Int32})">ConfigureBitLevel</see> method.</term>
            <term>The memory usage mainly depends on the image size and somewhat on the requested color count. Quantizing a large image may consume a large amount of memory
            even if the image itself consist of just a few colors.</term>
            <term>This quantizer consumes a fairly large fix amount of memory, even if the source has few colors and the requested color count is small.
            Most of the memory is allocated at once, regardless of the image size or its actual colors, and a smaller portion is allocated dynamically, which depends on the number of requested colors.
            On platforms where available, array pooling is used, which releases the used memory only after a while if the buffers are not re-used within a time interval.
            The memory usage can be adjusted by the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.ConfigureBitLevel(System.Nullable{System.Int32})">ConfigureBitLevel</see> method.</term>
            </item>
            <item>
            <term><strong>Quality</strong></term>
            <term><list type="bullet">
            <item>Usually poorer quality for smaller palettes (below 16 colors).</item>
            <item>Banding may appear in images with large low-frequency areas (eg. sky or water in photos).</item>
            <item>Balanced quality for larger palettes and photo-like images.</item>
            </list></term>
            <term><list type="bullet">
            <item>Usually better quality for smaller palettes.</item>t
            <item>Excellent, nearly banding-free results with images with large low-frequency areas (eg. sky or water in photos).</item>
            <item>May provide poorer quality for small areas with unique colors (eg. a smaller human face in a large photo).</item>
            </list></term>
            <term><list type="bullet">
            <item>Usually very good quality even for smaller palettes.</item>
            <item>Banding may appear in images with large low-frequency areas (eg. sky or water in photos).
            By default, banding may appear for monochromatic images even if the requested number of colors would allow a banding-free result
            but this can be configured by the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.ConfigureBitLevel(System.Nullable{System.Int32})">ConfigureBitLevel</see> method.</item>
            <item>Very good quality for photo-like images, especially if the image has no homogeneous low-frequency areas.</item>
            </list></term>
            </item>
            </list>
            <note>
            <para><sup>*</sup>Memory consumption mentioned in the table affects palette generation only.
            That occurs when the <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Threading.IAsyncContext)">IQuantizer.Initialize</see> method of an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance
            is called. As soon as this method returns with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> instance, the memory mentioned in the table can be reclaimed
            (which does not necessarily happen immediately on platforms that support array pooling, which is utilized by the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see>'s algorithm).</para>
            <para>On the other hand, the <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> can also consume a large amount of memory during the quantization
            because its <see cref="T:KGySoft.Drawing.Imaging.Palette"/> caches the quantization results of the source image pixels, though this caching does not
            depend on the chosen algorithm and the used memory can also be reclaimed when the <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> is disposed.</para>
            <para>Keeping a reference to an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> consumes almost no memory when there is no active quantization session in progress.</para>
            </note>
            </para>
            <para>The following table compares the results of the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instances returned by the
            <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see>, <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see> and <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see> methods.
            <note>For better comparison none of the images are dithered in the examples, though the visual quality can be improved by using dithering.
            See the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> and <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/>
            classes for some built-in <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementations.</note>
            <table class="table is-hoverable">
            <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
            <tbody>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/AlphaGradientOctree256Silver.gif" alt="Color hues quantized by Octree algorithm using 256 colors, silver background, zero alpha threshold"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see> algorithm, 256 colors, silver background, zero alpha threshold</para>
            <para><img src="../Help/Images/AlphaGradientMedianCut256Silver.gif" alt="Color hues quantized by Median Cut algorithm using 256 colors, silver background, zero alpha threshold"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see> algorithm, 256 colors, silver background, zero alpha threshold</para>
            <para><img src="../Help/Images/AlphaGradientWu256Silver.gif" alt="Color hues quantized by Wu's algorithm using 256 colors, silver background, zero alpha threshold"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see>'s algorithm, 256 colors, silver background, zero alpha threshold</para></div></td>
            </tr>
            <tr><td><div style="text-align:center;">
            <para><img src="../Help/Images/Information256.png" alt="Information icon with transparent background"/>
            <br/>Information icon with transparency</para></div></td>
            <td><div style="text-align:center;">
            <para><img src="../Help/Images/InformationOctree4Silver.gif" alt="Information icon quantized by Octree algorithm using 4 colors, silver background, zero alpha threshold"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see> algorithm, 4 colors, silver background, zero alpha threshold</para>
            <para><img src="../Help/Images/InformationMedianCut4Silver.gif" alt="Information icon quantized by Median Cut algorithm using 4 colors, silver background, zero alpha threshold"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see> algorithm, 4 colors, silver background, zero alpha threshold</para>
            <para><img src="../Help/Images/InformationWu4Silver.gif" alt="Information icon quantized by Wu's algorithm using 4 colors, silver background, zero alpha threshold"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see>'s algorithm, 4 colors, silver background, zero alpha threshold</para>
            <para><img src="../Help/Images/InformationOctree256Black.gif" alt="Information icon quantized by Octree algorithm using 256 colors, black background, alpha threshold = 128"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see> algorithm, 256 colors, black background, alpha threshold = 128. Banding appeared in the result.</para>
            <para><img src="../Help/Images/InformationMedianCut256Black.gif" alt="Information icon quantized by Median Cut algorithm using 256 colors, black background, alpha threshold = 128"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see> algorithm, 256 colors, black background, alpha threshold = 128. Practically there is no banding in the result.</para>
            <para><img src="../Help/Images/InformationWu256Black.gif" alt="Information icon quantized by Wu's algorithm using 256 colors, black background, alpha threshold = 128"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see>'s algorithm, 256 colors, black background, alpha threshold = 128. A slight banding can be observed,
            as if the source image had been prequantized by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb1555(System.Drawing.Color,System.Byte)">PredefinedColorsQuantizer.Argb1555</see> quantizer first.
            You get this result if you use the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.ConfigureBitLevel(System.Nullable{System.Int32})">ConfigureBitLevel</see> method with 5 bits (which is the default for Wu with 256 colors).
            The banding can be reduced by using higher bit levels, which increases also memory usage and processing time.</para></div></td>
            </tr>
            </tbody></table>
            </para>
            </remarks>
            <seealso cref="T:KGySoft.Drawing.Imaging.IQuantizer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Quantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Dither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.PixelFormatHint">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>, which is compatible with this <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.BackColor">
            <summary>
            Gets the back color used by this <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>. This value will be returned also by
            the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.BackColor"/> property once an <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> is created from this instance.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A"/> field of the returned color is always 255.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold">IQuantizingSession.AlphaThreshold</see> property for details.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.AlphaThreshold">
            <summary>
            Gets the alpha threshold value used by this <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>. This value will be returned also by
            the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold"/> property once an <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> is created from this instance.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold">IQuantizingSession.AlphaThreshold</see> property for details.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MaxColors">
            <summary>
            Gets the maximum number of colors this <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> is allowed to use.
            Once an <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> is created from this instance the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.Palette"/> property
            will contain no more colors than the value of this property.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WorkingColorSpace">
            <summary>
            Gets the color space of this <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance for quantizing. This value will be returned also by
            the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.WorkingColorSpace"/> property once an <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> is created from this instance.
            You can use the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.ConfigureColorSpace(KGySoft.Drawing.Imaging.WorkingColorSpace)">ConfigureColorSpace</see> method to create a clone of this <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>
            using a different working color space.
            </summary>
            <remarks>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for details and
            image examples about using the different color spaces in various operations.</note>
            <para>If the value of this property is <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the sRGB color space is used
            because the <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">IQuantizingSession.GetQuantizedColor</see> method works with sRGB colors anyway.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that quantizes colors of an image using the Octree quantizing algorithm.
             </summary>
             <param name="maxColors">The upper limit of generated colors. Must be between 2 and 65536, inclusive bounds. This parameter is optional.
             <br/>Default value: <c>256</c>.</param>
             <param name="backColor">Colors with alpha above the <paramref name="alphaThreshold"/> will be blended with this color before quantizing.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then the quantized colors will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that quantizes colors of an image using the Octree quantizing algorithm.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxColors"/> must be between 2 and 65536, inclusive bounds.</exception>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <note>This example requires to reference the <a href="https://www.nuget.org/packages/KGySoft.Drawing/" target="_blank">KGySoft.Drawing</a> package. When targeting .NET 7 or later it can be executed on Windows only.</note>
             <code lang="C#"><![CDATA[
             Bitmap bmpOriginal = Icons.Shield.ExtractBitmap(new Size(256, 256));
             bmpOriginal.SaveAsPng(@"c:\temp\original.png");
            
             IQuantizer quantizer = OptimizedPaletteQuantizer.Octree(256);
             Bitmap bmpConverted = bmpOriginal.ConvertPixelFormat(PixelFormat.Format8bppIndexed, quantizer);
             bmpConverted.SaveAsGif(@"c:\temp\converted.gif");]]></code>
             <para>The example above produces the following result:
             <list type="table">
             <item><term><c>original.png</c></term><term><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/></term></item>
             <item><term><c>converted.gif</c></term><term><img src="../Help/Images/ShieldOctree256Black.gif" alt="Shield icon quantized to 256 colors using the Octree algorithm"/></term></item>
             </list></para>
             <note type="tip">For more image examples and side-by-side comparison with the other algorithms see the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.</note>
             </example>
             <seealso cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that quantizes colors of an image using the Median Cut quantizing algorithm.
             </summary>
             <param name="maxColors">The upper limit of generated colors. Must be between 2 and 65536, inclusive bounds. This parameter is optional.
             <br/>Default value: <c>256</c>.</param>
             <param name="backColor">Colors with alpha above the <paramref name="alphaThreshold"/> will be blended with this color before quantizing.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then the quantized colors will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that quantizes colors of an image using the Median Cut quantizing algorithm.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxColors"/> must be between 2 and 65536, inclusive bounds.</exception>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <note>This example requires to reference the <a href="https://www.nuget.org/packages/KGySoft.Drawing/" target="_blank">KGySoft.Drawing</a> package. When targeting .NET 7 or later it can be executed on Windows only.</note>
             <code lang="C#"><![CDATA[
             Bitmap bmpOriginal = Icons.Shield.ExtractBitmap(new Size(256, 256));
             bmpOriginal.SaveAsPng(@"c:\temp\original.png");
            
             IQuantizer quantizer = OptimizedPaletteQuantizer.MedianCut(256);
             Bitmap bmpConverted = bmpOriginal.ConvertPixelFormat(PixelFormat.Format8bppIndexed, quantizer);
             bmpConverted.SaveAsGif(@"c:\temp\converted.gif");]]></code>
             <para>The example above produces the following result:
             <list type="table">
             <item><term><c>original.png</c></term><term><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/></term></item>
             <item><term><c>converted.gif</c></term><term><img src="../Help/Images/ShieldMedianCut256Black.gif" alt="Shield icon quantized to 256 colors using the Median Cut algorithm"/></term></item>
             </list></para>
             <note type="tip">For more image examples and side-by-side comparison with the other algorithms see the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.</note>
             </example>
             <seealso cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that quantizes colors of an image using Xiaolin Wu's quantizing algorithm.
             </summary>
             <param name="maxColors">The upper limit of generated colors. Must be between 2 and 65536, inclusive bounds. This parameter is optional.
             <br/>Default value: <c>256</c>.</param>
             <param name="backColor">Colors with alpha above the <paramref name="alphaThreshold"/> will be blended with this color before quantizing.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then the quantized colors will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that quantizes colors of an image by Xiaolin Wu's quantizing algorithm.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxColors"/> must be between 2 and 65536, inclusive bounds.</exception>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <note>This example requires to reference the <a href="https://www.nuget.org/packages/KGySoft.Drawing/" target="_blank">KGySoft.Drawing</a> package. When targeting .NET 7 or later it can be executed on Windows only.</note>
             <code lang="C#"><![CDATA[
             Bitmap bmpOriginal = Icons.Shield.ExtractBitmap(new Size(256, 256));
             bmpOriginal.SaveAsPng(@"c:\temp\original.png");
            
             IQuantizer quantizer = OptimizedPaletteQuantizer.Wu(256);
             Bitmap bmpConverted = bmpOriginal.ConvertPixelFormat(PixelFormat.Format8bppIndexed, quantizer);
             bmpConverted.SaveAsGif(@"c:\temp\converted.gif");]]></code>
             <para>The example above produces the following result:
             <list type="table">
             <item><term><c>original.png</c></term><term><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/></term></item>
             <item><term><c>converted.gif</c></term><term><img src="../Help/Images/ShieldWu256Black.gif" alt="Shield icon quantized to 256 colors by Wu's algorithm"/></term></item>
             </list></para>
             <note type="tip">For more image examples and side-by-side comparison with the other algorithms see the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.</note>
             </example>
             <seealso cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.ConfigureBitLevel(System.Nullable{System.Int32})">
            <summary>
            Configures the bit level per color channel to be used while optimizing the palette.
            If the input image is a monochromatic one, then may determine the bit depth of the result, depending on the used algorithm.
            Affects the quality, speed and memory usage.
            </summary>
            <param name="bitLevel">Specifies the desired bit level. If <see langword="null"/>, then the value is automatically set by the chosen algorithm.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that has the specified bit level.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bitLevel"/> must be either <see langword="null"/>, or between 1 and 8.</exception>
            <remarks>
            <para>As a primary effect, <paramref name="bitLevel"/> determines the upper limit of the possible colors in the generated palette.
            For example, if <paramref name="bitLevel"/> is 1, then the result palette will not have more than 8 colors, or when it is 2, more than 64 colors.
            If you want to quantize an image using the allowed maximum of 65536 colors, then <paramref name="bitLevel"/> should be at least 6 because 5 allows up to 32768 colors.</para>
            <para>When using the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see> algorithm, configuring the bit level has no other effects.
            When using the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see> or <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see>'s algorithms, <paramref name="bitLevel"/> determines also the amount of
            minimum distinguishable monochromatic shades. For example, when <paramref name="bitLevel"/> is 5, then up to 32 monochromatic shades can be differentiated
            so close shades might be merged even if the requested number of colors would allow returning all the shades.</para>
            <para>For the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see> algorithm the default value is the ceiling of the base 2 logarithm of the requested number of colors
            (eg. 1 for 2 colors, 8 for 129 or more colors). This is alright for most cases. You can increase the default value if the image has only a few but very close colors
            or decrease it if the image has so many colors that the quantization would use too much memory.</para>
            <para>For <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see>'s algorithm the default value is 5 for no more than 256 colors (requires about 1.5 MB fix memory) and 6 for more colors (requires about 10 MB).
            This provides good enough quality in most cases but may cause visible banding if the input image is monochrome. To avoid that you can increase the bit level,
            which dramatically increases also the memory requirement: 7 bits requires about 80 MB memory, whereas 8 bits demands about 650 MB, regardless of
            the actual number of colors in the source image.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.ConfigureColorSpace(KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Configures the working color space of the generated <see cref="T:KGySoft.Drawing.Imaging.Palette"/> to be used for blending and performing nearest color search.
            The configuration may also affect the behavior of ditherers that use this quantizer.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for details and
            image examples about using the different color spaces in various operations.
            </summary>
            <param name="workingColorSpace">Specifies the working color space for the generated <see cref="T:KGySoft.Drawing.Imaging.Palette"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that uses the specified color space.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer">
            <summary>
            Credit to Xiaolin Wu's Color Quantizer published at https://www.ece.mcmaster.ca/~xwu/cq.c
            This quantizer is mainly based on his code.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.CubicBuffer`1">
            <summary>
            Similar to <see cref="T:KGySoft.Collections.Array3D`1"/> (it allows both 3D and 1D access) but allows negative indices, which returns default value.
            The original algorithm uses 33x33x33 arrays, where 0 indices are never set in any dimensions so they always were 0.
            This was acceptable for the original algorithm but with 8 bit resolution (257x257x257 * sizeof(T)) the waste is much more significant,
            especially with array pooling, which allocates almost twice as much memory as needed when dimensions are 2^n + 1.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.Volume(KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.CubicBuffer{System.Int64}@)">
            <summary>
            Computes the sum over a box of any given statistic.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.Volume(KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.CubicBuffer{System.Single}@)">
            <summary>
            Computes the sum over a box of any given statistic (floating point version).
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.Bottom(KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Direction,KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.CubicBuffer{System.Int64}@)">
            <summary>
            Computes part of <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.Volume(KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.CubicBuffer{System.Int64}@)"/> that doesn't depend on <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.RMax"/>, <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.GMax"/>
            or <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.BMax"/>, depending on <paramref name="dir"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.Top(KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Direction,System.Int32,KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.CubicBuffer{System.Int64}@)">
            <summary>
            Computes remainder of <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.Volume(KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.CubicBuffer{System.Int64}@)"/>, substituting <paramref name="pos"/>
            for <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.RMax"/>, <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.GMax"/> or <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.BMax"/>, depending on <paramref name="dir"/>.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.sqrTable">
            <summary>
            Just a lookup table for squared values between 0..255
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.m2">
            <summary>
            The squared moment values of color RGB values.
            After building the histogram by <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.AddColor(KGySoft.Drawing.Imaging.Color32)"/> an element of this array can be interpreted as
            m2[r, g, b] = sum over voxel of c^2*P(c)
            and after <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.HistogramToMoments(KGySoft.Threading.IAsyncContext)"/> it contains cumulative moments.
            The strictly taken Bernoulli probability is actually multiplied by image size.
            In Wu's original algorithm effective histogram elements were in 1..<see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.histSize"/> along each axis,
            element 0 was just for base or marginal value. Here values are zero-based, but reading -1 index is allowed, which returns zero.
            Values are floats just because of the possible big ranges due to squared values.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.wt">
            <summary>
            The counts of voxels of the 3D color cubes in each position.
            The same applies as for <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.m2"/> except that after <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.AddColor(KGySoft.Drawing.Imaging.Color32)"/> values are interpreted as
            wt[r, g, b] = sum over voxel of P(c)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.mr">
            <summary>
            The moment values of red color components.
            The same applies as for <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.m2"/> except that after <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.AddColor(KGySoft.Drawing.Imaging.Color32)"/> values are interpreted as
            wt[r, g, b] = sum over voxel of r*P(c)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.mg">
            <summary>
            The moment values of green color components.
            The same applies as for <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.m2"/> except that after <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.AddColor(KGySoft.Drawing.Imaging.Color32)"/> values are interpreted as
            wt[r, g, b] = sum over voxel of g*P(c)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.mb">
            <summary>
            The moment values of green color components.
            The same applies as for <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.m2"/> except that after <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.AddColor(KGySoft.Drawing.Imaging.Color32)"/> values are interpreted as
            wt[r, g, b] = sum over voxel of b*P(c)
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.HistogramToMoments(KGySoft.Threading.IAsyncContext)">
            <summary>
            Computing cumulative moments from the histogram.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Var(KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box)">
            <summary>
            Compute the weighted variance of a box.
            Note: as with the raw statistics, this is actually the variance multiplied by image size
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer">
            <summary>
            Represents a quantizer with predefined set of colors. Use the static members to retrieve an instance.
            For using optimized colors for a specific source image see the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.
            <br/>See the <strong>Remarks</strong> section of the static methods of this class for details and image examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IQuantizer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Quantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.PixelFormatHint">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> that is compatible with this <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance.
            If this <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> was not initialized with custom color mapping logic,
            then this is the possible lowest bits-per-pixel value format.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BackColor">
            <summary>
            Gets the back color used by this <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/>. This value will be returned also by
            the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.BackColor"/> property once an <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> is created from this instance.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A"/> field of the returned color is always 255.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold">IQuantizingSession.AlphaThreshold</see> property for details.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.AlphaThreshold">
            <summary>
            Gets the alpha threshold value used by this <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/>. This value will be returned also by
            the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold"/> property once an <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> is created from this instance.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold">IQuantizingSession.AlphaThreshold</see> property for details.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Palette">
            <summary>
            If this <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> is associated with a specific palette, then returns the same <see cref="T:KGySoft.Drawing.Imaging.Palette"/> that will be returned also by
            the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.Palette"/> property once an <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> is created from this instance;
            otherwise, returns <see langword="null"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.WorkingColorSpace">
            <summary>
            Gets the preferred color space of this <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance for quantizing. This value will be returned also by
            the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.WorkingColorSpace"/> property once an <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> is created from this instance.
            You can use the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.ConfigureColorSpace(KGySoft.Drawing.Imaging.WorkingColorSpace)">ConfigureColorSpace</see> method to create a clone of this <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/>
            using a different working color space.
            </summary>
            <remarks>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for details and
            image examples about using the different color spaces in various operations.</note>
            <para>If the value of this property is <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>, then the sRGB color space is used
            because the <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">IQuantizingSession.GetQuantizedColor</see> method works with sRGB colors anyway.</para>
            <para>If this <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance uses a custom quantizing functions, then it depends on the function whether it
            considers the value of this property. When using a high color quantizer, then the value of this property may only affect possible alpha blending
            with the <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BackColor"/> property.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb8888(System.Drawing.Color,System.Byte)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to the 32-bit ARGB color space.
             </summary>
             <param name="backColor">Determines the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.BackColor"/> property of the returned quantizer.
             Considering that this quantizer can return alpha colors it has effect only when the returned quantizer is used with
             a ditherer that does not support partial transparency.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color
             is considered completely transparent. If 0, then the quantized colors will preserve their original alpha value. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to the 32-bit ARGB color space.</returns>
             <remarks>
             <para>If <paramref name="alphaThreshold"/> is zero, then the returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance is practically just a pass-through filter in the 32-bit color space
             and it is effective only for some bitmap data operations (eg. <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.KnownPixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see>),
             which could possibly preserve wide color information (<see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/>s with 48/64 bpp) without specifying a quantizer.</para>
             <para>If <paramref name="alphaThreshold"/> is not zero, then every partially transparent pixel with lower <see cref="P:System.Drawing.Color.A">Color.A</see> value than the threshold will turn completely transparent.</para>
             <para>This quantizer fits well for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/> pixel format.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToArgb8888(IReadWriteBitmapData source, Color backColor = default,
                 byte alphaThreshold = 128, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Argb8888(backColor, alphaThreshold);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format32bppArgb, quantizer, ditherer);
            
                 // b.) when converting to Format32bppArgb format without dithering, this produces the same result:
                 if (ditherer == null && alphaThreshold == 0)
                     return source.Clone(KnownPixelFormat.Format32bppArgb);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap data:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientArgb8888BlackA128.png" alt="Color hues with ARGB8888 pixel format, black background and default alpha threshold"/>
             <br/>Default optional parameter values (black background, alpha threshold = 128). The top-half of the image preserved the original transparency,
             while bottom half turned completely transparent. Without dithering the back color is irrelevant.</para>
             <para><img src="../Help/Images/AlphaGradientArgb8888SilverA1.png" alt="Color hues with ARGB8888 pixel format, silver background and alpha threshold = 1"/>
             <br/>Silver background, alpha threshold = 1. Only the bottom line is completely transparent, otherwise the image preserved its original transparency,
             so the result is practically the same as the original image. Without dithering the back color is irrelevant.</para>
             <para><img src="../Help/Images/AlphaGradientArgb8888SilverDitheredA1.png" alt="Color hues with ARGB8888 pixel format, silver background, alpha threshold = 1, using Bayer 8x8 ordered dithering"/>
             <br/>Silver background, alpha threshold = 1, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering.
             As dithering does not support partial transparency only the bottom line is transparent, otherwise the image was blended with back color.
             No dithering pattern appeared in the result due to the auto <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">strength</see> calibration.
             This also demonstrates why dithering is practically useless for true color results.</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldArgb8888lackA128.png" alt="Shield icon with ARGB8888 pixel format, black background and default alpha threshold"/>
             <br/>Default optional parameter values (black background, alpha threshold = 128). Without dithering the back color is irrelevant but pixels with alpha &lt; 128 turned completely transparent.</para>
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with ARGB8888 pixel format, silver background and alpha threshold = 1"/>
             <br/>Silver background, alpha threshold = 1. Practically the same as the original image. Without dithering the back color is irrelevant.</para>
             <para><img src="../Help/Images/ShieldArgb8888SilverA1Dithered.png" alt="Shield icon with ARGB8888 pixel format, silver background, alpha threshold = 1, using Floyd-Steinberg dithering"/>
             <br/>Silver background, alpha threshold = 1, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering.
             As dithering does not support partial transparency alpha pixels were blended with back color. No dithering pattern appeared in the result as there was no quantization error during the process.
             This also demonstrates why dithering is practically useless for true color results.</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb888(System.Drawing.Color)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 24-bit ones where each color component is encoded in 8 bits.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 24-bit ones where each color component is encoded in 8 bits.</returns>
             <remarks>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 256<sup>3</sup> (16,777,216) colors.
             It practically just removes transparency and does not change colors without alpha.</para>
             <para>This quantizer fits well for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format24bppRgb"/> pixel format.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToRgb888(IReadWriteBitmapData source, Color backColor = default)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Rgb888(backColor);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format24bppRgb, quantizer);
            
                 // b.) when converting to Format24bppRgb format, this produces the same result:
                 return source.Clone(KnownPixelFormat.Format24bppRgb, backColor);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap data:
                 source.Quantize(quantizer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientRgb888Black.png" alt="Color hues with black background"/>
             <br/>Default (black) background</para>
             <para><img src="../Help/Images/AlphaGradientRgb888Silver.png" alt="Color hues with silver background"/>
             <br/>Silver background</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldRgb888Black.png" alt="Shield icon with black background"/>
             <br/>Default (black) background</para>
             <para><img src="../Help/Images/ShieldRgb888Silver.png" alt="Shield icon with silver background"/>
             <br/>Silver background</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb565(System.Drawing.Color)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 16-bit ones where red,
             green and blue components are encoded in 5, 6 and 5 bits, respectively.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 16-bit ones where red,
             green and blue components are encoded in 5, 6 and 5 bits, respectively.</returns>
             <remarks>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 65,536 colors.</para>
             <para>This quantizer fits well for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppRgb565"/> pixel format.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToRgb565(IReadWriteBitmapData source, Color backColor = default, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Rgb565(backColor);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format16bppRgb565, quantizer, ditherer);
            
                 // b.) when converting to Format16bppRgb565 format without dithering, this produces the same result:
                 if (ditherer == null)
                     return source.Clone(KnownPixelFormat.Format16bppRgb565, backColor);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap data:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientRgb565Black.png" alt="Color hues with RGB565 pixel format and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/AlphaGradientRgb565Silver.png" alt="Color hues with RGB565 pixel format and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/AlphaGradientRgb565SilverDithered.png" alt="Color hues with RGB565 pixel format, silver background and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldRgb565Black.png" alt="Shield icon with RGB565 pixel format and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/ShieldRgb565Silver.png" alt="Shield icon with RGB565 pixel format and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/ShieldRgb565SilverDithered.png" alt="Shield icon with RGB565 pixel format, silver background and Floyd-Steinberg dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb555(System.Drawing.Color)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 16-bit ones where each color component is encoded in 5 bits.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 16-bit ones where each color component is encoded in 5 bits.</returns>
             <remarks>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 32,768 colors.</para>
             <para>This quantizer fits well for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppRgb555"/> pixel format.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToRgb555(IReadWriteBitmapData source, Color backColor = default, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Rgb555(backColor);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format16bppRgb555, quantizer, ditherer);
            
                 // b.) when converting to Format16bppRgb555 format without dithering, this produces the same result:
                 if (ditherer == null)
                     return source.Clone(KnownPixelFormat.Format16bppRgb555, backColor);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap data:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientRgb555Black.png" alt="Color hues with RGB555 pixel format and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/AlphaGradientRgb555Silver.png" alt="Color hues with RGB555 pixel format and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/AlphaGradientRgb555SilverDithered.png" alt="Color hues with RGB555 pixel format, silver background and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldRgb555Black.png" alt="Shield icon with RGB555 pixel format and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/ShieldRgb555Silver.png" alt="Shield icon with RGB555 pixel format and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/ShieldRgb555SilverDithered.png" alt="Shield icon with RGB555 pixel format, silver background and Floyd-Steinberg dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb1555(System.Drawing.Color,System.Byte)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 16-bit ones where alpha, red,
             green and blue components are encoded in 1, 5, 5 and 5 bits, respectively.
             </summary>
             <param name="backColor">Colors with alpha (transparency), whose <see cref="P:System.Drawing.Color.A">Color.A</see> property
             is equal to or greater than <paramref name="alphaThreshold"/> will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then the quantized colors will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 16-bit ones where each color component is encoded in 5 bits.</returns>
             <remarks>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 32,768 colors, and a transparent color.</para>
             <para>This quantizer fits well for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppArgb1555"/> pixel format.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToArgb1555(IReadWriteBitmapData source, Color backColor = default,
                 byte alphaThreshold = 128, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Argb1555(backColor, alphaThreshold);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format16bppArgb1555, quantizer, ditherer);
            
                 // b.) when converting to Format16bppArgb1555 format without dithering, this produces the same result:
                 if (ditherer == null)
                     return source.Clone(KnownPixelFormat.Format16bppArgb1555, backColor, alphaThreshold);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap data:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientArgb1555BlackA128.png" alt="Color hues with ARGB1555 pixel format, black background and default alpha threshold"/>
             <br/>Default optional parameter values (black background, alpha threshold = 128). The bottom half of the image is transparent.</para>
             <para><img src="../Help/Images/AlphaGradientArgb1555SilverA1.png" alt="Color hues with ARGB1555 pixel format, silver background and alpha threshold = 1"/>
             <br/>Silver background, alpha threshold = 1. Only the bottom line is transparent.</para>
             <para><img src="../Help/Images/AlphaGradientArgb1555SilverDithered.png" alt="Color hues with ARGB1555 pixel format, silver background, default alpha threshold and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, default alpha threshold, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering. The bottom half of the image is transparent.</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldArgb1555BlackA128.png" alt="Shield icon with ARGB1555 pixel format, black background and default alpha threshold"/>
             <br/>Default optional parameter values (black background, alpha threshold = 128)</para>
             <para><img src="../Help/Images/ShieldArgb1555SilverA1.png" alt="Shield icon with ARGB1555 pixel format, silver background and alpha threshold = 1"/>
             <br/>Silver background, alpha threshold = 1</para>
             <para><img src="../Help/Images/ShieldArgb1555SilverA128Dithered.png" alt="Shield icon with ARGB1555 pixel format, silver background, default alpha threshold and Floyd-Steinberg dithering"/>
             <br/>Silver background, default alpha threshold, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb332(System.Drawing.Color,System.Boolean)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 8-bit ones where red,
             green and blue components are encoded in 3, 3 and 2 bits, respectively.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="directMapping"><see langword="true"/> to map any color directly to an index instead of searching for a nearest color,
             which is very fast but without dithering may end up in a noticeably poorer result and higher contrast;
             <see langword="false"/> to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
             <br/>Default value: <see langword="false"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 8-bit ones where red,
             green and blue components are encoded in 3, 3 and 2 bits, respectively.</returns>
             <remarks>
             <para>If <paramref name="directMapping"/> is <see langword="true"/>, then the result of the quantization may have a higher contrast than without direct color mapping,
             though this can be compensated if the returned quantizer is combined with an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>. Other ditherers preserve the effect of the <paramref name="directMapping"/> parameter.</para>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 256 colors.</para>
             <para>This quantizer fits well for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format8bppIndexed"/> pixel format.</para>
             <para>The palette of this quantizer does not contain the transparent color.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToRgb332(IReadWriteBitmapData source, Color backColor = default, bool directMapping = false, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Rgb332(backColor, directMapping);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format8bppIndexed, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap data:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientRgb332Black.gif" alt="Color hues with RGB332 palette and black background using nearest color lookup"/>
             <br/>Default optional parameter values (black background, nearest color lookup)</para>
             <para><img src="../Help/Images/AlphaGradientRgb332Silver.gif" alt="Color hues with RGB332 palette and silver background using nearest color lookup"/>
             <br/>Silver background, nearest color lookup</para>
             <para><img src="../Help/Images/AlphaGradientRgb332SilverDM.gif" alt="Color hues with RGB332 palette and silver background using direct color mapping"/>
             <br/>Silver background, direct color mapping</para>
             <para><img src="../Help/Images/AlphaGradientRgb332SilverDMDitheredB8.gif" alt="Color hues with RGB332 palette, silver background, using direct color mapping and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesRgb332.gif" alt="Grayscale color shades with RGB332 palette using nearest color lookup"/>
             <br/>Nearest color lookup</para>
             <para><img src="../Help/Images/GrayShadesRgb332Direct.gif" alt="Grayscale color shades with RGB332 palette using direct color mapping"/>
             <br/>Direct color mapping</para>
             <para><img src="../Help/Images/GrayShadesRgb332DitheredB8.gif" alt="Grayscale color shades with RGB332 palette, using nearest color lookup and Bayer 8x8 ordered dithering"/>
             <br/>Nearest color lookup, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para>
             <para><img src="../Help/Images/GrayShadesRgb332DirectDitheredB8.gif" alt="Grayscale color shades with RGB332 palette, using direct color mapping and Bayer 8x8 ordered dithering"/>
             <br/>Direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldRgb332Black.gif" alt="Shield icon with RGB332 palette and black background using nearest color lookup"/>
             <br/>Default optional parameter values (nearest color lookup)</para>
             <para><img src="../Help/Images/ShieldRgb332Silver.gif" alt="Shield icon with RGB332 palette and silver background using nearest color lookup"/>
             <br/>Silver background, nearest color lookup</para>
             <para><img src="../Help/Images/ShieldRgb332SilverDM.gif" alt="Shield icon with RGB332 palette and silver background using direct color mapping"/>
             <br/>Silver background, direct color mapping</para>
             <para><img src="../Help/Images/ShieldRgb332SilverDMDithered.gif" alt="Shield icon with RGB332 palette, silver background, using direct color mapping and Floyd-Steinberg dithering"/>
             <br/>Silver background, direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Lena.png" alt="Test image &quot;Lena&quot;"/>
             <br/>Original test image "Lena"</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/LenaRgb332.gif" alt="Test image &quot;Lena&quot; with RGB332 palette using nearest color lookup"/>
             <br/>Nearest color lookup</para>
             <para><img src="../Help/Images/LenaRgb332DM.gif" alt="Test image &quot;Lena&quot; with RGB332 palette using direct color mapping"/>
             <br/>Direct color mapping</para>
             <para><img src="../Help/Images/LenaRgb332DMFloydSteinberg.gif" alt="Test image &quot;Lena&quot; with RGB332 palette using direct color mapping and Floyd-Steinberg dithering"/>
             <br/>Direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
             <seealso cref="O:KGySoft.Drawing.Imaging.Palette.Rgb332">Palette.Rgb332 Methods</seealso>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 8-bit grayscale ones of 256 shades.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 8-bit grayscale ones.</returns>
             <remarks>
             <para>The returned quantizer uses direct mapping to grayscale colors based on human perception, which makes quantization very fast while it is very accurate at the same time.</para>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 256 possible shades of gray.</para>
             <para>The palette of this quantizer does not contain the transparent color. To make a bitmap data grayscale with transparency you can use the
             <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData)">ToGrayscale</see> and <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)">MakeGrayscale</see> extension methods.</para>
             <para>This quantizer fits well for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format8bppIndexed"/> pixel format.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToGrayscale(IReadWriteBitmapData source, Color backColor = default)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Grayscale(backColor);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format8bppIndexed, quantizer);
                 
                 // b.) alternatively, you can perform the quantization directly on the source bitmap data:
                 source.Quantize(quantizer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientGray8bppBlack.gif" alt="Grayscale color hues with 8 BPP grayscale palette and black background"/>
             <br/>Default (black) background</para>
             <para><img src="../Help/Images/AlphaGradientGray8bppSilver.gif" alt="Graayscale color hues with 8 BPP grayscale palette and silver background"/>
             <br/>Silver background</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldGray8bppBlack.gif" alt="Shield icon with 8 BPP grayscale palette and black background"/>
             <br/>Default (black) background</para>
             <para><img src="../Help/Images/ShieldGray8bppSilver.gif" alt="Shield icon with 8 BPP grayscale palette and silver background"/>
             <br/>Silver background</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
             <seealso cref="O:KGySoft.Drawing.Imaging.Palette.Grayscale256">Palette.Grayscale256 Methods</seealso>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale16(System.Drawing.Color,System.Boolean)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 4-bit grayscale ones of 16 shades.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="directMapping"><see langword="true"/> to map any color directly to an index instead of searching for a nearest color,
             which is very fast but may end up in a result of a bit higher contrast than the original image;
             <see langword="false"/> to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
             <br/>Default value: <see langword="false"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 4-bit grayscale ones.</returns>
             <remarks>
             <para>If <paramref name="directMapping"/> is <see langword="true"/>, then the result of the quantization may have a higher contrast than without direct color mapping,
             though this can be compensated if the returned quantizer is combined with an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>. Other ditherers preserve the effect of the <paramref name="directMapping"/> parameter.</para>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 16 possible shades of gray.</para>
             <para>This quantizer fits well for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format4bppIndexed"/> pixel format.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToGrayscale16(IReadWriteBitmapData source, Color backColor = default, bool directMapping = false, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Grayscale16(backColor, directMapping);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format4bppIndexed, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap data:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientGray4bppBlack.gif" alt="Color hues with 4 BPP grayscale palette and black background using nearest color lookup"/>
             <br/>Default optional parameter values (black background, nearest color lookup)</para>
             <para><img src="../Help/Images/AlphaGradientGray4bppSilver.gif" alt="Color hues with 4 BPP grayscale palette and silver background using nearest color lookup"/>
             <br/>Silver background, nearest color lookup</para>
             <para><img src="../Help/Images/AlphaGradientGray4bppSilverDirect.gif" alt="Color hues with 4 BPP grayscale palette and silver background using direct color mapping"/>
             <br/>Silver background, direct color mapping</para>
             <para><img src="../Help/Images/AlphaGradientGray4bppSilverDitheredB8.gif" alt="Color hues with 4 BPP grayscale palette, silver background, using nearest color lookup and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, nearest color lookup, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades4bpp.gif" alt="Grayscale color shades with 4 BPP grayscale palette using nearest color lookup"/>
             <br/>Nearest color lookup</para>
             <para><img src="../Help/Images/GrayShades4bppDirect.gif" alt="Grayscale color shades with 2 BPP grayscale palette using direct color mapping"/>
             <br/>Direct color mapping</para>
             <para><img src="../Help/Images/GrayShades4bppDitheredB8.gif" alt="Grayscale color shades with 4 BPP grayscale palette, using nearest color lookup and Bayer 8x8 ordered dithering"/>
             <br/>Nearest color lookup, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldGray4bppBlack.gif" alt="Shield icon with 4 BPP grayscale palette and black background using nearest color lookup"/>
             <br/>Default optional parameter values (nearest color lookup)</para>
             <para><img src="../Help/Images/ShieldGray4bppSilver.gif" alt="Shield icon with 4 BPP grayscale palette and silver background using nearest color lookup"/>
             <br/>Silver background, nearest color lookup</para>
             <para><img src="../Help/Images/ShieldGray4bppSilverDirect.gif" alt="Shield icon with 4 BPP grayscale palette and silver background using direct color mapping"/>
             <br/>Silver background, direct color mapping</para>
             <para><img src="../Help/Images/ShieldGray4bppSilverDirectDitheredFS.gif" alt="Shield icon with 4 BPP grayscale palette, silver background, using direct color mapping and Floyd-Steinberg dithering"/>
             <br/>Silver background, direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
             <seealso cref="O:KGySoft.Drawing.Imaging.Palette.Grayscale16">Palette.Grayscale16 Methods</seealso>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale4(System.Drawing.Color,System.Boolean)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 2-bit grayscale ones of 4 shades.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="directMapping"><see langword="true"/> to map any color directly to an index instead of searching for a nearest color,
             which is very fast but may end up in a result of a bit higher contrast than the original image;
             <see langword="false"/> to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
             <br/>Default value: <see langword="false"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 2-bit grayscale ones.</returns>
             <remarks>
             <para>If <paramref name="directMapping"/> is <see langword="true"/>, then the result of the quantization may have a higher contrast than without direct color mapping,
             though this can be compensated if the returned quantizer is combined with an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>. Other ditherers preserve the effect of the <paramref name="directMapping"/> parameter.</para>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 4 possible shades of gray.</para>
             <para>This quantizer fits well for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format4bppIndexed"/> pixel format, though only 4 palette entries are used instead of the possible maximum of 16.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToGrayscale4(IReadWriteBitmapData source, Color backColor = default, bool directMapping = false, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Grayscale4(backColor, directMapping);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format4bppIndexed, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap data:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientGray2bppBlack.gif" alt="Color hues with 2 BPP grayscale palette and black background using nearest color lookup"/>
             <br/>Default optional parameter values (black background, nearest color lookup)</para>
             <para><img src="../Help/Images/AlphaGradientGray2bppSilver.gif" alt="Color hues with 2 BPP grayscale palette and silver background using nearest color lookup"/>
             <br/>Silver background, nearest color lookup</para>
             <para><img src="../Help/Images/AlphaGradientGray2bppSilverDirect.gif" alt="Color hues with 2 BPP grayscale palette and silver background using direct color mapping"/>
             <br/>Silver background, direct color mapping</para>
             <para><img src="../Help/Images/AlphaGradientGray2bppSilverDitheredB8.gif" alt="Color hues with 2 BPP grayscale palette, silver background, using nearest color lookup and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, nearest color lookup, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades2bpp.gif" alt="Grayscale color shades with 2 BPP grayscale palette using nearest color lookup"/>
             <br/>Nearest color lookup</para>
             <para><img src="../Help/Images/GrayShades2bppDirect.gif" alt="Grayscale color shades with 2 BPP grayscale palette using direct color mapping"/>
             <br/>Direct color mapping</para>
             <para><img src="../Help/Images/GrayShades2bppDitheredB8.gif" alt="Grayscale color shades with 2 BPP grayscale palette, using nearest color lookup and Bayer 8x8 ordered dithering"/>
             <br/>Nearest color lookup, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldGray2bppBlack.gif" alt="Shield icon with 2 BPP grayscale palette and black background using nearest color lookup"/>
             <br/>Default optional parameter values (nearest color lookup)</para>
             <para><img src="../Help/Images/ShieldGray2bppSilver.gif" alt="Shield icon with 2 BPP grayscale palette and silver background using nearest color lookup"/>
             <br/>Silver background, nearest color lookup</para>
             <para><img src="../Help/Images/ShieldGray2bppSilverDirect.gif" alt="Shield icon with 2 BPP grayscale palette and silver background using direct color mapping"/>
             <br/>Silver background, direct color mapping</para>
             <para><img src="../Help/Images/ShieldGray2bppSilverDirectDitheredFS.gif" alt="Shield icon with 2 BPP grayscale palette, silver background, using direct color mapping and Floyd-Steinberg dithering"/>
             <br/>Silver background, direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Cameraman.png" alt="Test image &quot;Cameraman&quot;"/>
             <br/>Original test image "Cameraman"</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/Cameraman2bpp.gif" alt="Test image &quot;Cameraman&quot; with 2 BPP grayscale palette using nearest color lookup"/>
             <br/>Nearest color lookup</para>
             <para><img src="../Help/Images/Cameraman2bppDirect.gif" alt="Test image &quot;Cameraman&quot; with 2 BPP grayscale palette using direct color mapping"/>
             <br/>Direct color mapping</para>
             <para><img src="../Help/Images/Cameraman2bppDirectDitheredFS.gif" alt="Test image &quot;Cameraman&quot; with 2 BPP grayscale palette using direct color mapping and Floyd-Steinberg dithering"/>
             <br/>Direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
             <seealso cref="O:KGySoft.Drawing.Imaging.Palette.Grayscale4">Palette.Grayscale4 Methods</seealso>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes every color to black or white.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with the specified <paramref name="backColor"/> before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="whiteThreshold">Specifies a threshold value for the brightness of the colors, under which a quantized color is considered black.
             If 0, then the complete result will be white. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes every color to black or white.</returns>
             <remarks>
             <para>If the returned quantizer is combined with an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>, then the effect of the <paramref name="whiteThreshold"/> parameter is
             mostly compensated. Other ditherers preserve the effect of the <paramref name="whiteThreshold"/> parameter.</para>
             <para>This quantizer fits well for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format1bppIndexed"/> pixel format.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToBlackAndWhite(IReadWriteBitmapData source, Color backColor = default,
                 byte whiteThreshold = 128, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.BlackAndWhite(backColor, whiteThreshold);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format1bppIndexed, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap data:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientBWBlack.gif" alt="Color hues with black and white palette and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/AlphaGradientBWSilver.gif" alt="Color hues with black and white palette and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/AlphaGradientBWSilverDitheredB8.gif" alt="Color hues with black and white palette, silver background, using Bayer 8x8 ordered dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBW.gif" alt="Grayscale color shades with black and white palette"/>
             <br/>Default optional parameter values</para>
             <para><img src="../Help/Images/GrayShadesBWThr32.gif" alt="Grayscale color shades with black and white palette, white threshold = 32"/>
             <br/>White threshold = 32</para>
             <para><img src="../Help/Images/GrayShadesBWThr224.gif" alt="Grayscale color shades with black and white palette, white threshold = 224"/>
             <br/>White threshold = 224</para>
             <para><img src="../Help/Images/GrayShadesBWDitheredB8.gif" alt="Grayscale color shades with black and white palette, using Bayer 8x8 ordered dithering"/>
             <br/>Default white threshold, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldBWBlack.gif" alt="Shield icon with black and white palette and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/ShieldBWSilver.gif" alt="Shield icon with black and white palette and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/ShieldBWSilverDitheredFS.gif" alt="Shield icon with black and white palette, silver background, using Floyd-Steinberg dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Cameraman.png" alt="Test image &quot;Cameraman&quot;"/>
             <br/>Original test image "Cameraman"</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/CameramanBW.gif" alt="Test image &quot;Cameraman&quot; with black and white palette"/>
             <br/>Default optional parameter values</para>
             <para><img src="../Help/Images/CameramanBWThr96.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, white threshold = 96"/>
             <br/>White threshold = 96</para>
             <para><img src="../Help/Images/CameramanBWThr96DitheredB8.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, using Bayer 8x8 dithering and white threshold = 96"/>
             <br/>White threshold = 96, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering. The ordered dithering preserves the white threshold value.</para>
             <para><img src="../Help/Images/CameramanBWThr96DitheredFS.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, using Floyd-Steinberg dithering and white threshold = 96"/>
             <br/>White threshold = 96, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering. The error diffusion dithering compensates the white threshold value.</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
             <seealso cref="O:KGySoft.Drawing.Imaging.Palette.BlackAndWhite">Palette.BlackAndWhite Methods</seealso>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the system default 8-bit palette.
             This palette contains the 16 standard <a href="https://www.w3.org/TR/REC-html40/types.html#h-6.5" target="_blank">basic sRGB colors</a>,
             the "web-safe" palette of 216 colors as well as 24 transparent entries.
             </summary>
             <param name="backColor">Colors with alpha (transparency), which are considered opaque will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">If the system default 8-bit palette contains a transparent color on the current operating system,
             then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then the quantized colors will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the system default 8-bit palette.</returns>
             <remarks>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 256 colors.
             Actually this amount is somewhat smaller because of some redundant entries in the palette.</para>
             <para>This quantizer fits well for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format8bppIndexed"/> pixel format.</para>
             <para>The palette of this quantizer contains transparent entries.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDefault8Bpp(IReadWriteBitmapData source, Color backColor = default,
                 byte alphaThreshold = 128, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.SystemDefault8BppPalette(backColor, alphaThreshold);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format8bppIndexed, quantizer, ditherer);
            
                 // b.) when converting to Format8bppIndexed format without dithering, this produces the same result:
                 if (ditherer == null)
                     return source.Clone(KnownPixelFormat.Format8bppIndexed, backColor, alphaThreshold);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap data:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault8bppBlackA128.gif" alt="Color hues with system default 8 BPP palette, black background and default alpha threshold"/>
             <br/>Default optional parameter values (black background, alpha threshold = 128). The bottom half of the image is transparent.</para>
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverA1.gif" alt="Color hues with system default 8 BPP palette, silver background and alpha threshold = 1"/>
             <br/>Silver background, alpha threshold = 1. Only the bottom line is transparent.</para>
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverA128DitheredB8.gif" alt="Color hues with system default 8 BPP palette, silver background, default alpha threshold and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, default alpha threshold, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering. The bottom half of the image is transparent.</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesDefault8bpp.gif" alt="Grayscale color shades with system default 8 BPP palette"/>
             <br/>Default optional parameter values</para>
             <para><img src="../Help/Images/GrayShadesDefault8bppDitheredB8.gif" alt="Grayscale color shades with system default 8 BPP palette using Bayer 8x8 ordered dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldDefault8bppBlack.gif" alt="Shield icon with system default 8 BPP palette"/>
             <br/>Default optional parameter values (black background, alpha threshold = 128)</para>
             <para><img src="../Help/Images/ShieldDefault8bppBlackDitheredB8.gif" alt="Shield icon with system default 8 BPP palette using Bayer 8x8 ordered dithering"/>
             <br/>Default background and alpha threshold, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para>
             <para><img src="../Help/Images/ShieldDefault8bppSilverA1DitheredFS.gif" alt="Shield icon with system default 8 BPP palette using silver background, alpha threshold = 1 and Floyd-Steinberg dithering"/>
             <br/>Silver background, alpha threshold = 1, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GirlWithAPearlEarring.png" alt="Test image &quot;Girl with a Pearl Earring&quot;"/>
             <br/>Original test image "Girl with a Pearl Earring"</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GirlWithAPearlEarringDefault8bppSrgb.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with system default 8 BPP palette, quantized in the sRGB color space"/>
             <br/>Default optional parameter values</para>
             <para><img src="../Help/Images/GirlWithAPearlEarringDefault8bppDitheredB8Srgb.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with system default 8 BPP palette, quantized in the sRGB color space using Bayer 8x8 ordered dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para>
             <para><img src="../Help/Images/GirlWithAPearlEarringDefault8bppDitheredFSSrgb.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with system default 8 BPP palette, quantized in the sRGB color space using Floyd-Steinberg dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
             <seealso cref="O:KGySoft.Drawing.Imaging.Palette.SystemDefault8BppPalette">Palette.SystemDefault8BppPalette Methods</seealso>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the system default 4-bit palette.
             This palette consists of the 16 standard <a href="https://www.w3.org/TR/REC-html40/types.html#h-6.5" target="_blank">basic sRGB colors</a>.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the system default 4-bit palette.</returns>
             <remarks>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 16 colors.</para>
             <para>This quantizer fits well for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format4bppIndexed"/> pixel format.</para>
             <para>The palette of this quantizer is not expected to contain transparent entries.
             The palette consists of the 16 standard <a href="https://www.w3.org/TR/REC-html40/types.html#h-6.5" target="_blank">basic sRGB colors</a></para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToDefault4Bpp(IReadWriteBitmapData source, Color backColor = default, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.SystemDefault4BppPalette(backColor);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format8bppIndexed, quantizer, ditherer);
            
                 // b.) when converting to Format4bppIndexed format without dithering, this produces the same result:
                 if (ditherer == null)
                     return source.Clone(KnownPixelFormat.Format4bppIndexed, backColor);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap data:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             } ]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientDefault4bppBlack.gif" alt="Color hues with system default 4 BPP palette and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/AlphaGradientDefault4bppSilver.gif" alt="Color hues with system default 4 BPP palette and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/AlphaGradientDefault4bppSilverDitheredB8.gif" alt="Color hues with system default 4 BPP palette, using silver background and a stronger Bayer 8x8 ordered dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering with strength = 0.5</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesDefault4bpp.gif" alt="Grayscale color shades with system default 4 BPP palette"/>
             <br/>Default optional parameter values. The asymmetry is due to the uneven distribution of gray shades of this palette.</para>
             <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8.gif" alt="Grayscale color shades with system default 4 BPP palette using Bayer 8x8 ordered dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using auto strength. Darker shades have banding.</para>
             <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8Str-5.gif" alt="Grayscale color shades with system default 4 BPP palette using a stronger Bayer 8x8 ordered dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using strength = 0.5. Now there is no banding but white suffers from overdithering.</para>
             <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8Interpolated.gif" alt="Grayscale color shades with system default 4 BPP palette using 8x8 ordered dithering with interpolated ato strength"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using <see cref="F:KGySoft.Drawing.Imaging.AutoStrengthMode.Interpolated"/> auto strength strategy. Now there is neither banding nor overdithering for black or white colors.</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldDefault4bppBlack.gif" alt="Shield icon with system default 4 BPP palette and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/ShieldDefault4bppSilver.gif" alt="Shield icon with system default 4 BPP palette and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/ShieldDefault4bppSilverDitheredFS.gif" alt="Shield icon with system default 4 BPP palette using silver background and Floyd-Steinberg dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
             <seealso cref="O:KGySoft.Drawing.Imaging.Palette.SystemDefault4BppPalette">Palette.SystemDefault4BppPalette Methods</seealso>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault1BppPalette(System.Drawing.Color)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the system default 1-bit palette.
            This palette consists of the black and white colors.
            </summary>
            <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
            The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the system default 1-bit palette.</returns>
            <remarks>
            <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 2 colors.
            The system 1-bit palette expected to have the black and white colors on most operating systems.
            <note type="tip">To make sure that you use a black and white palette use the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">BlackAndWhite</see> method instead, which provides white threshold adjustment as well.
            <br/>For more details and examples see the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">BlackAndWhite</see> method.</note></para>
            <para>This quantizer fits well for the <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format1bppIndexed"/> pixel format.</para>
            </remarks>
            <seealso cref="O:KGySoft.Drawing.Imaging.Palette.SystemDefault1BppPalette">Palette.SystemDefault1BppPalette Methods</seealso>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the colors in the specified <paramref name="palette"/>.
             </summary>
             <param name="palette">The array of colors to be used by the returned instance.</param>
             <param name="backColor">Colors with alpha (transparency), which are considered opaque will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">If the specified <paramref name="palette"/> contains a transparent color,
             then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then the quantized colors will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the colors in the specified <paramref name="palette"/>.</returns>
             <remarks>
             <para>The <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance returned by this method will use a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> internally, created from
             the colors specified in the <paramref name="palette"/> parameter. When quantizing, best matching colors might be looked up sequentially and results
             might be cached.</para>
             <para>If a color to be quantized can be mapped to a color index directly, then create a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance explicitly,
             specifying the custom mapping logic and use the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(KGySoft.Drawing.Imaging.Palette)"/> overload instead.</para>
             <para>If a color to be quantized can be transformed to a result color directly, and the quantized result is not needed to be an indexed image,
             then use the <see cref="O:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction">FromCustomFunction</see> overloads instead.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToRgb111(IReadWriteBitmapData source,
                 Color backColor = default, IDitherer ditherer = null, WorkingColorSpace colorSpace = default)
             {
                 Color[] colors =
                 {
                     Color.Black, Color.Red, Color.Lime, Color.Blue,
                     Color.Magenta, Color.Yellow, Color.Cyan, Color.White
                 };
            
                 IQuantizer quantizer = PredefinedColorsQuantizer.FromCustomPalette(new Palette(colors, colorSpace, backColor));
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format4bppIndexed, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap data:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientRgb111Black.gif" alt="Color hues with RGB111 palette and black background"/>
             <br/>Default optional parameter values (black background). The bottom half of the result is black.</para>
             <para><img src="../Help/Images/AlphaGradientRgb111Silver.gif" alt="Color hues with RGB111 palette and silver background"/>
             <br/>Silver background. The bottom part of the result is white.</para>
             <para><img src="../Help/Images/AlphaGradientRgb111SilverDitheredB8.gif" alt="Color hues with RGB111 palette and silver background, using Bayer 8x8 ordered dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GrayShadesBW.gif" alt="Grayscale color shades with RGB111 palette"/>
             <br/>Default optional parameter values</para>
             <para><img src="../Help/Images/GrayShadesBWDitheredB8.gif" alt="Grayscale color shades with RGB111 palette, using Bayer 8x8 ordered dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldRgb111Black.gif" alt="Shield icon with RGB111 palette and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/ShieldRgb111Silver.gif" alt="Shield icon with RGB111 palette and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/ShieldRgb111SilverDitheredFS.gif" alt="Shield icon with RGB111 palette, silver background, using Floyd-Steinberg dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/GirlWithAPearlEarring.png" alt="Test image &quot;Girl with a Pearl Earring&quot;"/>
             <br/>Original test image "Girl with a Pearl Earring"</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/GirlWithAPearlEarringRgb111Srgb.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with RGB111 palette, quantized in the sRGB color space"/>
             <br/>Default optional parameter values</para>
             <para><img src="../Help/Images/GirlWithAPearlEarringRgb111DitheredFSSrgb.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with RGB111 palette, quantized in the sRGB color space using Floyd-Steinberg dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para>
             <para><img src="../Help/Images/GirlWithAPearlEarringRgb111Linear.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with RGB111 palette, quantized in the linear color space"/>
             <br/><see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Linear"/> color space</para>
             <para><img src="../Help/Images/GirlWithAPearlEarringRgb111DitheredFSLinear.gif" alt="Test image &quot;Girl with a Pearl Earring&quot; with RGB111 palette, quantized in the linear color space using Floyd-Steinberg dithering"/>
             <br/><see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Linear"/> color space, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the specified <paramref name="palette"/>.
            </summary>
            <param name="palette">The <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Palette"/> to be used by the returned instance.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the specified <paramref name="palette"/>.</returns>
            <remarks>
            <para>If a color to be quantized can be transformed to a result color directly, and the quantized result is not needed to be an indexed image,
            then use the <see cref="O:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction">FromCustomFunction</see> overloads instead.</para>
            <note>For examples see the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)"/> overload.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Color,KGySoft.Drawing.Imaging.KnownPixelFormat,System.Byte)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the custom quantizer function specified in the <paramref name="quantizingFunction"/> parameter.
             </summary>
             <param name="quantizingFunction">A delegate that specifies the custom quantization logic. It must be thread-safe for parallel invoking and it is expected to be fast.
             The results returned by the delegate are not cached.</param>
             <param name="backColor">Colors with alpha (transparency), whose <see cref="P:System.Drawing.Color.A">Color.A</see> property
             is equal to or greater than <paramref name="alphaThreshold"/> will be blended with this color before invoking the <paramref name="quantizingFunction"/> delegate.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored.</param>
             <param name="pixelFormatHint">The <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> value that the <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.PixelFormatHint"/> property of the returned instance will return. This parameter is optional.
             <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format24bppRgb"/>, which is valid only if <paramref name="alphaThreshold"/> has the default zero value.</param>
             <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then even the completely transparent colors will be blended with <paramref name="backColor"/> before invoking the <paramref name="quantizingFunction"/> delegate. This parameter is optional.
             <br/>Default value: <c>0</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the custom quantizer function specified in the <paramref name="quantizingFunction"/> parameter.</returns>
             <remarks>
             <para>The quantizer returned by this method does not have a palette. If you need to create an indexed result using a custom mapping function that
             uses up to 256 different colors, then create a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance specifying a custom function and call the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(KGySoft.Drawing.Imaging.Palette)"/> method instead.</para>
             <para>This overload never calls the <paramref name="quantizingFunction"/> delegate with a color with alpha. Depending on <paramref name="alphaThreshold"/> either a completely
             transparent color will be returned or the color will be blended with <paramref name="backColor"/> before invoking the delegate.
             In order to allow invoking <paramref name="quantizingFunction"/> with alpha colors use the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.KnownPixelFormat)"/>
             or <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Color,System.Byte,System.Boolean,KGySoft.Drawing.Imaging.KnownPixelFormat)"/> overloads instead.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToGrayscaleOpaque(IReadWriteBitmapData source, Color backColor = default)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.FromCustomFunction(c => c.ToGray(), backColor, 0);
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format24bppRgb, quantizer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap data:
                 source.Quantize(quantizer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientGray8bppBlack.gif" alt="Grayscale color hues with black background"/>
             <br/>Default (black) background</para>
             <para><img src="../Help/Images/AlphaGradientGray8bppSilver.gif" alt="Graayscale color hues with silver background"/>
             <br/>Silver background</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldGray8bppBlack.gif" alt="Grayscale shield icon with black background"/>
             <br/>Default (black) background</para>
             <para><img src="../Help/Images/ShieldGray8bppSilver.gif" alt="Grayscale shield icon with silver background"/>
             <br/>Silver background</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.KnownPixelFormat)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the custom quantizer function specified in the <paramref name="quantizingFunction"/> parameter.
             </summary>
             <param name="quantizingFunction">A delegate that specifies the custom quantization logic. It must be thread-safe for parallel invoking and it is expected to be fast.
             The results returned by the delegate are not cached.</param>
             <param name="pixelFormatHint">The <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> value that the <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.PixelFormatHint"/> property of the returned instance will return. This parameter is optional.
             <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the custom quantizer function specified in the <paramref name="quantizingFunction"/> parameter.</returns>
             <remarks>
             <para>The quantizer returned by this method does not have a palette. If you need to create an indexed result using a custom mapping function that
             uses up to 256 different colors, then create a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance specifying a custom function and call the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(KGySoft.Drawing.Imaging.Palette)"/> method instead.</para>
             <para>This overload always calls the <paramref name="quantizingFunction"/> delegate without preprocessing the input colors.
             In order to pass only opaque colors to the <paramref name="quantizingFunction"/> delegate use the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Color,KGySoft.Drawing.Imaging.KnownPixelFormat,System.Byte)"/> overload instead.</para>
             <para>This overload always creates a quantizer with black <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BackColor"/> and zero <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.AlphaThreshold"/>. If <paramref name="quantizingFunction"/> can return colors with alpha,
             then the background color and alpha threshold are relevant only when this quantizer is used together with an <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/>, which does not support partial transparency.
             Use the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Color,System.Byte,System.Boolean,KGySoft.Drawing.Imaging.KnownPixelFormat)"/> overload to specify the <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.AlphaThreshold"/> properties.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static IReadWriteBitmapData ToGrayscalePreserveAlpha(IReadWriteBitmapData source)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.FromCustomFunction(c => c.ToGray());
            
                 // a.) this solution returns a new bitmap data and does not change the original one:
                 return source.Clone(KnownPixelFormat.Format32bppArgb, quantizer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap data:
                 source.Quantize(quantizer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <table class="table is-hoverable">
             <thead><tr><th width="50%"><div style="text-align:center;">Original image</div></th><th width="50%"><div style="text-align:center;">Quantized image</div></th></tr></thead>
             <tbody>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/AlphaGradientGrayscale.png" alt="Grayscale color hues with alpha preserved"/>
             <br/>Alpha has been preserved</para></div></td>
             </tr>
             <tr><td><div style="text-align:center;">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></td>
             <td><div style="text-align:center;">
             <para><img src="../Help/Images/ShieldGrayscale.png" alt="Grayscale shield icon with alpha preserved"/>
             <br/>Alpha has been preserved</para></div></td>
             </tr>
             </tbody></table></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Color,System.Byte,System.Boolean,KGySoft.Drawing.Imaging.KnownPixelFormat)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the custom quantizer function specified in the <paramref name="quantizingFunction"/> parameter.
            </summary>
            <param name="quantizingFunction">A delegate that specifies the custom quantization logic. It must be thread-safe for parallel invoking and it is expected to be fast.
            The results returned by the delegate are not cached.</param>
            <param name="backColor">Determines the <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BackColor"/> property of the result. The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored.
            <br/>If <paramref name="autoBlend"/> is <see langword="true"/>, then colors with alpha (transparency), whose <see cref="P:System.Drawing.Color.A">Color.A</see> property
            is equal to or greater than <paramref name="alphaThreshold"/> will be blended with this color before invoking the <paramref name="quantizingFunction"/> delegate.
            <br/>If <paramref name="autoBlend"/> is <see langword="false"/>, then this parameter matters only if a consumer considers the <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BackColor"/> property, such as an <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance that does not support partial transparency.</param>
            <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent without invoking <paramref name="quantizingFunction"/>.
            <br/>If <paramref name="autoBlend"/> is <see langword="true"/>, then <paramref name="quantizingFunction"/> will never be invoked with colors with alpha. Instead, colors whose alpha
            equal to or greater than this parameter will be blended with <paramref name="backColor"/> before invoking <paramref name="quantizingFunction"/>.
            <br/>If <paramref name="autoBlend"/> is <see langword="false"/>, then colors with alpha equal to or greater than this parameter
            are allowed to be passed to <paramref name="quantizingFunction"/> without blending with <paramref name="backColor"/>.</param>
            <param name="autoBlend"><see langword="true"/> to always apply <paramref name="backColor"/> and <paramref name="alphaThreshold"/> to the input color before invoking <paramref name="quantizingFunction"/>.
            <br/><see langword="false"/> to apply only <paramref name="alphaThreshold"/> to the input colors and allowing <paramref name="quantizingFunction"/> to be invoked with partially transparent colors.</param>
            <param name="pixelFormatHint">The <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> value that the <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.PixelFormatHint"/> property of the returned instance will return. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppArgb"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the custom quantizer function specified in the <paramref name="quantizingFunction"/> parameter.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromBitmapData(KGySoft.Drawing.Imaging.IBitmapData)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that is compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>
            and uses its <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> if <paramref name="bitmapData"/> represents an indexed bitmap.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> to get a compatible quantizer for.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that is compatible with the specified <paramref name="bitmapData"/>.</returns>
            <remarks>
            <para>If the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> is <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format24bppRgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/> or <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppRgb"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb888(System.Drawing.Color)">Rgb888</see> method.</para>
            <para>If the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> is <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppArgb1555"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb1555(System.Drawing.Color,System.Byte)">Argb1555</see> method.</para>
            <para>If the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> is <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppRgb565"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb565(System.Drawing.Color)">Rgb565</see> method.</para>
            <para>If the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> is <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppRgb555"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb555(System.Drawing.Color)">Rgb555</see> method.</para>
            <para>If the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> is <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">Grayscale</see> method.</para>
            <para>If the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> is an indexed format,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(KGySoft.Drawing.Imaging.Palette)"/> method using the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the specified <paramref name="bitmapData"/>.</para>
            <para>If none of above and the <paramref name="bitmapData"/> has been created by one of the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData">BitmapDataFactory.CreateBitmapData</see> methods
            that create bitmap data with custom pixel format, then a special quantizer is returned that produces exactly the same colors as the specified <paramref name="bitmapData"/>.</para>
            <para>Otherwise, this method returns either the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb8888(System.Drawing.Color,System.Byte)">Argb8888</see> method (if the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> supports alpha);
            otherwise, the same one as returned by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb888(System.Drawing.Color)">Rgb888</see> method.</para>
            <note>For examples see the <strong>Examples</strong> section of the mentioned methods above.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromPixelFormat(KGySoft.Drawing.Imaging.KnownPixelFormat,System.Drawing.Color,System.Byte)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that is compatible with the specified <paramref name="pixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="pixelFormat">The <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> to get a compatible quantizer for.</param>
            <param name="backColor">Colors with alpha (transparency), which are considered opaque will be blended with this color before quantization.
            The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property,
            under which a quantized color is considered completely transparent. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that is compatible with the specified <paramref name="pixelFormat"/>.</returns>
            <remarks>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format24bppRgb"/>, <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format48bppRgb"/> or <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format32bppRgb"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb888(System.Drawing.Color)">Rgb888</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppArgb1555"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb1555(System.Drawing.Color,System.Byte)">Argb1555</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppRgb565"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb565(System.Drawing.Color)">Rgb565</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppRgb555"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb555(System.Drawing.Color)">Rgb555</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format16bppGrayScale"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">Grayscale</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format8bppIndexed"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">SystemDefault8BppPalette</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format4bppIndexed"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">SystemDefault4BppPalette</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:KGySoft.Drawing.Imaging.KnownPixelFormat.Format1bppIndexed"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault1BppPalette(System.Drawing.Color)">SystemDefault1BppPalette</see> method.</para>
            <para>In any other case than the ones above this method the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb8888(System.Drawing.Color,System.Byte)">Argb8888</see> method.</para>
            <note>For examples see the <strong>Examples</strong> section of the mentioned methods above.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.ConfigureColorSpace(KGySoft.Drawing.Imaging.WorkingColorSpace)">
            <summary>
            Configures the preferred working color space for this <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/>.
            The configuration might be ignored if this instance was created from a custom function.
            The configuration may affect alpha blending, nearest color lookup if this quantizer has a <see cref="T:KGySoft.Drawing.Imaging.Palette"/>, and also the behavior of ditherers that use this quantizer.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.WorkingColorSpace"/> enumeration for details and
            image examples about using the different color spaces in various operations.
            </summary>
            <param name="workingColorSpace">Specifies the working color space for the generated <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Palette"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that uses the specified color space.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workingColorSpace"/> is not one of the defined values.</exception>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.Color16Gray">
            <summary>
            Represents a 16-bit grayscale color.
            Implements <see cref="T:System.IEquatable`1"/> because used in a <see cref="T:System.Collections.Generic.HashSet`1"/> in <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCount``1(KGySoft.Threading.IAsyncContext,KGySoft.Drawing.Imaging.IReadableBitmapData)"/>
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.Color32">
            <summary>
            Represents a 32-bit sRGB color where every color channel is represented by a 8-bit integer.
            It represents the same color space as the <see cref="T:System.Drawing.Color"/> structure does but in a more optimized way
            for better performance and smaller memory consumption.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.Color32.A">
            <summary>
            Gets the alpha component value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.Color32.R">
            <summary>
            Gets the red component value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.Color32.G">
            <summary>
            Gets the green component value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.Color32.B">
            <summary>
            Gets the blue component value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.op_Equality(KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that is to the right of the equality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structures are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.op_Inequality(KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that is to the right of the inequality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structures are different; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.op_Implicit(System.Drawing.Color)~KGySoft.Drawing.Imaging.Color32">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.Color"/> to <see cref="T:KGySoft.Drawing.Imaging.Color32"/>.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color"/> instance to convert to <see cref="T:KGySoft.Drawing.Imaging.Color32"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance representing the specified <paramref name="color"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.op_Implicit(KGySoft.Drawing.Imaging.Color32)~System.Drawing.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:KGySoft.Drawing.Imaging.Color32"/> to <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance to convert to <see cref="T:System.Drawing.Color"/>.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> instance representing the specified <paramref name="color"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> struct from ARGB (alpha, red, green, and blue) values.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> struct from RGB (red, green, and blue) values.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> struct from a <see cref="T:System.Drawing.Color"/> instance.
            </summary>
            <param name="c">A <see cref="T:System.Drawing.Color"/> structure to initialize a new instance of <see cref="T:KGySoft.Drawing.Imaging.Color32"/> from.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.FromArgb(System.Int32)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure from a 32-bit ARGB value.
            </summary>
            <param name="argb">A value specifying the 32-bit ARGB value. As a hex value it can be specified as <c>0xAA_RR_GG_BB</c> where <c>AA</c>
            is the most significant byte (MSB) and <c>BB</c> is the least significant byte (LSB).</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure from the specified 32-bit ARGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.FromArgb(System.UInt32)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure from a 32-bit ARGB value.
            </summary>
            <param name="argb">A value specifying the 32-bit ARGB value. As a hex value it can be specified as <c>0xAA_RR_GG_BB</c> where <c>AA</c>
            is the most significant byte (MSB) and <c>BB</c> is the least significant byte (LSB).</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure from the specified 32-bit ARGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.FromArgb(System.Byte,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance from the specified <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure, but with the new specified alpha value.
            </summary>
            <param name="a">The alpha value for the new <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</param>
            <param name="baseColor">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance from which to create the new one.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance from the specified <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure and alpha value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.FromRgb(System.Int32)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure from a 24-bit RGB value. The highest byte of the specified integer is ignored
            and the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">A</see> property of the result will be 255.
            </summary>
            <param name="rgb">A value specifying the 24-bit RGB value. As a hex value it can be specified as <c>0xRR_GG_BB</c>.
            The possibly nonzero alpha component will be ignored.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure from a 24-bit RGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.FromRgb(System.UInt32)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure from a 24-bit RGB value. The highest byte of the specified integer is ignored
            and the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">A</see> property of the result will be 255.
            </summary>
            <param name="rgb">A value specifying the 24-bit RGB value. As a hex value it can be specified as <c>0xRR_GG_BB</c>.
            The possibly nonzero alpha component will be ignored.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure from a 24-bit RGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.FromGray(System.Byte)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure representing a grayscale color of the specified <paramref name="brightness"/>.
            </summary>
            <param name="brightness">The brightness of the gray color to be created where 0 represents the black color and 255 represents the white color.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure representing a grayscale color of the specified <paramref name="brightness"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToColor">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance to a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color"/> structure converted from this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToArgb">
            <summary>
            Gets the 32-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <returns>The 32-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToArgbUInt32">
            <summary>
            Gets the 32-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <returns>The 32-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToRgb">
            <summary>
            Gets the 24-bit RGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance. The most significant byte of the returned integer is zero.
            </summary>
            <returns>The 24-bit RGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance. The most significant byte of the returned integer is zero.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToRgbUInt32">
            <summary>
            Gets the 24-bit RGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance. The most significant byte of the returned integer is zero.
            </summary>
            <returns>The 24-bit RGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance. The most significant byte of the returned integer is zero.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToGray">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents the matching gray shade of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance based on human perception.
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents the matching gray shade of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance based on human perception.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToOpaque">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> without alpha (transparency).
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> without alpha.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.Equals(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Determines whether the current <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance is equal to another one.
            </summary>
            <param name="other">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure to compare with this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToString">
            <summary>
            Gets the string representation of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.Color48">
            <summary>
            Represents a 48-bit RGB color.
            Implements <see cref="T:System.IEquatable`1"/> because used in a <see cref="T:System.Collections.Generic.HashSet`1"/> in <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCount``1(KGySoft.Threading.IAsyncContext,KGySoft.Drawing.Imaging.IReadableBitmapData)"/>
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.Color64">
            <summary>
            Represents a 64-bit sRGB color where every color channel is represented by a 16-bit integer.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.Color64.A">
            <summary>
            Gets the alpha component value of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.Color64.R">
            <summary>
            Gets the red component value of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.Color64.G">
            <summary>
            Gets the green component value of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.Color64.B">
            <summary>
            Gets the blue component value of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.op_Equality(KGySoft.Drawing.Imaging.Color64,KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance that is to the right of the equality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structures are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.op_Inequality(KGySoft.Drawing.Imaging.Color64,KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance that is to the right of the inequality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structures are different; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Color64"/> struct from ARGB (alpha, red, green, and blue) values.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Color64"/> struct from RGB (red, green, and blue) values.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.#ctor(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Color64"/> struct from a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <param name="c">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure to initialize a new instance of <see cref="T:KGySoft.Drawing.Imaging.Color64"/> from.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.FromArgb(System.Int64)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure from a 64-bit ARGB value.
            </summary>
            <param name="argb">A value specifying the 64-bit ARGB value. As a hex value it can be specified as <c>0xAAAA_RRRR_GGGG_BBBB</c>.
            where <c>AAAA</c> is the highest word and <c>BBBB</c> is the lowest word.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure from the specified 64-bit ARGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.FromArgb(System.UInt64)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure from a 64-bit ARGB value.
            </summary>
            <param name="argb">A value specifying the 64-bit ARGB value. As a hex value it can be specified as <c>0xAAAA_RRRR_GGGG_BBBB</c>
            where <c>AAAA</c> is the highest word and <c>BBBB</c> is the lowest word.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure from the specified 64-bit ARGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.FromArgb(System.UInt16,KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance from the specified <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure, but with the new specified alpha value.
            </summary>
            <param name="a">The alpha value for the new <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.</param>
            <param name="baseColor">The <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance from which to create the new one.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance from the specified <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure and alpha value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.FromRgb(System.Int64)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure from a 48-bit RGB value. The highest two bytes of the specified integer are ignored
            and the <see cref="F:KGySoft.Drawing.Imaging.Color64.A">A</see> property of the result will be 65535.
            </summary>
            <param name="rgb">A value specifying the 48-bit RGB value. As a hex value it can be specified as <c>0xRRRR_GGGG_BBBB</c>.
            The possibly nonzero alpha component will be ignored.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure from a 48-bit RGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.FromRgb(System.UInt64)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure from a 48-bit RGB value. The highest two bytes of the specified integer are ignored
            and the <see cref="F:KGySoft.Drawing.Imaging.Color64.A">A</see> property of the result will be 65535.
            </summary>
            <param name="rgb">A value specifying the 48-bit RGB value. As a hex value it can be specified as <c>0xRRRR_GGGG_BBBB</c>.
            The possibly nonzero alpha component will be ignored.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure from a 48-bit RGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.FromGray(System.UInt16)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure representing a grayscale color of the specified <paramref name="brightness"/>.
            </summary>
            <param name="brightness">The brightness of the gray color to be created where 0 represents the black color and 65535 represents the white color.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure representing a grayscale color of the specified <paramref name="brightness"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.ToColor32">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance to a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure.
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure converted from this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.ToArgb">
            <summary>
            Gets the 64-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.
            </summary>
            <returns>The 64-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.ToArgbUInt64">
            <summary>
            Gets the 64-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.
            </summary>
            <returns>The 64-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.ToRgb">
            <summary>
            Gets the 48-bit RGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance. The highest two of bytes of the returned integer are zero.
            </summary>
            <returns>The 48-bit RGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance. The highest two of bytes of the returned integer are zero.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.ToRgbUInt64">
            <summary>
            Gets the 48-bit RGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance. The highest two of bytes of the returned integer are zero.
            </summary>
            <returns>The 48-bit RGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance. The highest two of bytes of the returned integer are zero.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.ToGray">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance that represents the matching gray shade of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance based on human perception.
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance that represents the matching gray shade of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance based on human perception.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.ToOpaque">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance that represents this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> without alpha (transparency).
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance that represents this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> without alpha.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.Equals(KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Determines whether the current <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance is equal to another one.
            </summary>
            <param name="other">A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure to compare with this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color64.ToString">
            <summary>
            Gets the string representation of this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ColorF">
            <summary>
            Represents a 128-bit linear (not gamma-corrected) color where every color channel is represented by a 32-bit floating point value.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.ColorF.R">
            <summary>
            Gets the red component value of this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.ColorF.G">
            <summary>
            Gets the green component value of this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.ColorF.B">
            <summary>
            Gets the blue component value of this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.ColorF.A">
            <summary>
            Gets the alpha component value of this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ColorF.IsValid">
            <summary>
            Gets whether this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance represents a valid color.
            That is, when <see cref="F:KGySoft.Drawing.Imaging.ColorF.A"/>, <see cref="F:KGySoft.Drawing.Imaging.ColorF.R"/>, <see cref="F:KGySoft.Drawing.Imaging.ColorF.G"/> and <see cref="F:KGySoft.Drawing.Imaging.ColorF.B"/> fields are all between 0 and 1.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.op_Equality(KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance that is to the right of the equality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> structures are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.op_Inequality(KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance that is to the right of the inequality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> structures are different; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.op_Multiply(KGySoft.Drawing.Imaging.ColorF,System.Single)">
            <summary>
            Multiplies a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> by the given scalar.
            </summary>
            <param name="left">The source color.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.op_Division(KGySoft.Drawing.Imaging.ColorF,System.Single)">
            <summary>
            Divides a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> by the given scalar.
            </summary>
            <param name="left">The source color.</param>
            <param name="right">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.op_Addition(KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Adds two colors together.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>The summed color.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.op_Addition(KGySoft.Drawing.Imaging.ColorF,System.Single)">
            <summary>
            Adds a given scalar to a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/>.
            </summary>
            <param name="left">The source color.</param>
            <param name="right">The scalar value.</param>
            <returns>The result color.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.op_Subtraction(KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Subtracts the second color from the first one.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>The color that results from subtracting <paramref name="right"/> from <paramref name="right"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.op_Subtraction(KGySoft.Drawing.Imaging.ColorF,System.Single)">
            <summary>
            Subtracts a given scalar from the first color.
            </summary>
            <param name="left">The source color.</param>
            <param name="right">The scalar value.</param>
            <returns>The result color.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> struct from ARGB (alpha, red, green, and blue) values.
            For performance reasons this overload does not validate the parameters but you can use the <see cref="M:KGySoft.Drawing.Imaging.ColorF.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean)"/> constructor
            or the <see cref="P:KGySoft.Drawing.Imaging.ColorF.IsValid"/> property for validation, or the <see cref="M:KGySoft.Drawing.Imaging.ColorF.Clip">Clip</see> method to return a valid instance.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> struct from RGB (red, green, and blue) values.
            For performance reasons this overload does not validate the parameters but you can use the <see cref="M:KGySoft.Drawing.Imaging.ColorF.#ctor(System.Single,System.Single,System.Single,System.Boolean)"/> constructor
            or the <see cref="P:KGySoft.Drawing.Imaging.ColorF.IsValid"/> property for validation, or the <see cref="M:KGySoft.Drawing.Imaging.ColorF.Clip">Clip</see> method to return a valid instance.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> struct from ARGB (alpha, red, green, and blue) values.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="validate"><see langword="true"/> to validate the parameters; <see langword="false"/> to skip the validation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="validate"/> is <see langword="true"/> and <paramref name="r"/>, <paramref name="g"/>, <paramref name="b"/> or <paramref name="a"/> is not between 0 and 1.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> struct from RGB (red, green, and blue) values.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="validate"><see langword="true"/> to validate the parameters; <see langword="false"/> to skip the validation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="validate"/> is <see langword="true"/> and <paramref name="r"/>, <paramref name="g"/> or <paramref name="b"/> is not between 0 and 1.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.#ctor(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> struct from a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <param name="c">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure to initialize a new instance of <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> from.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.#ctor(KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> struct from a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.
            </summary>
            <param name="c">A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure to initialize a new instance of <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> from.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.Clip">
            <summary>
            Returns a valid <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance by clipping the possibly exceeding ARGB values.
            If <see cref="P:KGySoft.Drawing.Imaging.ColorF.IsValid"/> returns <see langword="true"/>, then the result is the same as the original instance.
            </summary>
            <returns>A valid <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance by clipping the possibly exceeding ARGB values.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.ToColor32">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance to a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure.
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure converted from this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.ToColor64">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance to a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure.
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure converted from this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.ToString">
            <summary>
            Gets the string representation of this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.Equals(KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Determines whether the current <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance is equal to another one.
            </summary>
            <param name="other">A <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> structure to compare with this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.CopySession.PerformDrawDirect">
            <summary>
            Drawing without a quantizer in 32bpp color space.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.CopySession.TryPerformRawCopy">
            <summary>
            Tries to perform a raw copy. If succeeds converts the horizontal dimensions to bytes from pixels.
            Note: Stride and origin is set from outside so we spare some casts and possible GCHandle uses.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.PColor32">
            <summary>
            Represents a 32-bit premultiplied sRGB color where every color channel is represented by a 8-bit integer.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.PColor32.A">
            <summary>
            Gets the alpha component value of this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.PColor32.R">
            <summary>
            Gets the red component value of this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.PColor32.G">
            <summary>
            Gets the green component value of this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.PColor32.B">
            <summary>
            Gets the blue component value of this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PColor32.IsValid">
            <summary>
            Gets whether this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance represents a valid premultiplied color.
            That is, when <see cref="F:KGySoft.Drawing.Imaging.PColor32.A"/> is greater than or equal to <see cref="F:KGySoft.Drawing.Imaging.PColor32.R"/>, <see cref="F:KGySoft.Drawing.Imaging.PColor32.G"/> and <see cref="F:KGySoft.Drawing.Imaging.PColor32.B"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.op_Equality(KGySoft.Drawing.Imaging.PColor32,KGySoft.Drawing.Imaging.PColor32)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance that is to the right of the equality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structures are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.op_Inequality(KGySoft.Drawing.Imaging.PColor32,KGySoft.Drawing.Imaging.PColor32)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance that is to the right of the inequality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structures are different; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> struct from ARGB (alpha, red, green, and blue) values.
            For performance reasons this overload does not validate the parameters but you can use the <see cref="M:KGySoft.Drawing.Imaging.PColor32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)"/> constructor
            or the <see cref="P:KGySoft.Drawing.Imaging.PColor32.IsValid"/> property for validation, or the <see cref="M:KGySoft.Drawing.Imaging.PColor32.Clip">Clip</see> method to return a valid instance.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> struct from ARGB (alpha, red, green, and blue) values.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="validate"><see langword="true"/> to validate the parameters; <see langword="false"/> to skip the validation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="validate"/> is <see langword="true"/> and <paramref name="r"/>, <paramref name="g"/> or <paramref name="b"/> is not between 0 and <paramref name="a"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> struct from RGB (red, green, and blue) values.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.#ctor(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> struct from a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <param name="c">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure to initialize a new instance of <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> from.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.FromArgb(System.Int32)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structure from a 32-bit ARGB value.
            </summary>
            <param name="argb">A value specifying the 32-bit ARGB value. As a hex value it can be specified as <c>0xAA_RR_GG_BB</c> where <c>AA</c>
            is the most significant byte (MSB) and <c>BB</c> is the least significant byte (LSB). The parameter is not validated but
            You can use the <see cref="P:KGySoft.Drawing.Imaging.PColor32.IsValid"/> property or the <see cref="M:KGySoft.Drawing.Imaging.PColor32.Clip">Clip</see> method on the created result.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structure from the specified 32-bit ARGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.FromArgb(System.UInt32)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structure from a 32-bit ARGB value.
            </summary>
            <param name="argb">A value specifying the 32-bit ARGB value. As a hex value it can be specified as <c>0xAA_RR_GG_BB</c> where <c>AA</c>
            is the most significant byte (MSB) and <c>BB</c> is the least significant byte (LSB). The parameter is not validated but
            You can use the <see cref="P:KGySoft.Drawing.Imaging.PColor32.IsValid"/> property or the <see cref="M:KGySoft.Drawing.Imaging.PColor32.Clip">Clip</see> method on the created result.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structure from the specified 32-bit ARGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.Clip">
            <summary>
            Returns a valid <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance by clipping the possibly exceeding original RGB values.
            If <see cref="P:KGySoft.Drawing.Imaging.PColor32.IsValid"/> returns <see langword="true"/>, then the result is the same as the original instance.
            </summary>
            <returns>A valid <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance by clipping the possibly exceeding original RGB values.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.ToColor32">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance to a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure.
            It's practically the same as calling the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.ToStraight(KGySoft.Drawing.Imaging.PColor32)"/> method.
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure converted from this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.ToArgb">
            <summary>
            Gets the 32-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.
            </summary>
            <returns>The 32-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.ToArgbUInt32">
            <summary>
            Gets the 32-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.
            </summary>
            <returns>The 32-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.Equals(KGySoft.Drawing.Imaging.PColor32)">
            <summary>
            Determines whether the current <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance is equal to another one.
            </summary>
            <param name="other">A <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structure to compare with this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor32.ToString">
            <summary>
            Gets the string representation of this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.PColor64">
            <summary>
            Represents a 64-bit premultiplied sRGB color where every color channel is represented by a 16-bit integer.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.PColor64.A">
            <summary>
            Gets the alpha component value of this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.PColor64.R">
            <summary>
            Gets the red component value of this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.PColor64.G">
            <summary>
            Gets the green component value of this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.PColor64.B">
            <summary>
            Gets the blue component value of this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PColor64.IsValid">
            <summary>
            Gets whether this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance represents a valid premultiplied color.
            That is, when <see cref="F:KGySoft.Drawing.Imaging.PColor64.A"/> is greater than or equal to <see cref="F:KGySoft.Drawing.Imaging.PColor64.R"/>, <see cref="F:KGySoft.Drawing.Imaging.PColor64.G"/> and <see cref="F:KGySoft.Drawing.Imaging.PColor64.B"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.op_Equality(KGySoft.Drawing.Imaging.PColor64,KGySoft.Drawing.Imaging.PColor64)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance that is to the right of the equality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> structures are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.op_Inequality(KGySoft.Drawing.Imaging.PColor64,KGySoft.Drawing.Imaging.PColor64)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance that is to the right of the inequality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> structures are different; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> struct from ARGB (alpha, red, green, and blue) values.
            For performance reasons this overload does not validate the parameters but you can use the <see cref="M:KGySoft.Drawing.Imaging.PColor64.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.Boolean)"/> constructor
            or the <see cref="P:KGySoft.Drawing.Imaging.PColor64.IsValid"/> property for validation, or the <see cref="M:KGySoft.Drawing.Imaging.PColor64.Clip">Clip</see> method to return a valid instance.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> struct from ARGB (alpha, red, green, and blue) values.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="validate"><see langword="true"/> to validate the parameters; <see langword="false"/> to skip the validation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="validate"/> is <see langword="true"/> and <paramref name="r"/>, <paramref name="g"/> or <paramref name="b"/> is not between 0 and <paramref name="a"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> struct from RGB (red, green, and blue) values.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.#ctor(KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> struct from a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.
            </summary>
            <param name="c">A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure to initialize a new instance of <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> from.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.#ctor(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> struct from a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <param name="c">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure to initialize a new instance of <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> from.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.#ctor(KGySoft.Drawing.Imaging.PColor32)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> struct from a <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> instance.
            </summary>
            <param name="c">A <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structure to initialize a new instance of <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> from.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.FromArgb(System.Int64)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> structure from a 64-bit ARGB value.
            </summary>
            <param name="argb">A value specifying the 64-bit ARGB value. As a hex value it can be specified as <c>0xAAAA_RRRR_GGGG_BBBB</c>
            where <c>AAAA</c> is the highest word and <c>BBBB</c> is the lowest word.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> structure from the specified 64-bit ARGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.FromArgb(System.UInt64)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> structure from a 64-bit ARGB value.
            </summary>
            <param name="argb">A value specifying the 64-bit ARGB value. As a hex value it can be specified as <c>0xAAAA_RRRR_GGGG_BBBB</c>
            where <c>AAAA</c> is the highest word and <c>BBBB</c> is the lowest word.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> structure from the specified 64-bit ARGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.Clip">
            <summary>
            Returns a valid <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance by clipping the possibly exceeding original RGB values.
            If <see cref="P:KGySoft.Drawing.Imaging.PColor64.IsValid"/> returns <see langword="true"/>, then the result is the same as the original instance.
            </summary>
            <returns>A valid <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance by clipping the possibly exceeding original RGB values.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.ToColor64">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance to a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure.
            It's practically the same as calling the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.ToStraight(KGySoft.Drawing.Imaging.PColor64)"/> method.
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure converted from this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.ToColor32">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance to a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure.
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure converted from this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.ToPColor32">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance to a <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structure.
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PColor32"/> structure converted from this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.ToArgb">
            <summary>
            Gets the 64-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.
            </summary>
            <returns>The 64-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.ToArgbUInt64">
            <summary>
            Gets the 64-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.
            </summary>
            <returns>The 64-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.Equals(KGySoft.Drawing.Imaging.PColor64)">
            <summary>
            Determines whether the current <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance is equal to another one.
            </summary>
            <param name="other">A <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> structure to compare with this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColor64.ToString">
            <summary>
            Gets the string representation of this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:KGySoft.Drawing.Imaging.PColor64"/> instance.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.PColorF">
            <summary>
            Represents a 128-bit premultiplied linear (not gamma-corrected) color where every color channel is represented by a 32-bit floating point value.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.PColorF.R">
            <summary>
            Gets the red component value of this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.PColorF.G">
            <summary>
            Gets the green component value of this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.PColorF.B">
            <summary>
            Gets the blue component value of this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.PColorF.A">
            <summary>
            Gets the alpha component value of this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> structure. This field is read-only.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PColorF.IsValid">
            <summary>
            Gets whether this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance represents a valid color.
            That is, when <see cref="F:KGySoft.Drawing.Imaging.PColorF.A"/>, <see cref="F:KGySoft.Drawing.Imaging.PColorF.R"/>, <see cref="F:KGySoft.Drawing.Imaging.PColorF.G"/> and <see cref="F:KGySoft.Drawing.Imaging.PColorF.B"/> fields are all between 0 and 1,
            and <see cref="F:KGySoft.Drawing.Imaging.PColorF.A"/> is greater than or equal to <see cref="F:KGySoft.Drawing.Imaging.PColorF.R"/>, <see cref="F:KGySoft.Drawing.Imaging.PColorF.G"/> and <see cref="F:KGySoft.Drawing.Imaging.PColorF.B"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.op_Equality(KGySoft.Drawing.Imaging.PColorF,KGySoft.Drawing.Imaging.PColorF)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance that is to the right of the equality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> structures are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.op_Inequality(KGySoft.Drawing.Imaging.PColorF,KGySoft.Drawing.Imaging.PColorF)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance that is to the right of the inequality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> structures are different; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.op_Multiply(KGySoft.Drawing.Imaging.PColorF,System.Single)">
            <summary>
            Multiplies a <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> by the given scalar.
            </summary>
            <param name="left">The source color.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.op_Division(KGySoft.Drawing.Imaging.PColorF,System.Single)">
            <summary>
            Divides  a <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> by the given scalar.
            </summary>
            <param name="left">The source color.</param>
            <param name="right">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.op_Addition(KGySoft.Drawing.Imaging.PColorF,KGySoft.Drawing.Imaging.PColorF)">
            <summary>
            Adds two colors together.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>The summed color.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.op_Addition(KGySoft.Drawing.Imaging.PColorF,System.Single)">
            <summary>
            Adds a given scalar to a <see cref="T:KGySoft.Drawing.Imaging.PColorF"/>.
            </summary>
            <param name="left">The source color.</param>
            <param name="right">The scalar value.</param>
            <returns>The result color.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.op_Subtraction(KGySoft.Drawing.Imaging.PColorF,KGySoft.Drawing.Imaging.PColorF)">
            <summary>
            Subtracts the second color from the first one.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>The color that results from subtracting <paramref name="right"/> from <paramref name="right"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.op_Subtraction(KGySoft.Drawing.Imaging.PColorF,System.Single)">
            <summary>
            Subtracts a given scalar from the first color.
            </summary>
            <param name="left">The source color.</param>
            <param name="right">The scalar value.</param>
            <returns>The result color.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> struct from ARGB (alpha, red, green, and blue) values.
            For performance reasons this overload does not validate the parameters but you can use the <see cref="M:KGySoft.Drawing.Imaging.PColorF.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean)"/> constructor
            or the <see cref="P:KGySoft.Drawing.Imaging.PColorF.IsValid"/> property for validation, or the <see cref="M:KGySoft.Drawing.Imaging.PColorF.Clip">Clip</see> method to return a valid instance.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> struct from RGB (red, green, and blue) values.
            For performance reasons this overload does not validate the parameters but you can use the <see cref="M:KGySoft.Drawing.Imaging.PColorF.#ctor(System.Single,System.Single,System.Single,System.Boolean)"/> constructor
            or the <see cref="P:KGySoft.Drawing.Imaging.PColorF.IsValid"/> property for validation, or the <see cref="M:KGySoft.Drawing.Imaging.PColorF.Clip">Clip</see> method to return a valid instance.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> struct from ARGB (alpha, red, green, and blue) values.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="validate"><see langword="true"/> to validate the parameters; <see langword="false"/> to skip the validation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="validate"/> is <see langword="true"/> and <paramref name="a"/> is not between 0 and 1, or <paramref name="r"/>, <paramref name="g"/> or <paramref name="b"/> is not between 0 and <paramref name="a"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> struct from RGB (red, green, and blue) values.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="validate"><see langword="true"/> to validate the parameters; <see langword="false"/> to skip the validation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="validate"/> is <see langword="true"/> and <paramref name="r"/>, <paramref name="g"/> or <paramref name="b"/> is not between 0 and 1.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.#ctor(KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> struct from a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.
            </summary>
            <param name="c">A <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> structure to initialize a new instance of <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> from.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.#ctor(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> struct from a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <param name="c">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure to initialize a new instance of <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> from.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.#ctor(KGySoft.Drawing.Imaging.Color64)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> struct from a <see cref="T:KGySoft.Drawing.Imaging.Color64"/> instance.
            </summary>
            <param name="c">A <see cref="T:KGySoft.Drawing.Imaging.Color64"/> structure to initialize a new instance of <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> from.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.#ctor(KGySoft.Drawing.Imaging.PColor32)">
            <summary>
            NOTE: This ctor is not public because it does not adjust gamma.
            Used by operations that need floating-point premultiplied colors but in the sRGB color space.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.Clip">
            <summary>
            Returns a valid <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance by clipping the possibly exceeding ARGB values.
            If <see cref="P:KGySoft.Drawing.Imaging.PColorF.IsValid"/> returns <see langword="true"/>, then the result is the same as the original instance.
            </summary>
            <returns>A valid <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance by clipping the possibly exceeding ARGB values.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.ToColorF">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance to a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> structure.
            It's practically the same as calling the <see cref="M:KGySoft.Drawing.Imaging.ColorExtensions.ToStraight(KGySoft.Drawing.Imaging.PColorF)"/> method.
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> structure converted from this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.ToString">
            <summary>
            Gets the string representation of this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.Equals(KGySoft.Drawing.Imaging.PColorF)">
            <summary>
            Determines whether the current <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance is equal to another one.
            </summary>
            <param name="other">A <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> structure to compare with this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.PColorF"/> instance is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PColorF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.PixelFormatInfo">
            <summary>
            Represents a pixel format in a technology-agnostic way. Can be used to specify custom pixel formats
            for the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData">CreateBitmapData</see> method overloads
            with a <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> parameter.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel">
            <summary>
            Gets or sets the bits per pixel value of this <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/>.
            Supported range is 1..128 (or 1..16 for <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.Indexed"/> formats). Typical values are powers of two but any value is supported.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When setting this property, <paramref name="value"/> must be between 1 and 128.</exception>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PixelFormatInfo.HasAlpha">
            <summary>
            Gets or sets whether the represented pixel format has an alpha channel (transparency).
            For <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.Indexed"/> formats this property can be <see langword="false"/> because alpha support is determined by the current palette.
            Setting this property to <see langword="false"/> resets also the <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.HasPremultipliedAlpha"/> and <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.HasSingleBitAlpha"/> properties.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PixelFormatInfo.Indexed">
            <summary>
            Gets or sets whether the represented pixel format is an indexed one.
            An indexed format is not expected to have more than 16 <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.BitsPerPixel"/> (up to 65536 color entries).
            </summary>
            <value>
            If <see langword="true"/>, then pixel data represent <see cref="T:KGySoft.Drawing.Imaging.Palette"/> entries instead of direct colors.
            <br/>If <see langword="false"/>, then pixel data represent specific colors.
            </value>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PixelFormatInfo.Grayscale">
            <summary>
            Gets or sets whether the represented pixel format is a grayscale one.
            For <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.Indexed"/> formats this property can be <see langword="false"/> because grayscale nature is determined by the current palette.
            Setting this property for non-indexed custom grayscale formats helps to auto select the preferable strategy for some operations such as dithering.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PixelFormatInfo.HasPremultipliedAlpha">
            <summary>
            Gets or sets whether the represented pixel format uses premultiplied alpha.
            Setting this property to <see langword="true"/> sets also the <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.HasAlpha"/> property.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PixelFormatInfo.HasSingleBitAlpha">
            <summary>
            Gets or sets whether the represented pixel format supports single-bit alpha only (a pixel is either completely transparent or completely opaque).
            Setting this property to <see langword="true"/> sets also the <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.HasAlpha"/> property.
            It is not mandatory to set this property for custom single-bit alpha formats but it helps optimizing some drawing operations.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PixelFormatInfo.LinearGamma">
            <summary>
            Gets or sets whether the represented pixel format has linear gamma.
            For <see cref="P:KGySoft.Drawing.Imaging.PixelFormatInfo.Indexed"/> formats this property should be <see langword="false"/> because it can be configured
            at the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> constructors and factory methods whether the palette should work in the linear color space.
            If the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.WorkingColorSpace">IBitmapData.WorkingColorSpace</see> property returns <see cref="F:KGySoft.Drawing.Imaging.WorkingColorSpace.Default"/>,
            then the value of this property may affect the selected color space of some operations.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PixelFormatInfo.IsCustomFormat">
            <summary>
            Gets whether the represented pixel format is a custom one. That is, when this <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/>
            was not instantiated by its <see cref="M:KGySoft.Drawing.Imaging.PixelFormatInfo.#ctor(KGySoft.Drawing.Imaging.KnownPixelFormat)">constructor</see> with a <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> parameter
            or one of its properties have been set since then.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PixelFormatInfo.op_Equality(KGySoft.Drawing.Imaging.PixelFormatInfo,KGySoft.Drawing.Imaging.PixelFormatInfo)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that is to the right of the equality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> structures are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PixelFormatInfo.op_Inequality(KGySoft.Drawing.Imaging.PixelFormatInfo,KGySoft.Drawing.Imaging.PixelFormatInfo)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance that is to the right of the inequality operator.</param>
            <returns><see langword="true"/> if the two <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> structures are different; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PixelFormatInfo.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> struct.
            </summary>
            <param name="bitsPerPixel">The bits-per-pixel value of the pixel format to create. Must be between 1 and 128.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bitsPerPixel"/> must be between 1 and 128.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PixelFormatInfo.#ctor(KGySoft.Drawing.Imaging.KnownPixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> struct.
            </summary>
            <param name="pixelFormat">A known pixel format to initialize a <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> must be a valid format.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PixelFormatInfo.ToKnownPixelFormat">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> to a <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> representing a compatible pixel format.
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.KnownPixelFormat"/> representing a compatible pixel format.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PixelFormatInfo.Equals(KGySoft.Drawing.Imaging.PixelFormatInfo)">
            <summary>
            Determines whether the current <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance is equal to another one.
            </summary>
            <param name="other">A <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> structure to compare with this <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PixelFormatInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PixelFormatInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PixelFormatInfo.ToString">
            <summary>
            Gets the string representation of this <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:KGySoft.Drawing.Imaging.PixelFormatInfo"/> instance.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.NamespaceDoc">
            <summary>
            The <see cref="N:KGySoft.Drawing.Imaging"/> namespace provides advanced imaging functionality such as low-level bitmap data access for any pixel format,
            interfaces for quantization and dithering along with some built-in implementations, etc.
            <br/>See the <strong>Remarks</strong> section of the <see cref="N:KGySoft.Drawing"/> namespace for details about the available KGy SOFT Drawing packages and their covered namespaces.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.ColorChannels">
            <summary>
            Represents the RGB color channels when manipulating images.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ColorChannels.None">
            <summary>
            Represents none of the color channels.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ColorChannels.R">
            <summary>
            Represents the Red color channel.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ColorChannels.G">
            <summary>
            Represents the Green color channel.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ColorChannels.B">
            <summary>
            Represents the Blue color channel.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ColorChannels.Rgb">
            <summary>
            Represents the R, G and B color channels.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.DrawingOperation">
            <summary>
            Represents various drawing operations to indicate the current operation when reporting progress using an <a href="https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Threading_IAsyncProgress.htm">IAsyncProgress</a> implementation.
            This library always uses the <see cref="T:KGySoft.Drawing.DrawingOperation"/> type as a type argument when calling the <a href="https://docs.kgysoft.net/corelibraries/html/M_KGySoft_Threading_IAsyncProgress_New__1.htm">New&lt;T>(T, int, int)</a> method.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.UndefinedProcessing">
            <summary>
            Represents indefinite processing
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.InitializingQuantizer">
            <summary>
            Represents the initialization of a quantizer
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.InitializingDitherer">
            <summary>
            Represents the initialization of a ditherer
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.GeneratingPalette">
            <summary>
            Represents a palette-generating operation. Can be the part of another operation, such as quantizer initialization.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.ProcessingPixels">
            <summary>
            Represents an operation that processes pixels. An more complex async method may perform multiple processing operations one after another.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.Saving">
            <summary>
            Represents a saving operation.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.Loading">
            <summary>
            Represents a loading operation.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.ScalingMode">
            <summary>
            Represents the scaling mode when an image needs to be resized.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Auto">
            <summary>
            Represents an automatically selected scaling mode based on source/target sizes providing the best quality.
            In practice, the <see cref="F:KGySoft.Drawing.ScalingMode.MitchellNetravali"/> scaling mode is selected if either the width or height is enlarged,
            and the <see cref="F:KGySoft.Drawing.ScalingMode.Bicubic"/> scaling mode, if there is shrinking in both dimensions.
            If source and target sizes are the same, then <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/> is selected.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.NoScaling">
            <summary>
            Represents no scaling. When source and target sizes are different, then clipping might occur.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.NearestNeighbor">
            <summary>
            Represents the nearest neighbor scaling mode, which always selects the closest pixel when scaling.
            Apart from <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/> this is the fastest scaling mode but provides the poorest quality.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Box">
            <summary>
            Represents box scaling mode. When downscaling, the pixels will average.
            When upscaling, the result is identical to <see cref="F:KGySoft.Drawing.ScalingMode.NearestNeighbor"/>.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Bilinear">
            <summary>
            Represents a 2-dimensional linear interpolation scaling mode. It is among the faster scaling techniques but
            it provides an acceptable quality only if the difference between the source and target size does not exceed 25%.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Bicubic">
            <summary>
            Represents the bicubic interpolation. It both preserves sharpness and reduces artifacts quite well.
            This is the default scaling mode when downscaling images.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Lanczos2">
            <summary>
            Represents the resampling algorithm suggested by Kornél Lánczos using a kernel radius of 2 pixels.
            It both preserves sharpness and reduces artifacts quite well. When downscaling, acts also as a low-pass filter.
            The result is usually similar to the bicubic filter.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Lanczos3">
            <summary>
            Represents the resampling algorithm suggested by Kornél Lánczos using a kernel radius of 3 pixels.
            It is among the slower filters and it tends to increase the sharpness of the original image.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Spline">
            <summary>
            Represents the spline cubic interpolation. It provides smooth results but it tends to overly blur the details.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.CatmullRom">
            <summary>
            Represents the Catmull-Rom cubic interpolation. Similarly to the bicubic interpolation
            it preserves sharpness quite well without producing strong artifacts.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.MitchellNetravali">
            <summary>
            Represents the Mitchell-Netravali cubic interpolation. Usually it produces very good results.
            This is the default scaling mode when upscaling images.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Robidoux">
            <summary>
            Represents the Robidoux cubic interpolation. It produces a very similar result to the Mitchell-Netravali interpolation.
            </summary>
        </member>
        <member name="T:KGySoft.Res">
            <summary>
            Contains the string resources of the project.
            </summary>
        </member>
        <member name="P:KGySoft.Res.OperationCanceled">
            <summary>The operation was canceled.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingInvalidOperationIndexedOnly">
            <summary>This method can be used only on bitmaps with indexed pixel format.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingQuantizerInitializeNull">
            <summary>The IQuantizer.Initialize method returned a null reference.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingDithererInitializeNull">
            <summary>The IDitherer.Initialize method returned a null reference.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingNotBitmapDataStream">
            <summary>Not a valid bitmap data stream.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingInvalidBitmapDataSize">
            <summary>The bitmap data has an invalid size.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingNonIndexedPixelFormatExpected">
            <summary>This method expects a non-indexed pixel format.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingIndexedPixelFormatExpected">
            <summary>This method expects an indexed pixel format.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingWidthTooLarge">
            <summary>The specified width is too large for the given buffer width and pixel format.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingIndexedPixelFormatTooLarge">
            <summary>An indexed pixel format should not be larger than 16 bits per pixel.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingInvalidPremultipliedValues">
            <summary>For a premultiplied color the alpha value should not be smaller than the color components.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingInvalidArgbValues">
            <summary>One or more color components are out of range.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderCannotChangeProperty">
            <summary>This property cannot be set after adding the first image.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderPaletteTooLarge">
            <summary>The palette must not have more than 256 colors.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderCommentTooLong">
            <summary>GIF comments cannot be longer than 255 characters.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderCommentNotAscii">
            <summary>GIF comments can consist of ASCII characters only.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderAnimationContainsNoFrames">
            <summary>Encoder options did not return any frames.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderNullFrame">
            <summary>Encoder options returned a null frame. You must initialize GifEncodingOptions with an enumeration that does not have a null element.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderUnexpectedFrameSize">
            <summary>A frame had an unexpected size. Set the GifEncodingOptions.SizeHandling property to allow different input sizes.</summary>
        </member>
        <member name="M:KGySoft.Res.EnsureInitialized">
            <summary>
            Just an empty method to be able to trigger the static constructor without running any code other than field initializations.
            </summary>
        </member>
        <member name="M:KGySoft.Res.InternalError(System.String)">
            <summary>Internal Error: {0}</summary>
            <remarks>Use this method to avoid CA1303 for using string literals in internal errors that never supposed to occur.</remarks>
        </member>
        <member name="M:KGySoft.Res.PixelFormatInvalid(KGySoft.Drawing.Imaging.KnownPixelFormat)">
            <summary>Pixel format '{0}' does not represent an actual format.</summary>
        </member>
        <member name="M:KGySoft.Res.InvalidAsyncResult(System.String)">
            <summary>Either the IAsyncResult object did not come from the corresponding '{0}' method, or the End method was called multiple times with the same IAsyncResult.</summary>
        </member>
        <member name="M:KGySoft.Res.ImagingPaletteTooLarge(System.Int32,System.Int32)">
            <summary>Palette must not have more than {0} colors for a pixel format of {1} bits per pixel.</summary>
        </member>
        <member name="M:KGySoft.Res.ImagingStrideTooSmall(System.Int32)">
            <summary>For the given pixel format and width stride must not be less than {0}.</summary>
        </member>
        <member name="M:KGySoft.Res.ImagingStrideInvalid(System.Type,System.Int32)">
            <summary>For element type '{0}' stride must be a multiple of {1}.</summary>
        </member>
        <member name="M:KGySoft.Res.ImagingBufferLengthTooSmall(System.Int32)">
            <summary>The specified buffer should have at least {0} elements for the specified size, stride and pixel format.</summary>
        </member>
        <member name="M:KGySoft.Res.ImagingInvalidPaletteIndex(System.Int32,System.Int32)">
            <summary>Palette index {0} is invalid. It must be less than palette count {1}.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
    </members>
</doc>
